{
  "version": 3,
  "sources": ["../../eventemitter3/index.js", "../../signals/dist/signals.js", "../../howler/dist/howler.js", "../../my-pixi-coffee-pixi-game-framework/dist/BaseGameController.js", "../../my-pixi-coffee-pixi-game-framework/dist/components/GameScene.js", "../../my-pixi-coffee-pixi-game-framework/dist/components/LoadingScene.js", "../../my-pixi-coffee-pixi-game-framework/dist/events/EventBus.js", "../../my-pixi-coffee-pixi-game-framework/dist/components/StartScreen.js", "../../my-pixi-coffee-pixi-game-framework/dist/data/GameComponentsHolder.js", "../../my-pixi-coffee-pixi-game-framework/dist/data/GameConfig.js", "../../my-pixi-coffee-pixi-game-framework/dist/data/GameLoadData.js", "../../my-pixi-coffee-pixi-game-framework/dist/data/Orientation.js", "../../my-pixi-coffee-pixi-game-framework/dist/data/GameplayStates.js", "../../my-pixi-coffee-pixi-game-framework/dist/data/GameStates.js", "../../my-pixi-coffee-pixi-game-framework/dist/data/GameStatus.js", "../../@pixi/sound/src/instance.ts", "../../@pixi/sound/src/filters/Filter.ts", "../../@pixi/sound/src/webaudio/WebAudioUtils.ts", "../../@pixi/sound/src/filters/EqualizerFilter.ts", "../../@pixi/sound/src/htmlaudio/HTMLAudioContext.ts", "../../@pixi/sound/src/htmlaudio/HTMLAudioInstance.ts", "../../@pixi/sound/src/htmlaudio/HTMLAudioMedia.ts", "../../@pixi/sound/src/SoundSprite.ts", "../../@pixi/sound/src/utils/supported.ts", "../../@pixi/sound/src/webaudio/WebAudioInstance.ts", "../../@pixi/sound/src/Filterable.ts", "../../@pixi/sound/src/webaudio/WebAudioNodes.ts", "../../@pixi/sound/src/webaudio/WebAudioMedia.ts", "../../@pixi/sound/src/Sound.ts", "../../@pixi/sound/src/webaudio/WebAudioContext.ts", "../../@pixi/sound/src/SoundLibrary.ts", "../../@pixi/sound/src/soundAsset.ts", "../../@pixi/sound/src/index.ts", "../../my-pixi-coffee-pixi-game-framework/dist/eventsManager/BaseEvent.js", "../../my-pixi-coffee-pixi-game-framework/dist/eventsManager/PreloaderEvents.js", "../../my-pixi-coffee-pixi-game-framework/dist/Globals.js", "../../my-pixi-coffee-pixi-game-framework/dist/eventsManager/EventsManager.js", "../../my-pixi-coffee-pixi-game-framework/dist/managers/events/orientationTypes.js", "../../my-pixi-coffee-pixi-game-framework/dist/managers/events/deviceManager.js", "../../my-pixi-coffee-pixi-game-framework/dist/data/Preloader.js", "../../my-pixi-coffee-pixi-game-framework/dist/events/EventsEnum.js", "../../my-pixi-coffee-pixi-game-framework/dist/managers/SoundManager.js", "../../my-pixi-coffee-pixi-game-framework/dist/sound/SoundId.js", "../../my-pixi-coffee-pixi-game-framework/dist/factory/SpriteSheetFactory.js", "../../my-pixi-coffee-pixi-game-framework/dist/factory/GameFactory.js", "../../my-pixi-coffee-pixi-game-framework/dist/GameProperties.js", "../../my-pixi-coffee-pixi-game-framework/dist/managers/ScreenManager.js", "../../my-pixi-coffee-pixi-game-framework/dist/managers/PositionManager.js", "../../my-pixi-coffee-pixi-game-framework/dist/data/SceneNames.js", "../../my-pixi-coffee-pixi-game-framework/dist/Game.js", "../../my-pixi-coffee-pixi-game-framework/dist/managers/events/deviceManagerEvents.js", "../../my-pixi-coffee-pixi-game-framework/dist/statemachine/BaseState.js", "../../my-pixi-coffee-pixi-game-framework/dist/statemachine/data/SlotMachineStates.js", "../../my-pixi-coffee-pixi-game-framework/dist/statemachine/data/StateHolder.js", "../../my-pixi-coffee-pixi-game-framework/dist/statemachine/StateMachine.js", "../../my-pixi-coffee-pixi-game-framework/dist/utils/Utils.js"],
  "sourcesContent": ["'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n", "/*jslint onevar:true, undef:true, newcap:true, regexp:true, bitwise:true, maxerr:50, indent:4, white:false, nomen:false, plusplus:false */\n/*global define:false, require:false, exports:false, module:false, signals:false */\n\n/** @license\n * JS Signals <http://millermedeiros.github.com/js-signals/>\n * Released under the MIT license\n * Author: Miller Medeiros\n * Version: 1.0.0 - Build: 268 (2012/11/29 05:48 PM)\n */\n\n(function(global){\n\n    // SignalBinding -------------------------------------------------\n    //================================================================\n\n    /**\n     * Object that represents a binding between a Signal and a listener function.\n     * <br />- <strong>This is an internal constructor and shouldn't be called by regular users.</strong>\n     * <br />- inspired by Joa Ebert AS3 SignalBinding and Robert Penner's Slot classes.\n     * @author Miller Medeiros\n     * @constructor\n     * @internal\n     * @name SignalBinding\n     * @param {Signal} signal Reference to Signal object that listener is currently bound to.\n     * @param {Function} listener Handler function bound to the signal.\n     * @param {boolean} isOnce If binding should be executed just once.\n     * @param {Object} [listenerContext] Context on which listener will be executed (object that should represent the `this` variable inside listener function).\n     * @param {Number} [priority] The priority level of the event listener. (default = 0).\n     */\n    function SignalBinding(signal, listener, isOnce, listenerContext, priority) {\n\n        /**\n         * Handler function bound to the signal.\n         * @type Function\n         * @private\n         */\n        this._listener = listener;\n\n        /**\n         * If binding should be executed just once.\n         * @type boolean\n         * @private\n         */\n        this._isOnce = isOnce;\n\n        /**\n         * Context on which listener will be executed (object that should represent the `this` variable inside listener function).\n         * @memberOf SignalBinding.prototype\n         * @name context\n         * @type Object|undefined|null\n         */\n        this.context = listenerContext;\n\n        /**\n         * Reference to Signal object that listener is currently bound to.\n         * @type Signal\n         * @private\n         */\n        this._signal = signal;\n\n        /**\n         * Listener priority\n         * @type Number\n         * @private\n         */\n        this._priority = priority || 0;\n    }\n\n    SignalBinding.prototype = {\n\n        /**\n         * If binding is active and should be executed.\n         * @type boolean\n         */\n        active : true,\n\n        /**\n         * Default parameters passed to listener during `Signal.dispatch` and `SignalBinding.execute`. (curried parameters)\n         * @type Array|null\n         */\n        params : null,\n\n        /**\n         * Call listener passing arbitrary parameters.\n         * <p>If binding was added using `Signal.addOnce()` it will be automatically removed from signal dispatch queue, this method is used internally for the signal dispatch.</p>\n         * @param {Array} [paramsArr] Array of parameters that should be passed to the listener\n         * @return {*} Value returned by the listener.\n         */\n        execute : function (paramsArr) {\n            var handlerReturn, params;\n            if (this.active && !!this._listener) {\n                params = this.params? this.params.concat(paramsArr) : paramsArr;\n                handlerReturn = this._listener.apply(this.context, params);\n                if (this._isOnce) {\n                    this.detach();\n                }\n            }\n            return handlerReturn;\n        },\n\n        /**\n         * Detach binding from signal.\n         * - alias to: mySignal.remove(myBinding.getListener());\n         * @return {Function|null} Handler function bound to the signal or `null` if binding was previously detached.\n         */\n        detach : function () {\n            return this.isBound()? this._signal.remove(this._listener, this.context) : null;\n        },\n\n        /**\n         * @return {Boolean} `true` if binding is still bound to the signal and have a listener.\n         */\n        isBound : function () {\n            return (!!this._signal && !!this._listener);\n        },\n\n        /**\n         * @return {boolean} If SignalBinding will only be executed once.\n         */\n        isOnce : function () {\n            return this._isOnce;\n        },\n\n        /**\n         * @return {Function} Handler function bound to the signal.\n         */\n        getListener : function () {\n            return this._listener;\n        },\n\n        /**\n         * @return {Signal} Signal that listener is currently bound to.\n         */\n        getSignal : function () {\n            return this._signal;\n        },\n\n        /**\n         * Delete instance properties\n         * @private\n         */\n        _destroy : function () {\n            delete this._signal;\n            delete this._listener;\n            delete this.context;\n        },\n\n        /**\n         * @return {string} String representation of the object.\n         */\n        toString : function () {\n            return '[SignalBinding isOnce:' + this._isOnce +', isBound:'+ this.isBound() +', active:' + this.active + ']';\n        }\n\n    };\n\n\n/*global SignalBinding:false*/\n\n    // Signal --------------------------------------------------------\n    //================================================================\n\n    function validateListener(listener, fnName) {\n        if (typeof listener !== 'function') {\n            throw new Error( 'listener is a required param of {fn}() and should be a Function.'.replace('{fn}', fnName) );\n        }\n    }\n\n    /**\n     * Custom event broadcaster\n     * <br />- inspired by Robert Penner's AS3 Signals.\n     * @name Signal\n     * @author Miller Medeiros\n     * @constructor\n     */\n    function Signal() {\n        /**\n         * @type Array.<SignalBinding>\n         * @private\n         */\n        this._bindings = [];\n        this._prevParams = null;\n\n        // enforce dispatch to aways work on same context (#47)\n        var self = this;\n        this.dispatch = function(){\n            Signal.prototype.dispatch.apply(self, arguments);\n        };\n    }\n\n    Signal.prototype = {\n\n        /**\n         * Signals Version Number\n         * @type String\n         * @const\n         */\n        VERSION : '1.0.0',\n\n        /**\n         * If Signal should keep record of previously dispatched parameters and\n         * automatically execute listener during `add()`/`addOnce()` if Signal was\n         * already dispatched before.\n         * @type boolean\n         */\n        memorize : false,\n\n        /**\n         * @type boolean\n         * @private\n         */\n        _shouldPropagate : true,\n\n        /**\n         * If Signal is active and should broadcast events.\n         * <p><strong>IMPORTANT:</strong> Setting this property during a dispatch will only affect the next dispatch, if you want to stop the propagation of a signal use `halt()` instead.</p>\n         * @type boolean\n         */\n        active : true,\n\n        /**\n         * @param {Function} listener\n         * @param {boolean} isOnce\n         * @param {Object} [listenerContext]\n         * @param {Number} [priority]\n         * @return {SignalBinding}\n         * @private\n         */\n        _registerListener : function (listener, isOnce, listenerContext, priority) {\n\n            var prevIndex = this._indexOfListener(listener, listenerContext),\n                binding;\n\n            if (prevIndex !== -1) {\n                binding = this._bindings[prevIndex];\n                if (binding.isOnce() !== isOnce) {\n                    throw new Error('You cannot add'+ (isOnce? '' : 'Once') +'() then add'+ (!isOnce? '' : 'Once') +'() the same listener without removing the relationship first.');\n                }\n            } else {\n                binding = new SignalBinding(this, listener, isOnce, listenerContext, priority);\n                this._addBinding(binding);\n            }\n\n            if(this.memorize && this._prevParams){\n                binding.execute(this._prevParams);\n            }\n\n            return binding;\n        },\n\n        /**\n         * @param {SignalBinding} binding\n         * @private\n         */\n        _addBinding : function (binding) {\n            //simplified insertion sort\n            var n = this._bindings.length;\n            do { --n; } while (this._bindings[n] && binding._priority <= this._bindings[n]._priority);\n            this._bindings.splice(n + 1, 0, binding);\n        },\n\n        /**\n         * @param {Function} listener\n         * @return {number}\n         * @private\n         */\n        _indexOfListener : function (listener, context) {\n            var n = this._bindings.length,\n                cur;\n            while (n--) {\n                cur = this._bindings[n];\n                if (cur._listener === listener && cur.context === context) {\n                    return n;\n                }\n            }\n            return -1;\n        },\n\n        /**\n         * Check if listener was attached to Signal.\n         * @param {Function} listener\n         * @param {Object} [context]\n         * @return {boolean} if Signal has the specified listener.\n         */\n        has : function (listener, context) {\n            return this._indexOfListener(listener, context) !== -1;\n        },\n\n        /**\n         * Add a listener to the signal.\n         * @param {Function} listener Signal handler function.\n         * @param {Object} [listenerContext] Context on which listener will be executed (object that should represent the `this` variable inside listener function).\n         * @param {Number} [priority] The priority level of the event listener. Listeners with higher priority will be executed before listeners with lower priority. Listeners with same priority level will be executed at the same order as they were added. (default = 0)\n         * @return {SignalBinding} An Object representing the binding between the Signal and listener.\n         */\n        add : function (listener, listenerContext, priority) {\n            validateListener(listener, 'add');\n            return this._registerListener(listener, false, listenerContext, priority);\n        },\n\n        /**\n         * Add listener to the signal that should be removed after first execution (will be executed only once).\n         * @param {Function} listener Signal handler function.\n         * @param {Object} [listenerContext] Context on which listener will be executed (object that should represent the `this` variable inside listener function).\n         * @param {Number} [priority] The priority level of the event listener. Listeners with higher priority will be executed before listeners with lower priority. Listeners with same priority level will be executed at the same order as they were added. (default = 0)\n         * @return {SignalBinding} An Object representing the binding between the Signal and listener.\n         */\n        addOnce : function (listener, listenerContext, priority) {\n            validateListener(listener, 'addOnce');\n            return this._registerListener(listener, true, listenerContext, priority);\n        },\n\n        /**\n         * Remove a single listener from the dispatch queue.\n         * @param {Function} listener Handler function that should be removed.\n         * @param {Object} [context] Execution context (since you can add the same handler multiple times if executing in a different context).\n         * @return {Function} Listener handler function.\n         */\n        remove : function (listener, context) {\n            validateListener(listener, 'remove');\n\n            var i = this._indexOfListener(listener, context);\n            if (i !== -1) {\n                this._bindings[i]._destroy(); //no reason to a SignalBinding exist if it isn't attached to a signal\n                this._bindings.splice(i, 1);\n            }\n            return listener;\n        },\n\n        /**\n         * Remove all listeners from the Signal.\n         */\n        removeAll : function () {\n            var n = this._bindings.length;\n            while (n--) {\n                this._bindings[n]._destroy();\n            }\n            this._bindings.length = 0;\n        },\n\n        /**\n         * @return {number} Number of listeners attached to the Signal.\n         */\n        getNumListeners : function () {\n            return this._bindings.length;\n        },\n\n        /**\n         * Stop propagation of the event, blocking the dispatch to next listeners on the queue.\n         * <p><strong>IMPORTANT:</strong> should be called only during signal dispatch, calling it before/after dispatch won't affect signal broadcast.</p>\n         * @see Signal.prototype.disable\n         */\n        halt : function () {\n            this._shouldPropagate = false;\n        },\n\n        /**\n         * Dispatch/Broadcast Signal to all listeners added to the queue.\n         * @param {...*} [params] Parameters that should be passed to each handler.\n         */\n        dispatch : function (params) {\n            if (! this.active) {\n                return;\n            }\n\n            var paramsArr = Array.prototype.slice.call(arguments),\n                n = this._bindings.length,\n                bindings;\n\n            if (this.memorize) {\n                this._prevParams = paramsArr;\n            }\n\n            if (! n) {\n                //should come after memorize\n                return;\n            }\n\n            bindings = this._bindings.slice(); //clone array in case add/remove items during dispatch\n            this._shouldPropagate = true; //in case `halt` was called before dispatch or during the previous dispatch.\n\n            //execute all callbacks until end of the list or until a callback returns `false` or stops propagation\n            //reverse loop since listeners with higher priority will be added at the end of the list\n            do { n--; } while (bindings[n] && this._shouldPropagate && bindings[n].execute(paramsArr) !== false);\n        },\n\n        /**\n         * Forget memorized arguments.\n         * @see Signal.memorize\n         */\n        forget : function(){\n            this._prevParams = null;\n        },\n\n        /**\n         * Remove all bindings from signal and destroy any reference to external objects (destroy Signal object).\n         * <p><strong>IMPORTANT:</strong> calling any method on the signal instance after calling dispose will throw errors.</p>\n         */\n        dispose : function () {\n            this.removeAll();\n            delete this._bindings;\n            delete this._prevParams;\n        },\n\n        /**\n         * @return {string} String representation of the object.\n         */\n        toString : function () {\n            return '[Signal active:'+ this.active +' numListeners:'+ this.getNumListeners() +']';\n        }\n\n    };\n\n\n    // Namespace -----------------------------------------------------\n    //================================================================\n\n    /**\n     * Signals namespace\n     * @namespace\n     * @name signals\n     */\n    var signals = Signal;\n\n    /**\n     * Custom event broadcaster\n     * @see Signal\n     */\n    // alias for backwards compatibility (see #gh-44)\n    signals.Signal = Signal;\n\n\n\n    //exports to multiple environments\n    if(typeof define === 'function' && define.amd){ //AMD\n        define(function () { return signals; });\n    } else if (typeof module !== 'undefined' && module.exports){ //node\n        module.exports = signals;\n    } else { //browser\n        //use string because of Google closure compiler ADVANCED_MODE\n        /*jslint sub:true */\n        global['signals'] = signals;\n    }\n\n}(this));\n", "/*!\n *  howler.js v2.2.4\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create the global controller. All contained methods and properties apply\n   * to all sounds that are currently playing or will be in the future.\n   */\n  var HowlerGlobal = function() {\n    this.init();\n  };\n  HowlerGlobal.prototype = {\n    /**\n     * Initialize the global Howler object.\n     * @return {Howler}\n     */\n    init: function() {\n      var self = this || Howler;\n\n      // Create a global ID counter.\n      self._counter = 1000;\n\n      // Pool of unlocked HTML5 Audio objects.\n      self._html5AudioPool = [];\n      self.html5PoolSize = 10;\n\n      // Internal properties.\n      self._codecs = {};\n      self._howls = [];\n      self._muted = false;\n      self._volume = 1;\n      self._canPlayEvent = 'canplaythrough';\n      self._navigator = (typeof window !== 'undefined' && window.navigator) ? window.navigator : null;\n\n      // Public properties.\n      self.masterGain = null;\n      self.noAudio = false;\n      self.usingWebAudio = true;\n      self.autoSuspend = true;\n      self.ctx = null;\n\n      // Set to false to disable the auto audio unlocker.\n      self.autoUnlock = true;\n\n      // Setup the various state values for global tracking.\n      self._setup();\n\n      return self;\n    },\n\n    /**\n     * Get/set the global volume for all sounds.\n     * @param  {Float} vol Volume from 0.0 to 1.0.\n     * @return {Howler/Float}     Returns self or current volume.\n     */\n    volume: function(vol) {\n      var self = this || Howler;\n      vol = parseFloat(vol);\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        self._volume = vol;\n\n        // Don't update any of the nodes if we are muted.\n        if (self._muted) {\n          return self;\n        }\n\n        // When using Web Audio, we just need to adjust the master gain.\n        if (self.usingWebAudio) {\n          self.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n        }\n\n        // Loop through and change volume for all HTML5 audio nodes.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and change the volumes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node) {\n                sound._node.volume = sound._volume * vol;\n              }\n            }\n          }\n        }\n\n        return self;\n      }\n\n      return self._volume;\n    },\n\n    /**\n     * Handle muting and unmuting globally.\n     * @param  {Boolean} muted Is muted or not.\n     */\n    mute: function(muted) {\n      var self = this || Howler;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      self._muted = muted;\n\n      // With Web Audio, we just need to mute the master gain.\n      if (self.usingWebAudio) {\n        self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);\n      }\n\n      // Loop through and mute all HTML5 Audio nodes.\n      for (var i=0; i<self._howls.length; i++) {\n        if (!self._howls[i]._webAudio) {\n          // Get all of the sounds in this Howl group.\n          var ids = self._howls[i]._getSoundIds();\n\n          // Loop through all sounds and mark the audio node as muted.\n          for (var j=0; j<ids.length; j++) {\n            var sound = self._howls[i]._soundById(ids[j]);\n\n            if (sound && sound._node) {\n              sound._node.muted = (muted) ? true : sound._muted;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Handle stopping all sounds globally.\n     */\n    stop: function() {\n      var self = this || Howler;\n\n      // Loop through all Howls and stop them.\n      for (var i=0; i<self._howls.length; i++) {\n        self._howls[i].stop();\n      }\n\n      return self;\n    },\n\n    /**\n     * Unload and destroy all currently loaded Howl objects.\n     * @return {Howler}\n     */\n    unload: function() {\n      var self = this || Howler;\n\n      for (var i=self._howls.length-1; i>=0; i--) {\n        self._howls[i].unload();\n      }\n\n      // Create a new AudioContext to make sure it is fully reset.\n      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {\n        self.ctx.close();\n        self.ctx = null;\n        setupAudioContext();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for codec support of specific extension.\n     * @param  {String} ext Audio file extention.\n     * @return {Boolean}\n     */\n    codecs: function(ext) {\n      return (this || Howler)._codecs[ext.replace(/^x-/, '')];\n    },\n\n    /**\n     * Setup various state values for global tracking.\n     * @return {Howler}\n     */\n    _setup: function() {\n      var self = this || Howler;\n\n      // Keeps track of the suspend/resume state of the AudioContext.\n      self.state = self.ctx ? self.ctx.state || 'suspended' : 'suspended';\n\n      // Automatically begin the 30-second suspend process\n      self._autoSuspend();\n\n      // Check if audio is available.\n      if (!self.usingWebAudio) {\n        // No audio is available on this system if noAudio is set to true.\n        if (typeof Audio !== 'undefined') {\n          try {\n            var test = new Audio();\n\n            // Check if the canplaythrough event is available.\n            if (typeof test.oncanplaythrough === 'undefined') {\n              self._canPlayEvent = 'canplay';\n            }\n          } catch(e) {\n            self.noAudio = true;\n          }\n        } else {\n          self.noAudio = true;\n        }\n      }\n\n      // Test to make sure audio isn't disabled in Internet Explorer.\n      try {\n        var test = new Audio();\n        if (test.muted) {\n          self.noAudio = true;\n        }\n      } catch (e) {}\n\n      // Check for supported codecs.\n      if (!self.noAudio) {\n        self._setupCodecs();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for browser support for various codecs and cache the results.\n     * @return {Howler}\n     */\n    _setupCodecs: function() {\n      var self = this || Howler;\n      var audioTest = null;\n\n      // Must wrap in a try/catch because IE11 in server mode throws an error.\n      try {\n        audioTest = (typeof Audio !== 'undefined') ? new Audio() : null;\n      } catch (err) {\n        return self;\n      }\n\n      if (!audioTest || typeof audioTest.canPlayType !== 'function') {\n        return self;\n      }\n\n      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, '');\n\n      // Opera version <33 has mixed MP3 support, so we need to check for and block it.\n      var ua = self._navigator ? self._navigator.userAgent : '';\n      var checkOpera = ua.match(/OPR\\/(\\d+)/g);\n      var isOldOpera = (checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33);\n      var checkSafari = ua.indexOf('Safari') !== -1 && ua.indexOf('Chrome') === -1;\n      var safariVersion = ua.match(/Version\\/(.*?) /);\n      var isOldSafari = (checkSafari && safariVersion && parseInt(safariVersion[1], 10) < 15);\n\n      self._codecs = {\n        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),\n        mpeg: !!mpegTest,\n        opus: !!audioTest.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, ''),\n        ogg: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        oga: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        wav: !!(audioTest.canPlayType('audio/wav; codecs=\"1\"') || audioTest.canPlayType('audio/wav')).replace(/^no$/, ''),\n        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),\n        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),\n        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        m4b: !!(audioTest.canPlayType('audio/x-m4b;') || audioTest.canPlayType('audio/m4b;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        weba: !!(!isOldSafari && audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, '')),\n        webm: !!(!isOldSafari && audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, '')),\n        dolby: !!audioTest.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, ''),\n        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')\n      };\n\n      return self;\n    },\n\n    /**\n     * Some browsers/devices will only allow audio to be played after a user interaction.\n     * Attempt to automatically unlock audio on the first user interaction.\n     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/\n     * @return {Howler}\n     */\n    _unlockAudio: function() {\n      var self = this || Howler;\n\n      // Only run this if Web Audio is supported and it hasn't already been unlocked.\n      if (self._audioUnlocked || !self.ctx) {\n        return;\n      }\n\n      self._audioUnlocked = false;\n      self.autoUnlock = false;\n\n      // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.\n      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.\n      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.\n      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {\n        self._mobileUnloaded = true;\n        self.unload();\n      }\n\n      // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:\n      // http://stackoverflow.com/questions/24119684\n      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050);\n\n      // Call this method on touch start to create and play a buffer,\n      // then check if the audio actually played to determine if\n      // audio has now been unlocked on iOS, Android, etc.\n      var unlock = function(e) {\n        // Create a pool of unlocked HTML5 Audio objects that can\n        // be used for playing sounds without user interaction. HTML5\n        // Audio objects must be individually unlocked, as opposed\n        // to the WebAudio API which only needs a single activation.\n        // This must occur before WebAudio setup or the source.onended\n        // event will not fire.\n        while (self._html5AudioPool.length < self.html5PoolSize) {\n          try {\n            var audioNode = new Audio();\n\n            // Mark this Audio object as unlocked to ensure it can get returned\n            // to the unlocked pool when released.\n            audioNode._unlocked = true;\n\n            // Add the audio node to the pool.\n            self._releaseHtml5Audio(audioNode);\n          } catch (e) {\n            self.noAudio = true;\n            break;\n          }\n        }\n\n        // Loop through any assigned audio nodes and unlock them.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and unlock the audio nodes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node && !sound._node._unlocked) {\n                sound._node._unlocked = true;\n                sound._node.load();\n              }\n            }\n          }\n        }\n\n        // Fix Android can not play in suspend state.\n        self._autoResume();\n\n        // Create an empty buffer.\n        var source = self.ctx.createBufferSource();\n        source.buffer = self._scratchBuffer;\n        source.connect(self.ctx.destination);\n\n        // Play the empty buffer.\n        if (typeof source.start === 'undefined') {\n          source.noteOn(0);\n        } else {\n          source.start(0);\n        }\n\n        // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.\n        if (typeof self.ctx.resume === 'function') {\n          self.ctx.resume();\n        }\n\n        // Setup a timeout to check that we are unlocked on the next event loop.\n        source.onended = function() {\n          source.disconnect(0);\n\n          // Update the unlocked state and prevent this check from happening again.\n          self._audioUnlocked = true;\n\n          // Remove the touch start listener.\n          document.removeEventListener('touchstart', unlock, true);\n          document.removeEventListener('touchend', unlock, true);\n          document.removeEventListener('click', unlock, true);\n          document.removeEventListener('keydown', unlock, true);\n\n          // Let all sounds know that audio has been unlocked.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('unlock');\n          }\n        };\n      };\n\n      // Setup a touch start listener to attempt an unlock in.\n      document.addEventListener('touchstart', unlock, true);\n      document.addEventListener('touchend', unlock, true);\n      document.addEventListener('click', unlock, true);\n      document.addEventListener('keydown', unlock, true);\n\n      return self;\n    },\n\n    /**\n     * Get an unlocked HTML5 Audio object from the pool. If none are left,\n     * return a new Audio object and throw a warning.\n     * @return {Audio} HTML5 Audio object.\n     */\n    _obtainHtml5Audio: function() {\n      var self = this || Howler;\n\n      // Return the next object from the pool if one exists.\n      if (self._html5AudioPool.length) {\n        return self._html5AudioPool.pop();\n      }\n\n      //.Check if the audio is locked and throw a warning.\n      var testPlay = new Audio().play();\n      if (testPlay && typeof Promise !== 'undefined' && (testPlay instanceof Promise || typeof testPlay.then === 'function')) {\n        testPlay.catch(function() {\n          console.warn('HTML5 Audio pool exhausted, returning potentially locked audio object.');\n        });\n      }\n\n      return new Audio();\n    },\n\n    /**\n     * Return an activated HTML5 Audio object to the pool.\n     * @return {Howler}\n     */\n    _releaseHtml5Audio: function(audio) {\n      var self = this || Howler;\n\n      // Don't add audio to the pool if we don't know if it has been unlocked.\n      if (audio._unlocked) {\n        self._html5AudioPool.push(audio);\n      }\n\n      return self;\n    },\n\n    /**\n     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.\n     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.\n     * @return {Howler}\n     */\n    _autoSuspend: function() {\n      var self = this;\n\n      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      // Check if any sounds are playing.\n      for (var i=0; i<self._howls.length; i++) {\n        if (self._howls[i]._webAudio) {\n          for (var j=0; j<self._howls[i]._sounds.length; j++) {\n            if (!self._howls[i]._sounds[j]._paused) {\n              return self;\n            }\n          }\n        }\n      }\n\n      if (self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n      }\n\n      // If no sound has played after 30 seconds, suspend the context.\n      self._suspendTimer = setTimeout(function() {\n        if (!self.autoSuspend) {\n          return;\n        }\n\n        self._suspendTimer = null;\n        self.state = 'suspending';\n\n        // Handle updating the state of the audio context after suspending.\n        var handleSuspension = function() {\n          self.state = 'suspended';\n\n          if (self._resumeAfterSuspend) {\n            delete self._resumeAfterSuspend;\n            self._autoResume();\n          }\n        };\n\n        // Either the state gets suspended or it is interrupted.\n        // Either way, we need to update the state to suspended.\n        self.ctx.suspend().then(handleSuspension, handleSuspension);\n      }, 30000);\n\n      return self;\n    },\n\n    /**\n     * Automatically resume the Web Audio AudioContext when a new sound is played.\n     * @return {Howler}\n     */\n    _autoResume: function() {\n      var self = this;\n\n      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      if (self.state === 'running' && self.ctx.state !== 'interrupted' && self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n        self._suspendTimer = null;\n      } else if (self.state === 'suspended' || self.state === 'running' && self.ctx.state === 'interrupted') {\n        self.ctx.resume().then(function() {\n          self.state = 'running';\n\n          // Emit to all Howls that the audio has resumed.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('resume');\n          }\n        });\n\n        if (self._suspendTimer) {\n          clearTimeout(self._suspendTimer);\n          self._suspendTimer = null;\n        }\n      } else if (self.state === 'suspending') {\n        self._resumeAfterSuspend = true;\n      }\n\n      return self;\n    }\n  };\n\n  // Setup the global audio controller.\n  var Howler = new HowlerGlobal();\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create an audio group controller.\n   * @param {Object} o Passed in properties for this group.\n   */\n  var Howl = function(o) {\n    var self = this;\n\n    // Throw an error if no source is provided.\n    if (!o.src || o.src.length === 0) {\n      console.error('An array of source files must be passed with any new Howl.');\n      return;\n    }\n\n    self.init(o);\n  };\n  Howl.prototype = {\n    /**\n     * Initialize a new Howl group object.\n     * @param  {Object} o Passed in properties for this group.\n     * @return {Howl}\n     */\n    init: function(o) {\n      var self = this;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!Howler.ctx) {\n        setupAudioContext();\n      }\n\n      // Setup user-defined default properties.\n      self._autoplay = o.autoplay || false;\n      self._format = (typeof o.format !== 'string') ? o.format : [o.format];\n      self._html5 = o.html5 || false;\n      self._muted = o.mute || false;\n      self._loop = o.loop || false;\n      self._pool = o.pool || 5;\n      self._preload = (typeof o.preload === 'boolean' || o.preload === 'metadata') ? o.preload : true;\n      self._rate = o.rate || 1;\n      self._sprite = o.sprite || {};\n      self._src = (typeof o.src !== 'string') ? o.src : [o.src];\n      self._volume = o.volume !== undefined ? o.volume : 1;\n      self._xhr = {\n        method: o.xhr && o.xhr.method ? o.xhr.method : 'GET',\n        headers: o.xhr && o.xhr.headers ? o.xhr.headers : null,\n        withCredentials: o.xhr && o.xhr.withCredentials ? o.xhr.withCredentials : false,\n      };\n\n      // Setup all other default properties.\n      self._duration = 0;\n      self._state = 'unloaded';\n      self._sounds = [];\n      self._endTimers = {};\n      self._queue = [];\n      self._playLock = false;\n\n      // Setup event listeners.\n      self._onend = o.onend ? [{fn: o.onend}] : [];\n      self._onfade = o.onfade ? [{fn: o.onfade}] : [];\n      self._onload = o.onload ? [{fn: o.onload}] : [];\n      self._onloaderror = o.onloaderror ? [{fn: o.onloaderror}] : [];\n      self._onplayerror = o.onplayerror ? [{fn: o.onplayerror}] : [];\n      self._onpause = o.onpause ? [{fn: o.onpause}] : [];\n      self._onplay = o.onplay ? [{fn: o.onplay}] : [];\n      self._onstop = o.onstop ? [{fn: o.onstop}] : [];\n      self._onmute = o.onmute ? [{fn: o.onmute}] : [];\n      self._onvolume = o.onvolume ? [{fn: o.onvolume}] : [];\n      self._onrate = o.onrate ? [{fn: o.onrate}] : [];\n      self._onseek = o.onseek ? [{fn: o.onseek}] : [];\n      self._onunlock = o.onunlock ? [{fn: o.onunlock}] : [];\n      self._onresume = [];\n\n      // Web Audio or HTML5 Audio?\n      self._webAudio = Howler.usingWebAudio && !self._html5;\n\n      // Automatically try to enable audio.\n      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.autoUnlock) {\n        Howler._unlockAudio();\n      }\n\n      // Keep track of this Howl group in the global controller.\n      Howler._howls.push(self);\n\n      // If they selected autoplay, add a play event to the load queue.\n      if (self._autoplay) {\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play();\n          }\n        });\n      }\n\n      // Load the source file unless otherwise specified.\n      if (self._preload && self._preload !== 'none') {\n        self.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Load the audio file.\n     * @return {Howler}\n     */\n    load: function() {\n      var self = this;\n      var url = null;\n\n      // If no audio is available, quit immediately.\n      if (Howler.noAudio) {\n        self._emit('loaderror', null, 'No audio support.');\n        return;\n      }\n\n      // Make sure our source is in an array.\n      if (typeof self._src === 'string') {\n        self._src = [self._src];\n      }\n\n      // Loop through the sources and pick the first one that is compatible.\n      for (var i=0; i<self._src.length; i++) {\n        var ext, str;\n\n        if (self._format && self._format[i]) {\n          // If an extension was specified, use that instead.\n          ext = self._format[i];\n        } else {\n          // Make sure the source is a string.\n          str = self._src[i];\n          if (typeof str !== 'string') {\n            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');\n            continue;\n          }\n\n          // Extract the file extension from the URL or base64 data URI.\n          ext = /^data:audio\\/([^;,]+);/i.exec(str);\n          if (!ext) {\n            ext = /\\.([^.]+)$/.exec(str.split('?', 1)[0]);\n          }\n\n          if (ext) {\n            ext = ext[1].toLowerCase();\n          }\n        }\n\n        // Log a warning if no extension was found.\n        if (!ext) {\n          console.warn('No file extension was found. Consider using the \"format\" property or specify an extension.');\n        }\n\n        // Check if this extension is available.\n        if (ext && Howler.codecs(ext)) {\n          url = self._src[i];\n          break;\n        }\n      }\n\n      if (!url) {\n        self._emit('loaderror', null, 'No codec support for selected audio sources.');\n        return;\n      }\n\n      self._src = url;\n      self._state = 'loading';\n\n      // If the hosting page is HTTPS and the source isn't,\n      // drop down to HTML5 Audio to avoid Mixed Content errors.\n      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {\n        self._html5 = true;\n        self._webAudio = false;\n      }\n\n      // Create a new sound object and add it to the pool.\n      new Sound(self);\n\n      // Load and decode the audio data for playback.\n      if (self._webAudio) {\n        loadBuffer(self);\n      }\n\n      return self;\n    },\n\n    /**\n     * Play a sound or resume previous playback.\n     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Number}          Sound ID.\n     */\n    play: function(sprite, internal) {\n      var self = this;\n      var id = null;\n\n      // Determine if a sprite, sound id or nothing was passed\n      if (typeof sprite === 'number') {\n        id = sprite;\n        sprite = null;\n      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {\n        // If the passed sprite doesn't exist, do nothing.\n        return null;\n      } else if (typeof sprite === 'undefined') {\n        // Use the default sound sprite (plays the full audio length).\n        sprite = '__default';\n\n        // Check if there is a single paused sound that isn't ended.\n        // If there is, play that sound. If not, continue as usual.\n        if (!self._playLock) {\n          var num = 0;\n          for (var i=0; i<self._sounds.length; i++) {\n            if (self._sounds[i]._paused && !self._sounds[i]._ended) {\n              num++;\n              id = self._sounds[i]._id;\n            }\n          }\n\n          if (num === 1) {\n            sprite = null;\n          } else {\n            id = null;\n          }\n        }\n      }\n\n      // Get the selected node, or get one from the pool.\n      var sound = id ? self._soundById(id) : self._inactiveSound();\n\n      // If the sound doesn't exist, do nothing.\n      if (!sound) {\n        return null;\n      }\n\n      // Select the sprite definition.\n      if (id && !sprite) {\n        sprite = sound._sprite || '__default';\n      }\n\n      // If the sound hasn't loaded, we must wait to get the audio's duration.\n      // We also need to wait to make sure we don't run into race conditions with\n      // the order of function calls.\n      if (self._state !== 'loaded') {\n        // Set the sprite value on this sound.\n        sound._sprite = sprite;\n\n        // Mark this sound as not ended in case another sound is played before this one loads.\n        sound._ended = false;\n\n        // Add the sound to the queue to be played on load.\n        var soundId = sound._id;\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play(soundId);\n          }\n        });\n\n        return soundId;\n      }\n\n      // Don't play the sound if an id was passed and it is already playing.\n      if (id && !sound._paused) {\n        // Trigger the play event, in order to keep iterating through queue.\n        if (!internal) {\n          self._loadQueue('play');\n        }\n\n        return sound._id;\n      }\n\n      // Make sure the AudioContext isn't suspended, and resume it if it is.\n      if (self._webAudio) {\n        Howler._autoResume();\n      }\n\n      // Determine how long to play for and where to start playing.\n      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);\n      var duration = Math.max(0, ((self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000) - seek);\n      var timeout = (duration * 1000) / Math.abs(sound._rate);\n      var start = self._sprite[sprite][0] / 1000;\n      var stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;\n      sound._sprite = sprite;\n\n      // Mark the sound as ended instantly so that this async playback\n      // doesn't get grabbed by another call to play while this one waits to start.\n      sound._ended = false;\n\n      // Update the parameters of the sound.\n      var setParams = function() {\n        sound._paused = false;\n        sound._seek = seek;\n        sound._start = start;\n        sound._stop = stop;\n        sound._loop = !!(sound._loop || self._sprite[sprite][2]);\n      };\n\n      // End the sound instantly if seek is at the end.\n      if (seek >= stop) {\n        self._ended(sound);\n        return;\n      }\n\n      // Begin the actual playback.\n      var node = sound._node;\n      if (self._webAudio) {\n        // Fire this when the sound is ready to play to begin Web Audio playback.\n        var playWebAudio = function() {\n          self._playLock = false;\n          setParams();\n          self._refreshBuffer(sound);\n\n          // Setup the playback params.\n          var vol = (sound._muted || self._muted) ? 0 : sound._volume;\n          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n          sound._playStart = Howler.ctx.currentTime;\n\n          // Play the sound using the supported method.\n          if (typeof node.bufferSource.start === 'undefined') {\n            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);\n          } else {\n            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);\n          }\n\n          // Start a new timer if none is present.\n          if (timeout !== Infinity) {\n            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n          }\n\n          if (!internal) {\n            setTimeout(function() {\n              self._emit('play', sound._id);\n              self._loadQueue();\n            }, 0);\n          }\n        };\n\n        if (Howler.state === 'running' && Howler.ctx.state !== 'interrupted') {\n          playWebAudio();\n        } else {\n          self._playLock = true;\n\n          // Wait for the audio context to resume before playing.\n          self.once('resume', playWebAudio);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      } else {\n        // Fire this when the sound is ready to play to begin HTML5 Audio playback.\n        var playHtml5 = function() {\n          node.currentTime = seek;\n          node.muted = sound._muted || self._muted || Howler._muted || node.muted;\n          node.volume = sound._volume * Howler.volume();\n          node.playbackRate = sound._rate;\n\n          // Some browsers will throw an error if this is called without user interaction.\n          try {\n            var play = node.play();\n\n            // Support older browsers that don't support promises, and thus don't have this issue.\n            if (play && typeof Promise !== 'undefined' && (play instanceof Promise || typeof play.then === 'function')) {\n              // Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().\n              self._playLock = true;\n\n              // Set param values immediately.\n              setParams();\n\n              // Releases the lock and executes queued actions.\n              play\n                .then(function() {\n                  self._playLock = false;\n                  node._unlocked = true;\n                  if (!internal) {\n                    self._emit('play', sound._id);\n                  } else {\n                    self._loadQueue();\n                  }\n                })\n                .catch(function() {\n                  self._playLock = false;\n                  self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                    'on mobile devices and Chrome where playback was not within a user interaction.');\n\n                  // Reset the ended and paused values.\n                  sound._ended = true;\n                  sound._paused = true;\n                });\n            } else if (!internal) {\n              self._playLock = false;\n              setParams();\n              self._emit('play', sound._id);\n            }\n\n            // Setting rate before playing won't work in IE, so we set it again here.\n            node.playbackRate = sound._rate;\n\n            // If the node is still paused, then we can assume there was a playback issue.\n            if (node.paused) {\n              self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                'on mobile devices and Chrome where playback was not within a user interaction.');\n              return;\n            }\n\n            // Setup the end timer on sprites or listen for the ended event.\n            if (sprite !== '__default' || sound._loop) {\n              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n            } else {\n              self._endTimers[sound._id] = function() {\n                // Fire ended on this audio node.\n                self._ended(sound);\n\n                // Clear this listener.\n                node.removeEventListener('ended', self._endTimers[sound._id], false);\n              };\n              node.addEventListener('ended', self._endTimers[sound._id], false);\n            }\n          } catch (err) {\n            self._emit('playerror', sound._id, err);\n          }\n        };\n\n        // If this is streaming audio, make sure the src is set and load again.\n        if (node.src === 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA') {\n          node.src = self._src;\n          node.load();\n        }\n\n        // Play immediately if ready, or wait for the 'canplaythrough'e vent.\n        var loadedNoReadyState = (window && window.ejecta) || (!node.readyState && Howler._navigator.isCocoonJS);\n        if (node.readyState >= 3 || loadedNoReadyState) {\n          playHtml5();\n        } else {\n          self._playLock = true;\n          self._state = 'loading';\n\n          var listener = function() {\n            self._state = 'loaded';\n            \n            // Begin playback.\n            playHtml5();\n\n            // Clear this listener.\n            node.removeEventListener(Howler._canPlayEvent, listener, false);\n          };\n          node.addEventListener(Howler._canPlayEvent, listener, false);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      }\n\n      return sound._id;\n    },\n\n    /**\n     * Pause playback and save current position.\n     * @param  {Number} id The sound ID (empty to pause all in group).\n     * @return {Howl}\n     */\n    pause: function(id) {\n      var self = this;\n\n      // If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'pause',\n          action: function() {\n            self.pause(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be paused.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound && !sound._paused) {\n          // Reset the seek position.\n          sound._seek = self.seek(ids[i]);\n          sound._rateSeek = 0;\n          sound._paused = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound has been created.\n              if (!sound._node.bufferSource) {\n                continue;\n              }\n\n              if (typeof sound._node.bufferSource.stop === 'undefined') {\n                sound._node.bufferSource.noteOff(0);\n              } else {\n                sound._node.bufferSource.stop(0);\n              }\n\n              // Clean up the buffer source.\n              self._cleanBuffer(sound._node);\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.pause();\n            }\n          }\n        }\n\n        // Fire the pause event, unless `true` is passed as the 2nd argument.\n        if (!arguments[1]) {\n          self._emit('pause', sound ? sound._id : null);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Stop playback and reset to start.\n     * @param  {Number} id The sound ID (empty to stop all in group).\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Howl}\n     */\n    stop: function(id, internal) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to stop when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'stop',\n          action: function() {\n            self.stop(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be stopped.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          // Reset the seek position.\n          sound._seek = sound._start || 0;\n          sound._rateSeek = 0;\n          sound._paused = true;\n          sound._ended = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound's AudioBufferSourceNode has been created.\n              if (sound._node.bufferSource) {\n                if (typeof sound._node.bufferSource.stop === 'undefined') {\n                  sound._node.bufferSource.noteOff(0);\n                } else {\n                  sound._node.bufferSource.stop(0);\n                }\n\n                // Clean up the buffer source.\n                self._cleanBuffer(sound._node);\n              }\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.currentTime = sound._start || 0;\n              sound._node.pause();\n\n              // If this is a live stream, stop download once the audio is stopped.\n              if (sound._node.duration === Infinity) {\n                self._clearSound(sound._node);\n              }\n            }\n          }\n\n          if (!internal) {\n            self._emit('stop', sound._id);\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Mute/unmute a single sound or all sounds in this Howl group.\n     * @param  {Boolean} muted Set to true to mute and false to unmute.\n     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).\n     * @return {Howl}\n     */\n    mute: function(muted, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to mute when capable.\n      if (self._state !== 'loaded'|| self._playLock) {\n        self._queue.push({\n          event: 'mute',\n          action: function() {\n            self.mute(muted, id);\n          }\n        });\n\n        return self;\n      }\n\n      // If applying mute/unmute to all sounds, update the group's value.\n      if (typeof id === 'undefined') {\n        if (typeof muted === 'boolean') {\n          self._muted = muted;\n        } else {\n          return self._muted;\n        }\n      }\n\n      // If no id is passed, get all ID's to be muted.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._muted = muted;\n\n          // Cancel active fade and set the volume to the end value.\n          if (sound._interval) {\n            self._stopFade(sound._id);\n          }\n\n          if (self._webAudio && sound._node) {\n            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);\n          } else if (sound._node) {\n            sound._node.muted = Howler._muted ? true : muted;\n          }\n\n          self._emit('mute', sound._id);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.\n     *   volume() -> Returns the group's volume value.\n     *   volume(id) -> Returns the sound id's current volume.\n     *   volume(vol) -> Sets the volume of all sounds in this Howl group.\n     *   volume(vol, id) -> Sets the volume of passed sound id.\n     * @return {Howl/Number} Returns self or current volume.\n     */\n    volume: function() {\n      var self = this;\n      var args = arguments;\n      var vol, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // Return the value of the groups' volume.\n        return self._volume;\n      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {\n        // First check if this is an ID, and if not, assume it is a new volume.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          vol = parseFloat(args[0]);\n        }\n      } else if (args.length >= 2) {\n        vol = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the volume or return the current volume.\n      var sound;\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        // If the sound hasn't loaded, add it to the load queue to change volume when capable.\n        if (self._state !== 'loaded'|| self._playLock) {\n          self._queue.push({\n            event: 'volume',\n            action: function() {\n              self.volume.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group volume.\n        if (typeof id === 'undefined') {\n          self._volume = vol;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            sound._volume = vol;\n\n            // Stop currently running fades.\n            if (!args[2]) {\n              self._stopFade(id[i]);\n            }\n\n            if (self._webAudio && sound._node && !sound._muted) {\n              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n            } else if (sound._node && !sound._muted) {\n              sound._node.volume = vol * Howler.volume();\n            }\n\n            self._emit('volume', sound._id);\n          }\n        }\n      } else {\n        sound = id ? self._soundById(id) : self._sounds[0];\n        return sound ? sound._volume : 0;\n      }\n\n      return self;\n    },\n\n    /**\n     * Fade a currently playing sound between two volumes (if no id is passed, all sounds will fade).\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id (omit to fade all sounds).\n     * @return {Howl}\n     */\n    fade: function(from, to, len, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to fade when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'fade',\n          action: function() {\n            self.fade(from, to, len, id);\n          }\n        });\n\n        return self;\n      }\n\n      // Make sure the to/from/len values are numbers.\n      from = Math.min(Math.max(0, parseFloat(from)), 1);\n      to = Math.min(Math.max(0, parseFloat(to)), 1);\n      len = parseFloat(len);\n\n      // Set the volume to the start position.\n      self.volume(from, id);\n\n      // Fade the volume of one or all sounds.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        // Create a linear fade or fall back to timeouts with HTML5 Audio.\n        if (sound) {\n          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).\n          if (!id) {\n            self._stopFade(ids[i]);\n          }\n\n          // If we are using Web Audio, let the native methods do the actual fade.\n          if (self._webAudio && !sound._muted) {\n            var currentTime = Howler.ctx.currentTime;\n            var end = currentTime + (len / 1000);\n            sound._volume = from;\n            sound._node.gain.setValueAtTime(from, currentTime);\n            sound._node.gain.linearRampToValueAtTime(to, end);\n          }\n\n          self._startFadeInterval(sound, from, to, len, ids[i], typeof id === 'undefined');\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Starts the internal interval to fade a sound.\n     * @param  {Object} sound Reference to sound to fade.\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id to fade.\n     * @param  {Boolean} isGroup   If true, set the volume on the group.\n     */\n    _startFadeInterval: function(sound, from, to, len, id, isGroup) {\n      var self = this;\n      var vol = from;\n      var diff = to - from;\n      var steps = Math.abs(diff / 0.01);\n      var stepLen = Math.max(4, (steps > 0) ? len / steps : len);\n      var lastTick = Date.now();\n\n      // Store the value being faded to.\n      sound._fadeTo = to;\n\n      // Update the volume value on each interval tick.\n      sound._interval = setInterval(function() {\n        // Update the volume based on the time since the last tick.\n        var tick = (Date.now() - lastTick) / len;\n        lastTick = Date.now();\n        vol += diff * tick;\n\n        // Round to within 2 decimal points.\n        vol = Math.round(vol * 100) / 100;\n\n        // Make sure the volume is in the right bounds.\n        if (diff < 0) {\n          vol = Math.max(to, vol);\n        } else {\n          vol = Math.min(to, vol);\n        }\n\n        // Change the volume.\n        if (self._webAudio) {\n          sound._volume = vol;\n        } else {\n          self.volume(vol, sound._id, true);\n        }\n\n        // Set the group's volume.\n        if (isGroup) {\n          self._volume = vol;\n        }\n\n        // When the fade is complete, stop it and fire event.\n        if ((to < from && vol <= to) || (to > from && vol >= to)) {\n          clearInterval(sound._interval);\n          sound._interval = null;\n          sound._fadeTo = null;\n          self.volume(to, sound._id);\n          self._emit('fade', sound._id);\n        }\n      }, stepLen);\n    },\n\n    /**\n     * Internal method that stops the currently playing fade when\n     * a new fade starts, volume is changed or the sound is stopped.\n     * @param  {Number} id The sound id.\n     * @return {Howl}\n     */\n    _stopFade: function(id) {\n      var self = this;\n      var sound = self._soundById(id);\n\n      if (sound && sound._interval) {\n        if (self._webAudio) {\n          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);\n        }\n\n        clearInterval(sound._interval);\n        sound._interval = null;\n        self.volume(sound._fadeTo, id);\n        sound._fadeTo = null;\n        self._emit('fade', id);\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   loop() -> Returns the group's loop value.\n     *   loop(id) -> Returns the sound id's loop value.\n     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.\n     *   loop(loop, id) -> Sets the loop value of passed sound id.\n     * @return {Howl/Boolean} Returns self or current loop value.\n     */\n    loop: function() {\n      var self = this;\n      var args = arguments;\n      var loop, id, sound;\n\n      // Determine the values for loop and id.\n      if (args.length === 0) {\n        // Return the grou's loop value.\n        return self._loop;\n      } else if (args.length === 1) {\n        if (typeof args[0] === 'boolean') {\n          loop = args[0];\n          self._loop = loop;\n        } else {\n          // Return this sound's loop value.\n          sound = self._soundById(parseInt(args[0], 10));\n          return sound ? sound._loop : false;\n        }\n      } else if (args.length === 2) {\n        loop = args[0];\n        id = parseInt(args[1], 10);\n      }\n\n      // If no id is passed, get all ID's to be looped.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._loop = loop;\n          if (self._webAudio && sound._node && sound._node.bufferSource) {\n            sound._node.bufferSource.loop = loop;\n            if (loop) {\n              sound._node.bufferSource.loopStart = sound._start || 0;\n              sound._node.bufferSource.loopEnd = sound._stop;\n\n              // If playing, restart playback to ensure looping updates.\n              if (self.playing(ids[i])) {\n                self.pause(ids[i], true);\n                self.play(ids[i], true);\n              }\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   rate() -> Returns the first sound node's current playback rate.\n     *   rate(id) -> Returns the sound id's current playback rate.\n     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.\n     *   rate(rate, id) -> Sets the playback rate of passed sound id.\n     * @return {Howl/Number} Returns self or the current playback rate.\n     */\n    rate: function() {\n      var self = this;\n      var args = arguments;\n      var rate, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current rate of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new rate value.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          rate = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        rate = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the playback rate or return the current value.\n      var sound;\n      if (typeof rate === 'number') {\n        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.\n        if (self._state !== 'loaded' || self._playLock) {\n          self._queue.push({\n            event: 'rate',\n            action: function() {\n              self.rate.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group rate.\n        if (typeof id === 'undefined') {\n          self._rate = rate;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            // Keep track of our position when the rate changed and update the playback\n            // start position so we can properly adjust the seek position for time elapsed.\n            if (self.playing(id[i])) {\n              sound._rateSeek = self.seek(id[i]);\n              sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;\n            }\n            sound._rate = rate;\n\n            // Change the playback rate.\n            if (self._webAudio && sound._node && sound._node.bufferSource) {\n              sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler.ctx.currentTime);\n            } else if (sound._node) {\n              sound._node.playbackRate = rate;\n            }\n\n            // Reset the timers.\n            var seek = self.seek(id[i]);\n            var duration = ((self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000) - seek;\n            var timeout = (duration * 1000) / Math.abs(sound._rate);\n\n            // Start a new end timer if sound is already playing.\n            if (self._endTimers[id[i]] || !sound._paused) {\n              self._clearTimer(id[i]);\n              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);\n            }\n\n            self._emit('rate', sound._id);\n          }\n        }\n      } else {\n        sound = self._soundById(id);\n        return sound ? sound._rate : self._rate;\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   seek() -> Returns the first sound node's current seek position.\n     *   seek(id) -> Returns the sound id's current seek position.\n     *   seek(seek) -> Sets the seek position of the first sound node.\n     *   seek(seek, id) -> Sets the seek position of passed sound id.\n     * @return {Howl/Number} Returns self or the current seek position.\n     */\n    seek: function() {\n      var self = this;\n      var args = arguments;\n      var seek, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current position of the first node.\n        if (self._sounds.length) {\n          id = self._sounds[0]._id;\n        }\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new seek position.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else if (self._sounds.length) {\n          id = self._sounds[0]._id;\n          seek = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        seek = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // If there is no ID, bail out.\n      if (typeof id === 'undefined') {\n        return 0;\n      }\n\n      // If the sound hasn't loaded, add it to the load queue to seek when capable.\n      if (typeof seek === 'number' && (self._state !== 'loaded' || self._playLock)) {\n        self._queue.push({\n          event: 'seek',\n          action: function() {\n            self.seek.apply(self, args);\n          }\n        });\n\n        return self;\n      }\n\n      // Get the sound.\n      var sound = self._soundById(id);\n\n      if (sound) {\n        if (typeof seek === 'number' && seek >= 0) {\n          // Pause the sound and update position for restarting playback.\n          var playing = self.playing(id);\n          if (playing) {\n            self.pause(id, true);\n          }\n\n          // Move the position of the track and cancel timer.\n          sound._seek = seek;\n          sound._ended = false;\n          self._clearTimer(id);\n\n          // Update the seek position for HTML5 Audio.\n          if (!self._webAudio && sound._node && !isNaN(sound._node.duration)) {\n            sound._node.currentTime = seek;\n          }\n\n          // Seek and emit when ready.\n          var seekAndEmit = function() {\n            // Restart the playback if the sound was playing.\n            if (playing) {\n              self.play(id, true);\n            }\n\n            self._emit('seek', id);\n          };\n\n          // Wait for the play lock to be unset before emitting (HTML5 Audio).\n          if (playing && !self._webAudio) {\n            var emitSeek = function() {\n              if (!self._playLock) {\n                seekAndEmit();\n              } else {\n                setTimeout(emitSeek, 0);\n              }\n            };\n            setTimeout(emitSeek, 0);\n          } else {\n            seekAndEmit();\n          }\n        } else {\n          if (self._webAudio) {\n            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;\n            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;\n            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));\n          } else {\n            return sound._node.currentTime;\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.\n     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.\n     * @return {Boolean} True if playing and false if not.\n     */\n    playing: function(id) {\n      var self = this;\n\n      // Check the passed sound ID (if any).\n      if (typeof id === 'number') {\n        var sound = self._soundById(id);\n        return sound ? !sound._paused : false;\n      }\n\n      // Otherwise, loop through all sounds and check if any are playing.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (!self._sounds[i]._paused) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Get the duration of this sound. Passing a sound id will return the sprite duration.\n     * @param  {Number} id The sound id to check. If none is passed, return full source duration.\n     * @return {Number} Audio duration in seconds.\n     */\n    duration: function(id) {\n      var self = this;\n      var duration = self._duration;\n\n      // If we pass an ID, get the sound and return the sprite length.\n      var sound = self._soundById(id);\n      if (sound) {\n        duration = self._sprite[sound._sprite][1] / 1000;\n      }\n\n      return duration;\n    },\n\n    /**\n     * Returns the current loaded state of this Howl.\n     * @return {String} 'unloaded', 'loading', 'loaded'\n     */\n    state: function() {\n      return this._state;\n    },\n\n    /**\n     * Unload and destroy the current Howl object.\n     * This will immediately stop all sound instances attached to this group.\n     */\n    unload: function() {\n      var self = this;\n\n      // Stop playing any active sounds.\n      var sounds = self._sounds;\n      for (var i=0; i<sounds.length; i++) {\n        // Stop the sound if it is currently playing.\n        if (!sounds[i]._paused) {\n          self.stop(sounds[i]._id);\n        }\n\n        // Remove the source or disconnect.\n        if (!self._webAudio) {\n          // Set the source to 0-second silence to stop any downloading (except in IE).\n          self._clearSound(sounds[i]._node);\n\n          // Remove any event listeners.\n          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);\n          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);\n          sounds[i]._node.removeEventListener('ended', sounds[i]._endFn, false);\n\n          // Release the Audio object back to the pool.\n          Howler._releaseHtml5Audio(sounds[i]._node);\n        }\n\n        // Empty out all of the nodes.\n        delete sounds[i]._node;\n\n        // Make sure all timers are cleared out.\n        self._clearTimer(sounds[i]._id);\n      }\n\n      // Remove the references in the global Howler object.\n      var index = Howler._howls.indexOf(self);\n      if (index >= 0) {\n        Howler._howls.splice(index, 1);\n      }\n\n      // Delete this sound from the cache (if no other Howl is using it).\n      var remCache = true;\n      for (i=0; i<Howler._howls.length; i++) {\n        if (Howler._howls[i]._src === self._src || self._src.indexOf(Howler._howls[i]._src) >= 0) {\n          remCache = false;\n          break;\n        }\n      }\n\n      if (cache && remCache) {\n        delete cache[self._src];\n      }\n\n      // Clear global errors.\n      Howler.noAudio = false;\n\n      // Clear out `self`.\n      self._state = 'unloaded';\n      self._sounds = [];\n      self = null;\n\n      return null;\n    },\n\n    /**\n     * Listen to a custom event.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.\n     * @return {Howl}\n     */\n    on: function(event, fn, id, once) {\n      var self = this;\n      var events = self['_on' + event];\n\n      if (typeof fn === 'function') {\n        events.push(once ? {id: id, fn: fn, once: once} : {id: id, fn: fn});\n      }\n\n      return self;\n    },\n\n    /**\n     * Remove a custom event. Call without parameters to remove all events.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to remove. Leave empty to remove all.\n     * @param  {Number}   id    (optional) Only remove events for this sound.\n     * @return {Howl}\n     */\n    off: function(event, fn, id) {\n      var self = this;\n      var events = self['_on' + event];\n      var i = 0;\n\n      // Allow passing just an event and ID.\n      if (typeof fn === 'number') {\n        id = fn;\n        fn = null;\n      }\n\n      if (fn || id) {\n        // Loop through event store and remove the passed function.\n        for (i=0; i<events.length; i++) {\n          var isId = (id === events[i].id);\n          if (fn === events[i].fn && isId || !fn && isId) {\n            events.splice(i, 1);\n            break;\n          }\n        }\n      } else if (event) {\n        // Clear out all events of this type.\n        self['_on' + event] = [];\n      } else {\n        // Clear out all events of every type.\n        var keys = Object.keys(self);\n        for (i=0; i<keys.length; i++) {\n          if ((keys[i].indexOf('_on') === 0) && Array.isArray(self[keys[i]])) {\n            self[keys[i]] = [];\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Listen to a custom event and remove it once fired.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @return {Howl}\n     */\n    once: function(event, fn, id) {\n      var self = this;\n\n      // Setup the event listener.\n      self.on(event, fn, id, 1);\n\n      return self;\n    },\n\n    /**\n     * Emit all events of a specific type and pass the sound id.\n     * @param  {String} event Event name.\n     * @param  {Number} id    Sound ID.\n     * @param  {Number} msg   Message to go with event.\n     * @return {Howl}\n     */\n    _emit: function(event, id, msg) {\n      var self = this;\n      var events = self['_on' + event];\n\n      // Loop through event store and fire all functions.\n      for (var i=events.length-1; i>=0; i--) {\n        // Only fire the listener if the correct ID is used.\n        if (!events[i].id || events[i].id === id || event === 'load') {\n          setTimeout(function(fn) {\n            fn.call(this, id, msg);\n          }.bind(self, events[i].fn), 0);\n\n          // If this event was setup with `once`, remove it.\n          if (events[i].once) {\n            self.off(event, events[i].fn, events[i].id);\n          }\n        }\n      }\n\n      // Pass the event type into load queue so that it can continue stepping.\n      self._loadQueue(event);\n\n      return self;\n    },\n\n    /**\n     * Queue of actions initiated before the sound has loaded.\n     * These will be called in sequence, with the next only firing\n     * after the previous has finished executing (even if async like play).\n     * @return {Howl}\n     */\n    _loadQueue: function(event) {\n      var self = this;\n\n      if (self._queue.length > 0) {\n        var task = self._queue[0];\n\n        // Remove this task if a matching event was passed.\n        if (task.event === event) {\n          self._queue.shift();\n          self._loadQueue();\n        }\n\n        // Run the task if no event type is passed.\n        if (!event) {\n          task.action();\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Fired when playback ends at the end of the duration.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _ended: function(sound) {\n      var self = this;\n      var sprite = sound._sprite;\n\n      // If we are using IE and there was network latency we may be clipping\n      // audio before it completes playing. Lets check the node to make sure it\n      // believes it has completed, before ending the playback.\n      if (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {\n        setTimeout(self._ended.bind(self, sound), 100);\n        return self;\n      }\n\n      // Should this sound loop?\n      var loop = !!(sound._loop || self._sprite[sprite][2]);\n\n      // Fire the ended event.\n      self._emit('end', sound._id);\n\n      // Restart the playback for HTML5 Audio loop.\n      if (!self._webAudio && loop) {\n        self.stop(sound._id, true).play(sound._id);\n      }\n\n      // Restart this timer if on a Web Audio loop.\n      if (self._webAudio && loop) {\n        self._emit('play', sound._id);\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        sound._playStart = Howler.ctx.currentTime;\n\n        var timeout = ((sound._stop - sound._start) * 1000) / Math.abs(sound._rate);\n        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n      }\n\n      // Mark the node as paused.\n      if (self._webAudio && !loop) {\n        sound._paused = true;\n        sound._ended = true;\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        self._clearTimer(sound._id);\n\n        // Clean up the buffer source.\n        self._cleanBuffer(sound._node);\n\n        // Attempt to auto-suspend AudioContext if no sounds are still playing.\n        Howler._autoSuspend();\n      }\n\n      // When using a sprite, end the track.\n      if (!self._webAudio && !loop) {\n        self.stop(sound._id, true);\n      }\n\n      return self;\n    },\n\n    /**\n     * Clear the end timer for a sound playback.\n     * @param  {Number} id The sound ID.\n     * @return {Howl}\n     */\n    _clearTimer: function(id) {\n      var self = this;\n\n      if (self._endTimers[id]) {\n        // Clear the timeout or remove the ended listener.\n        if (typeof self._endTimers[id] !== 'function') {\n          clearTimeout(self._endTimers[id]);\n        } else {\n          var sound = self._soundById(id);\n          if (sound && sound._node) {\n            sound._node.removeEventListener('ended', self._endTimers[id], false);\n          }\n        }\n\n        delete self._endTimers[id];\n      }\n\n      return self;\n    },\n\n    /**\n     * Return the sound identified by this ID, or return null.\n     * @param  {Number} id Sound ID\n     * @return {Object}    Sound object or null.\n     */\n    _soundById: function(id) {\n      var self = this;\n\n      // Loop through all sounds and find the one with this ID.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (id === self._sounds[i]._id) {\n          return self._sounds[i];\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Return an inactive sound from the pool or create a new one.\n     * @return {Sound} Sound playback object.\n     */\n    _inactiveSound: function() {\n      var self = this;\n\n      self._drain();\n\n      // Find the first inactive node to recycle.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          return self._sounds[i].reset();\n        }\n      }\n\n      // If no inactive node was found, create a new one.\n      return new Sound(self);\n    },\n\n    /**\n     * Drain excess inactive sounds from the pool.\n     */\n    _drain: function() {\n      var self = this;\n      var limit = self._pool;\n      var cnt = 0;\n      var i = 0;\n\n      // If there are less sounds than the max pool size, we are done.\n      if (self._sounds.length < limit) {\n        return;\n      }\n\n      // Count the number of inactive sounds.\n      for (i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          cnt++;\n        }\n      }\n\n      // Remove excess inactive sounds, going in reverse order.\n      for (i=self._sounds.length - 1; i>=0; i--) {\n        if (cnt <= limit) {\n          return;\n        }\n\n        if (self._sounds[i]._ended) {\n          // Disconnect the audio source when using Web Audio.\n          if (self._webAudio && self._sounds[i]._node) {\n            self._sounds[i]._node.disconnect(0);\n          }\n\n          // Remove sounds until we have the pool size.\n          self._sounds.splice(i, 1);\n          cnt--;\n        }\n      }\n    },\n\n    /**\n     * Get all ID's from the sounds pool.\n     * @param  {Number} id Only return one ID if one is passed.\n     * @return {Array}    Array of IDs.\n     */\n    _getSoundIds: function(id) {\n      var self = this;\n\n      if (typeof id === 'undefined') {\n        var ids = [];\n        for (var i=0; i<self._sounds.length; i++) {\n          ids.push(self._sounds[i]._id);\n        }\n\n        return ids;\n      } else {\n        return [id];\n      }\n    },\n\n    /**\n     * Load the sound back into the buffer source.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _refreshBuffer: function(sound) {\n      var self = this;\n\n      // Setup the buffer source for playback.\n      sound._node.bufferSource = Howler.ctx.createBufferSource();\n      sound._node.bufferSource.buffer = cache[self._src];\n\n      // Connect to the correct node.\n      if (sound._panner) {\n        sound._node.bufferSource.connect(sound._panner);\n      } else {\n        sound._node.bufferSource.connect(sound._node);\n      }\n\n      // Setup looping and playback rate.\n      sound._node.bufferSource.loop = sound._loop;\n      if (sound._loop) {\n        sound._node.bufferSource.loopStart = sound._start || 0;\n        sound._node.bufferSource.loopEnd = sound._stop || 0;\n      }\n      sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler.ctx.currentTime);\n\n      return self;\n    },\n\n    /**\n     * Prevent memory leaks by cleaning up the buffer source after playback.\n     * @param  {Object} node Sound's audio node containing the buffer source.\n     * @return {Howl}\n     */\n    _cleanBuffer: function(node) {\n      var self = this;\n      var isIOS = Howler._navigator && Howler._navigator.vendor.indexOf('Apple') >= 0;\n\n      if (!node.bufferSource) {\n        return self;\n      }\n\n      if (Howler._scratchBuffer && node.bufferSource) {\n        node.bufferSource.onended = null;\n        node.bufferSource.disconnect(0);\n        if (isIOS) {\n          try { node.bufferSource.buffer = Howler._scratchBuffer; } catch(e) {}\n        }\n      }\n      node.bufferSource = null;\n\n      return self;\n    },\n\n    /**\n     * Set the source to a 0-second silence to stop any downloading (except in IE).\n     * @param  {Object} node Audio node to clear.\n     */\n    _clearSound: function(node) {\n      var checkIE = /MSIE |Trident\\//.test(Howler._navigator && Howler._navigator.userAgent);\n      if (!checkIE) {\n        node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';\n      }\n    }\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Setup the sound object, which each node attached to a Howl group is contained in.\n   * @param {Object} howl The Howl parent group.\n   */\n  var Sound = function(howl) {\n    this._parent = howl;\n    this.init();\n  };\n  Sound.prototype = {\n    /**\n     * Initialize a new Sound object.\n     * @return {Sound}\n     */\n    init: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup the default parameters.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a unique ID for this sound.\n      self._id = ++Howler._counter;\n\n      // Add itself to the parent's pool.\n      parent._sounds.push(self);\n\n      // Create the new node.\n      self.create();\n\n      return self;\n    },\n\n    /**\n     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.\n     * @return {Sound}\n     */\n    create: function() {\n      var self = this;\n      var parent = self._parent;\n      var volume = (Howler._muted || self._muted || self._parent._muted) ? 0 : self._volume;\n\n      if (parent._webAudio) {\n        // Create the gain node for controlling volume (the source will connect to this).\n        self._node = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);\n        self._node.paused = true;\n        self._node.connect(Howler.masterGain);\n      } else if (!Howler.noAudio) {\n        // Get an unlocked Audio object from the pool.\n        self._node = Howler._obtainHtml5Audio();\n\n        // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).\n        self._errorFn = self._errorListener.bind(self);\n        self._node.addEventListener('error', self._errorFn, false);\n\n        // Listen for 'canplaythrough' event to let us know the sound is ready.\n        self._loadFn = self._loadListener.bind(self);\n        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false);\n\n        // Listen for the 'ended' event on the sound to account for edge-case where\n        // a finite sound has a duration of Infinity.\n        self._endFn = self._endListener.bind(self);\n        self._node.addEventListener('ended', self._endFn, false);\n\n        // Setup the new audio node.\n        self._node.src = parent._src;\n        self._node.preload = parent._preload === true ? 'auto' : parent._preload;\n        self._node.volume = volume * Howler.volume();\n\n        // Begin loading the source.\n        self._node.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Reset the parameters of this sound to the original state (for recycle).\n     * @return {Sound}\n     */\n    reset: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all of the parameters of this sound.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._rateSeek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a new ID so that it isn't confused with the previous sound.\n      self._id = ++Howler._counter;\n\n      return self;\n    },\n\n    /**\n     * HTML5 Audio error listener callback.\n     */\n    _errorListener: function() {\n      var self = this;\n\n      // Fire an error event and pass back the code.\n      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0);\n\n      // Clear the event listener.\n      self._node.removeEventListener('error', self._errorFn, false);\n    },\n\n    /**\n     * HTML5 Audio canplaythrough listener callback.\n     */\n    _loadListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Round up the duration to account for the lower precision in HTML5 Audio.\n      parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n      // Setup a sprite if none is defined.\n      if (Object.keys(parent._sprite).length === 0) {\n        parent._sprite = {__default: [0, parent._duration * 1000]};\n      }\n\n      if (parent._state !== 'loaded') {\n        parent._state = 'loaded';\n        parent._emit('load');\n        parent._loadQueue();\n      }\n\n      // Clear the event listener.\n      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);\n    },\n\n    /**\n     * HTML5 Audio ended listener callback.\n     */\n    _endListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Only handle the `ended`` event if the duration is Infinity.\n      if (parent._duration === Infinity) {\n        // Update the parent duration to match the real audio duration.\n        // Round up the duration to account for the lower precision in HTML5 Audio.\n        parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n        // Update the sprite that corresponds to the real duration.\n        if (parent._sprite.__default[1] === Infinity) {\n          parent._sprite.__default[1] = parent._duration * 1000;\n        }\n\n        // Run the regular ended method.\n        parent._ended(self);\n      }\n\n      // Clear the event listener since the duration is now correct.\n      self._node.removeEventListener('ended', self._endFn, false);\n    }\n  };\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  var cache = {};\n\n  /**\n   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).\n   * @param  {Howl} self\n   */\n  var loadBuffer = function(self) {\n    var url = self._src;\n\n    // Check if the buffer has already been cached and use it instead.\n    if (cache[url]) {\n      // Set the duration from the cache.\n      self._duration = cache[url].duration;\n\n      // Load the sound into this Howl.\n      loadSound(self);\n\n      return;\n    }\n\n    if (/^data:[^;]+;base64,/.test(url)) {\n      // Decode the base64 data URI without XHR, since some browsers don't support it.\n      var data = atob(url.split(',')[1]);\n      var dataView = new Uint8Array(data.length);\n      for (var i=0; i<data.length; ++i) {\n        dataView[i] = data.charCodeAt(i);\n      }\n\n      decodeAudioData(dataView.buffer, self);\n    } else {\n      // Load the buffer from the URL.\n      var xhr = new XMLHttpRequest();\n      xhr.open(self._xhr.method, url, true);\n      xhr.withCredentials = self._xhr.withCredentials;\n      xhr.responseType = 'arraybuffer';\n\n      // Apply any custom headers to the request.\n      if (self._xhr.headers) {\n        Object.keys(self._xhr.headers).forEach(function(key) {\n          xhr.setRequestHeader(key, self._xhr.headers[key]);\n        });\n      }\n\n      xhr.onload = function() {\n        // Make sure we get a successful response back.\n        var code = (xhr.status + '')[0];\n        if (code !== '0' && code !== '2' && code !== '3') {\n          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');\n          return;\n        }\n\n        decodeAudioData(xhr.response, self);\n      };\n      xhr.onerror = function() {\n        // If there is an error, switch to HTML5 Audio.\n        if (self._webAudio) {\n          self._html5 = true;\n          self._webAudio = false;\n          self._sounds = [];\n          delete cache[url];\n          self.load();\n        }\n      };\n      safeXhrSend(xhr);\n    }\n  };\n\n  /**\n   * Send the XHR request wrapped in a try/catch.\n   * @param  {Object} xhr XHR to send.\n   */\n  var safeXhrSend = function(xhr) {\n    try {\n      xhr.send();\n    } catch (e) {\n      xhr.onerror();\n    }\n  };\n\n  /**\n   * Decode audio data from an array buffer.\n   * @param  {ArrayBuffer} arraybuffer The audio data.\n   * @param  {Howl}        self\n   */\n  var decodeAudioData = function(arraybuffer, self) {\n    // Fire a load error if something broke.\n    var error = function() {\n      self._emit('loaderror', null, 'Decoding audio data failed.');\n    };\n\n    // Load the sound on success.\n    var success = function(buffer) {\n      if (buffer && self._sounds.length > 0) {\n        cache[self._src] = buffer;\n        loadSound(self, buffer);\n      } else {\n        error();\n      }\n    };\n\n    // Decode the buffer into an audio source.\n    if (typeof Promise !== 'undefined' && Howler.ctx.decodeAudioData.length === 1) {\n      Howler.ctx.decodeAudioData(arraybuffer).then(success).catch(error);\n    } else {\n      Howler.ctx.decodeAudioData(arraybuffer, success, error);\n    }\n  }\n\n  /**\n   * Sound is now loaded, so finish setting everything up and fire the loaded event.\n   * @param  {Howl} self\n   * @param  {Object} buffer The decoded buffer sound source.\n   */\n  var loadSound = function(self, buffer) {\n    // Set the duration.\n    if (buffer && !self._duration) {\n      self._duration = buffer.duration;\n    }\n\n    // Setup a sprite if none is defined.\n    if (Object.keys(self._sprite).length === 0) {\n      self._sprite = {__default: [0, self._duration * 1000]};\n    }\n\n    // Fire the loaded event.\n    if (self._state !== 'loaded') {\n      self._state = 'loaded';\n      self._emit('load');\n      self._loadQueue();\n    }\n  };\n\n  /**\n   * Setup the audio context when available, or switch to HTML5 Audio mode.\n   */\n  var setupAudioContext = function() {\n    // If we have already detected that Web Audio isn't supported, don't run this step again.\n    if (!Howler.usingWebAudio) {\n      return;\n    }\n\n    // Check if we are using Web Audio and setup the AudioContext if we are.\n    try {\n      if (typeof AudioContext !== 'undefined') {\n        Howler.ctx = new AudioContext();\n      } else if (typeof webkitAudioContext !== 'undefined') {\n        Howler.ctx = new webkitAudioContext();\n      } else {\n        Howler.usingWebAudio = false;\n      }\n    } catch(e) {\n      Howler.usingWebAudio = false;\n    }\n\n    // If the audio context creation still failed, set using web audio to false.\n    if (!Howler.ctx) {\n      Howler.usingWebAudio = false;\n    }\n\n    // Check if a webview is being used on iOS8 or earlier (rather than the browser).\n    // If it is, disable Web Audio as it causes crashing.\n    var iOS = (/iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform));\n    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n    var version = appVersion ? parseInt(appVersion[1], 10) : null;\n    if (iOS && version && version < 9) {\n      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());\n      if (Howler._navigator && !safari) {\n        Howler.usingWebAudio = false;\n      }\n    }\n\n    // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).\n    if (Howler.usingWebAudio) {\n      Howler.masterGain = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n      Howler.masterGain.gain.setValueAtTime(Howler._muted ? 0 : Howler._volume, Howler.ctx.currentTime);\n      Howler.masterGain.connect(Howler.ctx.destination);\n    }\n\n    // Re-run the setup on Howler.\n    Howler._setup();\n  };\n\n  // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.\n  if (typeof define === 'function' && define.amd) {\n    define([], function() {\n      return {\n        Howler: Howler,\n        Howl: Howl\n      };\n    });\n  }\n\n  // Add support for CommonJS libraries such as browserify.\n  if (typeof exports !== 'undefined') {\n    exports.Howler = Howler;\n    exports.Howl = Howl;\n  }\n\n  // Add to global in Node.js (for testing, etc).\n  if (typeof global !== 'undefined') {\n    global.HowlerGlobal = HowlerGlobal;\n    global.Howler = Howler;\n    global.Howl = Howl;\n    global.Sound = Sound;\n  } else if (typeof window !== 'undefined') {  // Define globally in case AMD is not available or unused.\n    window.HowlerGlobal = HowlerGlobal;\n    window.Howler = Howler;\n    window.Howl = Howl;\n    window.Sound = Sound;\n  }\n})();\n\n\n/*!\n *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.\n *  \n *  howler.js v2.2.4\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  // Setup default properties.\n  HowlerGlobal.prototype._pos = [0, 0, 0];\n  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Helper method to update the stereo panning position of all current Howls.\n   * Future Howls will not use this value unless explicitly set.\n   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @return {Howler/Number}     Self or current stereo panning value.\n   */\n  HowlerGlobal.prototype.stereo = function(pan) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Loop through all Howls and update their stereo panning.\n    for (var i=self._howls.length-1; i>=0; i--) {\n      self._howls[i].stereo(pan);\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the position of the listener in 3D cartesian space. Sounds using\n   * 3D position will be relative to the listener's position.\n   * @param  {Number} x The x-position of the listener.\n   * @param  {Number} y The y-position of the listener.\n   * @param  {Number} z The z-position of the listener.\n   * @return {Howler/Array}   Self or current listener position.\n   */\n  HowlerGlobal.prototype.pos = function(x, y, z) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._pos[1] : y;\n    z = (typeof z !== 'number') ? self._pos[2] : z;\n\n    if (typeof x === 'number') {\n      self._pos = [x, y, z];\n\n      if (typeof self.ctx.listener.positionX !== 'undefined') {\n        self.ctx.listener.positionX.setTargetAtTime(self._pos[0], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionY.setTargetAtTime(self._pos[1], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionZ.setTargetAtTime(self._pos[2], Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);\n      }\n    } else {\n      return self._pos;\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the listener is pointing in the 3D cartesian space.\n   * A front and up vector must be provided. The front is the direction the\n   * face of the listener is pointing, and up is the direction the top of the\n   * listener is pointing. Thus, these values are expected to be at right angles\n   * from each other.\n   * @param  {Number} x   The x-orientation of the listener.\n   * @param  {Number} y   The y-orientation of the listener.\n   * @param  {Number} z   The z-orientation of the listener.\n   * @param  {Number} xUp The x-orientation of the top of the listener.\n   * @param  {Number} yUp The y-orientation of the top of the listener.\n   * @param  {Number} zUp The z-orientation of the top of the listener.\n   * @return {Howler/Array}     Returns self or the current orientation vectors.\n   */\n  HowlerGlobal.prototype.orientation = function(x, y, z, xUp, yUp, zUp) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    var or = self._orientation;\n    y = (typeof y !== 'number') ? or[1] : y;\n    z = (typeof z !== 'number') ? or[2] : z;\n    xUp = (typeof xUp !== 'number') ? or[3] : xUp;\n    yUp = (typeof yUp !== 'number') ? or[4] : yUp;\n    zUp = (typeof zUp !== 'number') ? or[5] : zUp;\n\n    if (typeof x === 'number') {\n      self._orientation = [x, y, z, xUp, yUp, zUp];\n\n      if (typeof self.ctx.listener.forwardX !== 'undefined') {\n        self.ctx.listener.forwardX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upX.setTargetAtTime(xUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upY.setTargetAtTime(yUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upZ.setTargetAtTime(zUp, Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);\n      }\n    } else {\n      return or;\n    }\n\n    return self;\n  };\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core init.\n   * @param  {Function} _super Core init method.\n   * @return {Howl}\n   */\n  Howl.prototype.init = (function(_super) {\n    return function(o) {\n      var self = this;\n\n      // Setup user-defined default properties.\n      self._orientation = o.orientation || [1, 0, 0];\n      self._stereo = o.stereo || null;\n      self._pos = o.pos || null;\n      self._pannerAttr = {\n        coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,\n        coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,\n        coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,\n        distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',\n        maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,\n        panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',\n        refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,\n        rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1\n      };\n\n      // Setup event listeners.\n      self._onstereo = o.onstereo ? [{fn: o.onstereo}] : [];\n      self._onpos = o.onpos ? [{fn: o.onpos}] : [];\n      self._onorientation = o.onorientation ? [{fn: o.onorientation}] : [];\n\n      // Complete initilization with howler.js core's init function.\n      return _super.call(this, o);\n    };\n  })(Howl.prototype.init);\n\n  /**\n   * Get/set the stereo panning of the audio source for this sound or all in the group.\n   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Number}    Returns self or the current stereo panning value.\n   */\n  Howl.prototype.stereo = function(pan, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'stereo',\n        action: function() {\n          self.stereo(pan, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.\n    var pannerType = (typeof Howler.ctx.createStereoPanner === 'undefined') ? 'spatial' : 'stereo';\n\n    // Setup the group's stereo panning if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's stereo panning if no parameters are passed.\n      if (typeof pan === 'number') {\n        self._stereo = pan;\n        self._pos = [pan, 0, 0];\n      } else {\n        return self._stereo;\n      }\n    }\n\n    // Change the streo panning of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof pan === 'number') {\n          sound._stereo = pan;\n          sound._pos = [pan, 0, 0];\n\n          if (sound._node) {\n            // If we are falling back, make sure the panningModel is equalpower.\n            sound._pannerAttr.panningModel = 'equalpower';\n\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || !sound._panner.pan) {\n              setupPanner(sound, pannerType);\n            }\n\n            if (pannerType === 'spatial') {\n              if (typeof sound._panner.positionX !== 'undefined') {\n                sound._panner.positionX.setValueAtTime(pan, Howler.ctx.currentTime);\n                sound._panner.positionY.setValueAtTime(0, Howler.ctx.currentTime);\n                sound._panner.positionZ.setValueAtTime(0, Howler.ctx.currentTime);\n              } else {\n                sound._panner.setPosition(pan, 0, 0);\n              }\n            } else {\n              sound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);\n            }\n          }\n\n          self._emit('stereo', sound._id);\n        } else {\n          return sound._stereo;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the 3D spatial position of the audio source for this sound or group relative to the global listener.\n   * @param  {Number} x  The x-position of the audio source.\n   * @param  {Number} y  The y-position of the audio source.\n   * @param  {Number} z  The z-position of the audio source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].\n   */\n  Howl.prototype.pos = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change position when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'pos',\n        action: function() {\n          self.pos(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? 0 : y;\n    z = (typeof z !== 'number') ? -0.5 : z;\n\n    // Setup the group's spatial position if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial position if no parameters are passed.\n      if (typeof x === 'number') {\n        self._pos = [x, y, z];\n      } else {\n        return self._pos;\n      }\n    }\n\n    // Change the spatial position of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._pos = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || sound._panner.pan) {\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.positionX !== 'undefined') {\n              sound._panner.positionX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.positionY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.positionZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setPosition(x, y, z);\n            }\n          }\n\n          self._emit('pos', sound._id);\n        } else {\n          return sound._pos;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate\n   * space. Depending on how direction the sound is, based on the `cone` attributes,\n   * a sound pointing away from the listener can be quiet or silent.\n   * @param  {Number} x  The x-orientation of the source.\n   * @param  {Number} y  The y-orientation of the source.\n   * @param  {Number} z  The z-orientation of the source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].\n   */\n  Howl.prototype.orientation = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change orientation when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'orientation',\n        action: function() {\n          self.orientation(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._orientation[1] : y;\n    z = (typeof z !== 'number') ? self._orientation[2] : z;\n\n    // Setup the group's spatial orientation if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial orientation if no parameters are passed.\n      if (typeof x === 'number') {\n        self._orientation = [x, y, z];\n      } else {\n        return self._orientation;\n      }\n    }\n\n    // Change the spatial orientation of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._orientation = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner) {\n              // Make sure we have a position to setup the node with.\n              if (!sound._pos) {\n                sound._pos = self._pos || [0, 0, -0.5];\n              }\n\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.orientationX !== 'undefined') {\n              sound._panner.orientationX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.orientationY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.orientationZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setOrientation(x, y, z);\n            }\n          }\n\n          self._emit('orientation', sound._id);\n        } else {\n          return sound._orientation;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the panner node's attributes for a sound or group of sounds.\n   * This method can optionall take 0, 1 or 2 arguments.\n   *   pannerAttr() -> Returns the group's values.\n   *   pannerAttr(id) -> Returns the sound id's values.\n   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.\n   *   pannerAttr(o, id) -> Set's the values of passed sound id.\n   *\n   *   Attributes:\n   *     coneInnerAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      inside of which there will be no volume reduction.\n   *     coneOuterAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      outside of which the volume will be reduced to a constant value of `coneOuterGain`.\n   *     coneOuterGain - (0 by default) A parameter for directional audio sources, this is the gain outside of the\n   *                     `coneOuterAngle`. It is a linear value in the range `[0, 1]`.\n   *     distanceModel - ('inverse' by default) Determines algorithm used to reduce volume as audio moves away from\n   *                     listener. Can be `linear`, `inverse` or `exponential.\n   *     maxDistance - (10000 by default) The maximum distance between source and listener, after which the volume\n   *                   will not be reduced any further.\n   *     refDistance - (1 by default) A reference distance for reducing volume as source moves further from the listener.\n   *                   This is simply a variable of the distance model and has a different effect depending on which model\n   *                   is used and the scale of your coordinates. Generally, volume will be equal to 1 at this distance.\n   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener. This is simply a\n   *                     variable of the distance model and can be in the range of `[0, 1]` with `linear` and `[0, ∞]`\n   *                     with `inverse` and `exponential`.\n   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.\n   *                     Can be `HRTF` or `equalpower`.\n   *\n   * @return {Howl/Object} Returns self or current panner attributes.\n   */\n  Howl.prototype.pannerAttr = function() {\n    var self = this;\n    var args = arguments;\n    var o, id, sound;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // Determine the values based on arguments.\n    if (args.length === 0) {\n      // Return the group's panner attribute values.\n      return self._pannerAttr;\n    } else if (args.length === 1) {\n      if (typeof args[0] === 'object') {\n        o = args[0];\n\n        // Set the grou's panner attribute values.\n        if (typeof id === 'undefined') {\n          if (!o.pannerAttr) {\n            o.pannerAttr = {\n              coneInnerAngle: o.coneInnerAngle,\n              coneOuterAngle: o.coneOuterAngle,\n              coneOuterGain: o.coneOuterGain,\n              distanceModel: o.distanceModel,\n              maxDistance: o.maxDistance,\n              refDistance: o.refDistance,\n              rolloffFactor: o.rolloffFactor,\n              panningModel: o.panningModel\n            };\n          }\n\n          self._pannerAttr = {\n            coneInnerAngle: typeof o.pannerAttr.coneInnerAngle !== 'undefined' ? o.pannerAttr.coneInnerAngle : self._coneInnerAngle,\n            coneOuterAngle: typeof o.pannerAttr.coneOuterAngle !== 'undefined' ? o.pannerAttr.coneOuterAngle : self._coneOuterAngle,\n            coneOuterGain: typeof o.pannerAttr.coneOuterGain !== 'undefined' ? o.pannerAttr.coneOuterGain : self._coneOuterGain,\n            distanceModel: typeof o.pannerAttr.distanceModel !== 'undefined' ? o.pannerAttr.distanceModel : self._distanceModel,\n            maxDistance: typeof o.pannerAttr.maxDistance !== 'undefined' ? o.pannerAttr.maxDistance : self._maxDistance,\n            refDistance: typeof o.pannerAttr.refDistance !== 'undefined' ? o.pannerAttr.refDistance : self._refDistance,\n            rolloffFactor: typeof o.pannerAttr.rolloffFactor !== 'undefined' ? o.pannerAttr.rolloffFactor : self._rolloffFactor,\n            panningModel: typeof o.pannerAttr.panningModel !== 'undefined' ? o.pannerAttr.panningModel : self._panningModel\n          };\n        }\n      } else {\n        // Return this sound's panner attribute values.\n        sound = self._soundById(parseInt(args[0], 10));\n        return sound ? sound._pannerAttr : self._pannerAttr;\n      }\n    } else if (args.length === 2) {\n      o = args[0];\n      id = parseInt(args[1], 10);\n    }\n\n    // Update the values of the specified sounds.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      sound = self._soundById(ids[i]);\n\n      if (sound) {\n        // Merge the new values into the sound.\n        var pa = sound._pannerAttr;\n        pa = {\n          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,\n          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,\n          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,\n          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,\n          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,\n          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,\n          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor,\n          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel\n        };\n\n        // Create a new panner node if one doesn't already exist.\n        var panner = sound._panner;\n        if (!panner) {\n          // Make sure we have a position to setup the node with.\n          if (!sound._pos) {\n            sound._pos = self._pos || [0, 0, -0.5];\n          }\n\n          // Create a new panner node.\n          setupPanner(sound, 'spatial');\n          panner = sound._panner\n        }\n\n        // Update the panner values or create a new panner if none exists.\n        panner.coneInnerAngle = pa.coneInnerAngle;\n        panner.coneOuterAngle = pa.coneOuterAngle;\n        panner.coneOuterGain = pa.coneOuterGain;\n        panner.distanceModel = pa.distanceModel;\n        panner.maxDistance = pa.maxDistance;\n        panner.refDistance = pa.refDistance;\n        panner.rolloffFactor = pa.rolloffFactor;\n        panner.panningModel = pa.panningModel;\n      }\n    }\n\n    return self;\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core Sound init.\n   * @param  {Function} _super Core Sound init method.\n   * @return {Sound}\n   */\n  Sound.prototype.init = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup user-defined default properties.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // Complete initilization with howler.js core Sound's init function.\n      _super.call(this);\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      }\n    };\n  })(Sound.prototype.init);\n\n  /**\n   * Override the Sound.reset method to clean up properties from the spatial plugin.\n   * @param  {Function} _super Sound reset method.\n   * @return {Sound}\n   */\n  Sound.prototype.reset = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all spatial plugin properties on this sound.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      } else if (self._panner) {\n        // Disconnect the panner.\n        self._panner.disconnect(0);\n        self._panner = undefined;\n        parent._refreshBuffer(self);\n      }\n\n      // Complete resetting of the sound.\n      return _super.call(this);\n    };\n  })(Sound.prototype.reset);\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create a new panner node and save it on the sound.\n   * @param  {Sound} sound Specific sound to setup panning on.\n   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.\n   */\n  var setupPanner = function(sound, type) {\n    type = type || 'spatial';\n\n    // Create the new panner node.\n    if (type === 'spatial') {\n      sound._panner = Howler.ctx.createPanner();\n      sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;\n      sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;\n      sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;\n      sound._panner.distanceModel = sound._pannerAttr.distanceModel;\n      sound._panner.maxDistance = sound._pannerAttr.maxDistance;\n      sound._panner.refDistance = sound._pannerAttr.refDistance;\n      sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;\n      sound._panner.panningModel = sound._pannerAttr.panningModel;\n\n      if (typeof sound._panner.positionX !== 'undefined') {\n        sound._panner.positionX.setValueAtTime(sound._pos[0], Howler.ctx.currentTime);\n        sound._panner.positionY.setValueAtTime(sound._pos[1], Howler.ctx.currentTime);\n        sound._panner.positionZ.setValueAtTime(sound._pos[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);\n      }\n\n      if (typeof sound._panner.orientationX !== 'undefined') {\n        sound._panner.orientationX.setValueAtTime(sound._orientation[0], Howler.ctx.currentTime);\n        sound._panner.orientationY.setValueAtTime(sound._orientation[1], Howler.ctx.currentTime);\n        sound._panner.orientationZ.setValueAtTime(sound._orientation[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);\n      }\n    } else {\n      sound._panner = Howler.ctx.createStereoPanner();\n      sound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);\n    }\n\n    sound._panner.connect(sound._node);\n\n    // Update the connections.\n    if (!sound._paused) {\n      sound._parent.pause(sound._id, true).play(sound._id, true);\n    }\n  };\n})();\n", "export class BaseGameController {\n    constructor(gameConfig) {\n        this.gameConfig = gameConfig;\n        /*eventBus.on(EventsEnum.UPDATE_GAME_STATE, (data: UiData) => {\n\n            if (data.state === \"ENTER_GAME\" && !Globals.gameStates.getIsGameEntered()) {\n\n                Globals.gameStates.setIsGameEntered(true);\n\n                if (Globals.gameStates.getIsSoundOn()) {\n\n                    if (Globals.gameStates.getIsGameSoundsOn()) {\n                        Globals.soundManager.playMusic(SoundId.MAIN_THEME);\n                    } else {\n                        Globals.soundManager.playAmbientMusic(true);\n                    }\n                }\n\n\n            }\n\n        });*/\n    }\n}\n", "// src/screens/GameScene.ts\nimport { BaseGameScene } from \"./BaseGameScene\";\nimport { Text } from \"pixi.js\";\nexport class GameScene extends BaseGameScene {\n    constructor(sceneName, container) {\n        super(sceneName, container);\n        this.gameLabel = new Text(\"Game Screen\", { fill: 0xffffff, fontSize: 50 });\n        this.gameLabel.anchor.set(0.5);\n        this.gameLabel.x = 1920 / 2;\n        this.gameLabel.y = 1080 / 2;\n        this.addChild(this.gameLabel);\n    }\n    onShow() {\n        console.log(\"GameScene active\");\n    }\n    onHide() {\n        console.log(\"GameScene hidden\");\n    }\n}\n", "// src/screens/LoadingScene.ts\nimport { BaseGameScene } from \"./BaseGameScene\";\nimport { Graphics, Text } from \"pixi.js\";\nexport class LoadingScene extends BaseGameScene {\n    constructor(sceneName, container) {\n        super(sceneName, container);\n        this.barWidth = 600;\n        this.barHeight = 40;\n        const barWidth = 600;\n        const barHeight = 40;\n        this.progressBar = new Graphics();\n        this.progressBar.beginFill(0x333333);\n        this.progressBar.drawRect(0, 0, barWidth, barHeight);\n        this.progressBar.endFill();\n        this.progressBar.x = 160;\n        this.progressBar.y = 300;\n        this.addChild(this.progressBar);\n        // Add the filled part (dynamic)\n        this.progressFill = new Graphics();\n        this.progressFill.beginFill(0xffffff);\n        this.progressFill.drawRect(0, 0, 0, barHeight); // start with width = 0\n        this.progressFill.endFill();\n        this.progressBar.addChild(this.progressFill);\n        this.progressText = new Text(\"Loading 0%\", { fill: 0xffffff, fontSize: 28 });\n        this.progressText.x = 400;\n        this.progressText.y = 250;\n        this.addChild(this.progressText);\n    }\n    onShow() {\n        console.log(\"LoadingScene active\");\n    }\n    onHide() {\n        console.log(\"LoadingScene hidden\");\n    }\n    updateProgress(progress) {\n        console.log(\"LOADING\", progress);\n        this.progressFill.clear();\n        this.progressFill.beginFill(0xffffff);\n        this.progressFill.drawRect(0, 0, this.barWidth * progress, this.barHeight);\n        this.progressFill.endFill();\n        this.progressText.text = `Loading ${(progress * 100).toFixed(0)}%`;\n    }\n}\n", "import EventEmitter from 'eventemitter3';\nconst eventBus = new EventEmitter();\nexport default eventBus;\n", "import { BaseGameScene } from \"./BaseGameScene\";\nimport { Graphics, Text } from \"pixi.js\";\nimport eventBus from \"../events/EventBus\";\nexport class StartScreen extends BaseGameScene {\n    constructor(sceneName, container) {\n        super(sceneName, container);\n        // Create button background\n        this.startButton = new Graphics();\n        this.startButton.beginFill(0x0077ff);\n        this.startButton.drawRoundedRect(0, 0, 300, 80, 10);\n        this.startButton.endFill();\n        // Center the button\n        this.startButton.x = 1920 / 2 - 150;\n        this.startButton.y = 1080 / 2 - 40;\n        // Make interactive\n        this.startButton.interactive = true; // Must be interactive first\n        this.startButton.cursor = \"pointer\";\n        // Hover effect\n        this.startButton.on(\"pointerover\", () => {\n            this.startButton.tint = 0x00aaff;\n        });\n        this.startButton.on(\"pointerout\", () => {\n            this.startButton.tint = 0xffffff;\n        });\n        // Click event\n        this.startButton.on(\"pointerdown\", () => {\n            this.onStartClick();\n        });\n        this.addChild(this.startButton);\n        // Text on button\n        this.startText = new Text(\"START\", { fill: 0xffffff, fontSize: 36, fontWeight: \"bold\" });\n        this.startText.anchor.set(0.5);\n        this.startText.x = this.startButton.x + 150;\n        this.startText.y = this.startButton.y + 40;\n        this.addChild(this.startText);\n    }\n    onShow() {\n        console.log(\"StartScreen is active\");\n    }\n    onHide() {\n        console.log(\"StartScreen hidden\");\n    }\n    onStartClick() {\n        console.log(\"Start button clicked!\");\n        // Dispatch an event, or call ScreenManager to switch to GameScreen\n        eventBus.emit(\"START_GAME\");\n    }\n}\n", "export class GameComponentsHolder {\n    constructor() {\n        this.componentsData = new Map;\n    }\n    getComponentsData() {\n        return this.componentsData;\n    }\n    setComponentDatabyId(key, data) {\n        this.componentsData.set(key, data);\n    }\n    getComponentData(key) {\n        return this.componentsData.get(key);\n    }\n    onResize(isLandscape, isMobile, width, height) {\n        this.componentsData.forEach((value) => {\n            if (value) {\n                value.orientationChange(isLandscape, isMobile, width, height);\n            }\n        });\n    }\n}\n", "export class GameConfig {\n    constructor() {\n        this.reelsStartX = 0;\n        this.reelsStartY = 0;\n        this.reelsHolderStartX = 0;\n        this.reelsHolderStartY = 0;\n        this.symbolWidth = 220;\n        this.symbolHeight = 220;\n        this.numReels = 5;\n        this.numRows = 4;\n        this.hasAnticipation = false;\n        this.anticipationReels = [];\n        this.anticipationTime = 1.2;\n        this.spinStopTime = 2.0;\n        this.quickStopSpinTime = 1.0;\n        this.turboStopSpinTime = 0.0;\n        this.spinSpeed = 40; //30\n        this.quickSpinSpeed = 100; //40\n        this.bounceTimeNormal = 0.20;\n        this.bounceTimeQuick = 0.10;\n        this.reelsStartDelayTime = 0.1;\n        this.normalReelStopDelay = 0.3;\n        this.quickReelStopDelay = 0.1;\n        this.wildID = 0;\n        this.scatterId = 0;\n        this.springEnd = false;\n        this.reelSymbolsID = [\"L1_1x1\", \"L2_1x1\", \"L3_1x1\", \"L4_1x1\", \"H1_1x1\", \"H2_1x1\", \"H3_1x1\", \"H4_1x1\", \"MP_1x1\", \"RP_1x1\", \"RS_1x1\", \"S2_1x1\", \"SC_1x1\", \"wild\", \"empty\"];\n        this.bigSymbolsL = [\"L1_2x2\", \"L2_2x2\", \"L3_2x2\", \"L4_2x2\", \"L1_2x3\", \"L2_2x3\", \"L3_2x3\", \"L4_2x3\"];\n        this.bigSymbolsH = [\"H1_2x2\", \"H2_2x2\", \"H3_2x2\", \"H4_2x2\", \"H1_2x3\", \"H2_2x3\", \"H3_2x3\", \"H4_2x3\", \"H1_3x3\", \"H2_3x3\", \"H3_3x3\", \"H4_3x3\", \"H1_3x4\", \"H2_3x4\", \"H3_3x4\", \"H4_3x4\"];\n        this.baseSymbolsID = [\"L1\", \"L2\", \"L3\", \"L4\", \"H1\", \"H2\", \"H3\", \"H4\", \"MP\", \"RP\", \"RS\", \"S2\", \"SC\", \"wild\", \"empty\"];\n        this.bounceOffsetUp = 110;\n        this.bounceOffsetDown = 0;\n        this.stopDurationTime = 0.5;\n        this.quickStopDurationTime = 1;\n        this.reelGrid = \"5x4\";\n    }\n    setStopDurationTime(value) {\n        this.stopDurationTime = value;\n    }\n    getStopDurationTime() {\n        return this.stopDurationTime;\n    }\n    setBounceOffsetUp(value) {\n        this.bounceOffsetUp = value;\n    }\n    getBounceOffsetUp() {\n        return this.bounceOffsetUp;\n    }\n    setBounceOffsetDown(value) {\n        this.bounceOffsetDown = value;\n    }\n    getBounceOffsetDown() {\n        return this.bounceOffsetDown;\n    }\n    setBounceTimeNormal(value) {\n        this.bounceTimeNormal = value;\n    }\n    getBounceTimeNormal() {\n        return this.bounceTimeNormal;\n    }\n    setBounceTimeQuick(value) {\n        this.bounceTimeQuick = value;\n    }\n    getBounceTimeQuick() {\n        return this.bounceTimeQuick;\n    }\n    setReelsHolderStartX(value) {\n        this.reelsHolderStartX = value;\n    }\n    getReelsHolderStartX() {\n        return this.reelsHolderStartX;\n    }\n    setReelsHolderStartY(value) {\n        this.reelsHolderStartY = value;\n    }\n    getReelsHolderStartY() {\n        return this.reelsHolderStartY;\n    }\n    getSymbolWidth() {\n        return this.symbolWidth;\n    }\n    setSymbolWidth(value) {\n        this.symbolWidth = value;\n    }\n    getSymbolHeight() {\n        return this.symbolHeight;\n    }\n    setSymbolHeight(value) {\n        this.symbolHeight = value;\n    }\n    getNumOfReels() {\n        return this.numReels;\n    }\n    setNumOfReels(value) {\n        this.numReels = value;\n    }\n    getNumOfRows() {\n        return this.numRows;\n    }\n    setNumOfRows(value) {\n        this.numRows = value;\n    }\n    getReelsStartX() {\n        return this.reelsStartX;\n    }\n    setReelsStartX(value) {\n        this.reelsStartX = value;\n    }\n    getReelsStartY() {\n        return this.reelsStartY;\n    }\n    setReelsStartY(value) {\n        this.reelsStartY = value;\n    }\n    setSpinSpeed(value) {\n        this.spinSpeed = value;\n    }\n    getSpinSpeed() {\n        return this.spinSpeed;\n    }\n    setHasAnticipation(value) {\n        this.hasAnticipation = value;\n    }\n    getAnticipation() {\n        return this.hasAnticipation;\n    }\n    setAnticipationReels(reels) {\n        this.anticipationReels = reels;\n    }\n    getAnticipationReels() {\n        return this.anticipationReels;\n    }\n    setAnticipationTime(value) {\n        this.anticipationTime = value;\n    }\n    getAnticipationTime() {\n        return this.anticipationTime;\n    }\n    setSpinStopTime(value) {\n        this.spinStopTime = value;\n    }\n    getSpinStopTime() {\n        return this.spinStopTime;\n    }\n    setWildId(value) {\n        this.wildID = value;\n    }\n    getWildId() {\n        return this.wildID;\n    }\n    setScatterId(value) {\n        this.scatterId = value;\n    }\n    getScatterId() {\n        return this.scatterId;\n    }\n    setQucickSpinSpeed(value) {\n        this.quickSpinSpeed = value;\n    }\n    getQucickSpinSpeed() {\n        return this.quickSpinSpeed;\n    }\n    setSpringEnd(value) {\n        this.springEnd = value;\n    }\n    getSpringEnd() {\n        return this.springEnd;\n    }\n    getReelSymbolsIDs() {\n        return this.reelSymbolsID;\n    }\n    setReelSymbolsIDs(data) {\n        this.reelSymbolsID = data;\n    }\n    getBaseSymbolIds() {\n        return this.baseSymbolsID;\n    }\n    getBigSymbolsL() {\n        return this.bigSymbolsL;\n    }\n    getBigSymbolsH() {\n        return this.bigSymbolsH;\n    }\n    getReelsStartDelayTime() {\n        return this.reelsStartDelayTime;\n    }\n    setReelsStartDelayTime(value) {\n        this.reelsStartDelayTime = value;\n    }\n    getQuickStopDurationTime() {\n        return this.quickStopDurationTime;\n    }\n    setQuickStopDurationTime(value) {\n        this.quickStopDurationTime = value;\n    }\n    getQuickStopSpinTime() {\n        return this.quickStopSpinTime;\n    }\n    setTurboStopDurationTime(value) {\n        this.turboStopSpinTime = value;\n    }\n    getTurboStopDurationTime() {\n        return this.turboStopSpinTime;\n    }\n    getNormalReelStopDelay() {\n        return this.normalReelStopDelay;\n    }\n    setNormalReelStopDelay(value) {\n        this.normalReelStopDelay = value;\n    }\n    getQuickReelStopDelay() {\n        return this.quickReelStopDelay;\n    }\n    setQuickReelStopDelay(value) {\n        this.quickReelStopDelay = value;\n    }\n    setReelGrid(value) {\n        this.reelGrid = value;\n    }\n    getReelGrid() {\n        return this.reelGrid;\n    }\n}\n", "export var AssetsLibrary;\n(function (AssetsLibrary_1) {\n    AssetsLibrary_1.AssetsLibrary = {};\n})(AssetsLibrary || (AssetsLibrary = {}));\n", "export class Orientation {\n}\nOrientation.LANDSCAPE = \"landscape\";\nOrientation.PORTRAIT = \"portrait\";\n", "export var GameplayStates;\n(function (GameplayStates) {\n    GameplayStates[GameplayStates[\"INTRO\"] = 0] = \"INTRO\";\n    GameplayStates[GameplayStates[\"MAIN_MENU\"] = 1] = \"MAIN_MENU\";\n    GameplayStates[GameplayStates[\"GAME\"] = 2] = \"GAME\";\n    GameplayStates[GameplayStates[\"END_GAME\"] = 3] = \"END_GAME\";\n})(GameplayStates || (GameplayStates = {}));\n", "import { Orientation } from \"./Orientation\";\nimport { GameplayStates } from \"./GameplayStates\";\nexport class GameStates {\n    constructor() {\n        this.setInitialStates();\n    }\n    setOrientationState(state) {\n        this.orientationState = state;\n    }\n    getOrientationState() {\n        return this.orientationState;\n    }\n    setIsLandscapeState(value) {\n        this.isLandscapeState = value;\n    }\n    getIsLandscapeState() {\n        return this.isLandscapeState;\n    }\n    setIsMobile(value) {\n        this.isMobile = value;\n    }\n    getIsMobile() {\n        return this.isMobile;\n    }\n    setIsSoundOn(value) {\n        this.isSoundOn = value;\n    }\n    getIsSoundOn() {\n        return this.isSoundOn;\n    }\n    setIsGameSoundsOn(val) {\n        this.isGameSoundsOn = val;\n    }\n    getIsGameSoundsOn() {\n        return this.isGameSoundsOn;\n    }\n    setAmbientSound(value) {\n        this.isAmbientSound = value;\n    }\n    getIsAmbientSound() {\n        return this.isAmbientSound;\n    }\n    setIsGameEntered(value) {\n        this.isGameEntered = value;\n    }\n    getIsGameEntered() {\n        return this.isGameEntered;\n    }\n    setGameplayState(state) {\n        this.gameplayState = state;\n    }\n    getGameplayState() {\n        return this.gameplayState;\n    }\n    setInitialStates() {\n        this.setIsLandscapeState(true);\n        this.setIsMobile(false);\n        this.setOrientationState(Orientation.LANDSCAPE);\n        this.setIsSoundOn(true);\n        this.setAmbientSound(true);\n        this.setIsGameEntered(false);\n        this.setGameplayState(GameplayStates.INTRO);\n    }\n}\nGameStates.ENTER_GAME = \"ENTER_GAME\";\n", "export var GameStatus;\n(function (GameStatus) {\n    GameStatus[\"LOADING\"] = \"LOADING\";\n})(GameStatus || (GameStatus = {}));\n", "import { SoundLibrary } from './SoundLibrary';\n\n/**\n * Singleton instance of the SoundLibrary\n */\nlet instance: SoundLibrary;\n\n/**\n * Internal set function for the singleton instance.\n * @ignore\n * @param sound - - Sound library instance\n */\nfunction setInstance(sound: SoundLibrary): SoundLibrary\n{\n    instance = sound;\n\n    return sound;\n}\n\n/**\n * Internal get function for the singleton instance.\n * @ignore\n */\nfunction getInstance(): SoundLibrary\n{\n    return instance;\n}\n\nexport { getInstance, instance, setInstance };\n", "/**\n * Represents a single sound element. Can be used to play, pause, etc. sound instances.\n *\n * @memberof filters\n */\nclass Filter\n{\n    /** The node to connect for the filter to the previous filter. */\n    public destination: AudioNode;\n\n    /** The node to connect for the filter to the previous filter. */\n    public source: AudioNode;\n\n    /**\n     * @param {AudioNode} destination - The audio node to use as the destination for the input AudioNode\n     * @param {AudioNode} [source] - Optional output node, defaults to destination node. This is useful\n     *        when creating filters which contains multiple AudioNode elements chained together.\n     */\n    constructor(destination: AudioNode, source?: AudioNode)\n    {\n        this.init(destination, source);\n    }\n\n    /** Reinitialize */\n    protected init(destination: AudioNode, source?: AudioNode): void\n    {\n        this.destination = destination;\n        this.source = source || destination;\n    }\n\n    /**\n     * Connect to the destination.\n     * @param {AudioNode} destination - The destination node to connect the output to\n     */\n    public connect(destination: AudioNode): void\n    {\n        this.source?.connect(destination);\n    }\n\n    /** Completely disconnect filter from destination and source nodes. */\n    public disconnect(): void\n    {\n        this.source?.disconnect();\n    }\n\n    /** Destroy the filter and don't use after this. */\n    public destroy(): void\n    {\n        this.disconnect();\n        this.destination = null;\n        this.source = null;\n    }\n}\n\nexport { Filter };\n", "import { getInstance } from '../instance';\nimport { WebAudioContext } from './WebAudioContext';\n\n/**\n * Internal class for Web Audio abstractions and convenience methods.\n * @memberof webaudio\n */\nclass WebAudioUtils\n{\n    /**\n     * Dezippering is removed in the future Web Audio API, instead\n     * we use the `setValueAtTime` method, however, this is not available\n     * in all environments (e.g., Android webview), so we fallback to the `value` setter.\n     * @param param - AudioNode parameter object\n     * @param value - Value to set\n     * @return The value set\n     */\n    public static setParamValue(param: AudioParam, value: number): number\n    {\n        if (param.setValueAtTime)\n        {\n            const context = getInstance().context as WebAudioContext;\n\n            param.setValueAtTime(value, context.audioContext.currentTime);\n        }\n        else\n        {\n            param.value = value;\n        }\n\n        return value;\n    }\n}\n\nexport { WebAudioUtils };\n", "import { getInstance } from '../instance';\nimport { WebAudioUtils } from '../webaudio/WebAudioUtils';\nimport { Filter } from './Filter';\n\ninterface Band\n{\n    f: number;\n    type: string;\n    gain: number;\n}\n\n/**\n * Filter for adding equalizer bands.\n *\n * @memberof filters\n */\nclass EqualizerFilter extends Filter\n{\n    /**\n     * Band at 32 Hz\n     * @readonly\n     */\n    public static readonly F32: number = 32;\n\n    /**\n     * Band at 64 Hz\n     * @readonly\n     */\n    public static readonly F64: number = 64;\n\n    /**\n     * Band at 125 Hz\n     * @readonly\n     */\n    public static readonly F125: number = 125;\n\n    /**\n     * Band at 250 Hz\n     * @readonly\n     */\n    public static readonly F250: number = 250;\n\n    /**\n     * Band at 500 Hz\n     * @readonly\n     */\n    public static readonly F500: number = 500;\n\n    /**\n     * Band at 1000 Hz\n     * @readonly\n     */\n    public static readonly F1K: number = 1000;\n\n    /**\n     * Band at 2000 Hz\n     * @readonly\n     */\n    public static readonly F2K: number = 2000;\n\n    /**\n     * Band at 4000 Hz\n     * @readonly\n     */\n    public static readonly F4K: number = 4000;\n\n    /**\n     * Band at 8000 Hz\n     * @readonly\n     */\n    public static readonly F8K: number = 8000;\n\n    /**\n     * Band at 16000 Hz\n     * @readonly\n     */\n    public static readonly F16K: number = 16000;\n\n    /**\n     * The list of bands\n     * @readonly\n     */\n    public readonly bands: BiquadFilterNode[];\n\n    /**\n     * The map of bands to frequency\n     * @readonly\n     */\n    public readonly bandsMap: Record<number, BiquadFilterNode>;\n\n    /**\n     * @param f32 - Default gain for 32 Hz\n     * @param f64 - Default gain for 64 Hz\n     * @param f125 - Default gain for 125 Hz\n     * @param f250 - Default gain for 250 Hz\n     * @param f500 - Default gain for 500 Hz\n     * @param f1k - Default gain for 1000 Hz\n     * @param f2k - Default gain for 2000 Hz\n     * @param f4k - Default gain for 4000 Hz\n     * @param f8k - Default gain for 8000 Hz\n     * @param f16k - Default gain for 16000 Hz\n     */\n    constructor(f32 = 0, f64 = 0, f125 = 0, f250 = 0, f500 = 0,\n        f1k = 0, f2k = 0, f4k = 0, f8k = 0, f16k = 0)\n    {\n        let bands: BiquadFilterNode[] = [];\n\n        const equalizerBands: Band[] = [\n            {\n                f: EqualizerFilter.F32,\n                type: 'lowshelf',\n                gain: f32,\n            },\n            {\n                f: EqualizerFilter.F64,\n                type: 'peaking',\n                gain: f64,\n            },\n            {\n                f: EqualizerFilter.F125,\n                type: 'peaking',\n                gain: f125,\n            },\n            {\n                f: EqualizerFilter.F250,\n                type: 'peaking',\n                gain: f250,\n            },\n            {\n                f: EqualizerFilter.F500,\n                type: 'peaking',\n                gain: f500,\n            },\n            {\n                f: EqualizerFilter.F1K,\n                type: 'peaking',\n                gain: f1k,\n            },\n            {\n                f: EqualizerFilter.F2K,\n                type: 'peaking',\n                gain: f2k,\n            },\n            {\n                f: EqualizerFilter.F4K,\n                type: 'peaking',\n                gain: f4k,\n            },\n            {\n                f: EqualizerFilter.F8K,\n                type: 'peaking',\n                gain: f8k,\n            },\n            {\n                f: EqualizerFilter.F16K,\n                type: 'highshelf',\n                gain: f16k,\n            },\n        ];\n\n        if (!getInstance().useLegacy)\n        {\n            bands = equalizerBands.map((band: Band) =>\n            {\n                const node: BiquadFilterNode = getInstance().context.audioContext.createBiquadFilter();\n\n                node.type = band.type as BiquadFilterType;\n                WebAudioUtils.setParamValue(node.Q, 1);\n                node.frequency.value = band.f; // WebAudioUtils.setParamValue(filter.frequency, band.f);\n                WebAudioUtils.setParamValue(node.gain, band.gain);\n\n                return node;\n            });\n        }\n\n        // Setup the constructor AudioNode, where first is the input, and last is the output\n        super(bands[0], bands[bands.length - 1]);\n\n        // Manipulate the bands\n        this.bands = bands;\n\n        // Create a map\n        this.bandsMap = {};\n\n        for (let i = 0; i < this.bands.length; i++)\n        {\n            const node: BiquadFilterNode = this.bands[i];\n\n            // Connect the previous band to the current one\n            if (i > 0)\n            {\n                this.bands[i - 1].connect(node);\n            }\n            this.bandsMap[node.frequency.value] = node;\n        }\n    }\n\n    /**\n     * Set gain on a specific frequency.\n     * @param frequency - The frequency, see EqualizerFilter.F* for bands\n     * @param gain - Recommended -40 to 40.\n     */\n    public setGain(frequency: number, gain = 0): void\n    {\n        if (!this.bandsMap[frequency])\n        {\n            throw new Error(`No band found for frequency ${frequency}`);\n        }\n        WebAudioUtils.setParamValue(this.bandsMap[frequency].gain, gain);\n    }\n\n    /**\n     * Get gain amount on a specific frequency.\n     * @return The amount of gain set.\n     */\n    public getGain(frequency: number): number\n    {\n        if (!this.bandsMap[frequency])\n        {\n            throw new Error(`No band found for frequency ${frequency}`);\n        }\n\n        return this.bandsMap[frequency].gain.value;\n    }\n\n    /**\n     * Gain at 32 Hz frequencey.\n     * @default 0\n     */\n    public set f32(value: number)\n    {\n        this.setGain(EqualizerFilter.F32, value);\n    }\n    public get f32(): number\n    {\n        return this.getGain(EqualizerFilter.F32);\n    }\n\n    /**\n     * Gain at 64 Hz frequencey.\n     * @default 0\n     */\n    public set f64(value: number)\n    {\n        this.setGain(EqualizerFilter.F64, value);\n    }\n    public get f64(): number\n    {\n        return this.getGain(EqualizerFilter.F64);\n    }\n\n    /**\n     * Gain at 125 Hz frequencey.\n     * @default 0\n     */\n    public set f125(value: number)\n    {\n        this.setGain(EqualizerFilter.F125, value);\n    }\n    public get f125(): number\n    {\n        return this.getGain(EqualizerFilter.F125);\n    }\n\n    /**\n     * Gain at 250 Hz frequencey.\n     * @default 0\n     */\n    public set f250(value: number)\n    {\n        this.setGain(EqualizerFilter.F250, value);\n    }\n    public get f250(): number\n    {\n        return this.getGain(EqualizerFilter.F250);\n    }\n\n    /**\n     * Gain at 500 Hz frequencey.\n     * @default 0\n     */\n    public set f500(value: number)\n    {\n        this.setGain(EqualizerFilter.F500, value);\n    }\n    public get f500(): number\n    {\n        return this.getGain(EqualizerFilter.F500);\n    }\n\n    /**\n     * Gain at 1 KHz frequencey.\n     * @default 0\n     */\n    public set f1k(value: number)\n    {\n        this.setGain(EqualizerFilter.F1K, value);\n    }\n    public get f1k(): number\n    {\n        return this.getGain(EqualizerFilter.F1K);\n    }\n\n    /**\n     * Gain at 2 KHz frequencey.\n     * @default 0\n     */\n    public set f2k(value: number)\n    {\n        this.setGain(EqualizerFilter.F2K, value);\n    }\n    public get f2k(): number\n    {\n        return this.getGain(EqualizerFilter.F2K);\n    }\n\n    /**\n     * Gain at 4 KHz frequencey.\n     * @default 0\n     */\n    public set f4k(value: number)\n    {\n        this.setGain(EqualizerFilter.F4K, value);\n    }\n    public get f4k(): number\n    {\n        return this.getGain(EqualizerFilter.F4K);\n    }\n\n    /**\n     * Gain at 8 KHz frequencey.\n     * @default 0\n     */\n    public set f8k(value: number)\n    {\n        this.setGain(EqualizerFilter.F8K, value);\n    }\n    public get f8k(): number\n    {\n        return this.getGain(EqualizerFilter.F8K);\n    }\n\n    /**\n     * Gain at 16 KHz frequencey.\n     * @default 0\n     */\n    public set f16k(value: number)\n    {\n        this.setGain(EqualizerFilter.F16K, value);\n    }\n    public get f16k(): number\n    {\n        return this.getGain(EqualizerFilter.F16K);\n    }\n\n    /** Reset all frequency bands to have gain of 0 */\n    public reset(): void\n    {\n        this.bands.forEach((band: BiquadFilterNode) =>\n        {\n            WebAudioUtils.setParamValue(band.gain, 0);\n        });\n    }\n\n    public destroy(): void\n    {\n        this.bands.forEach((band: BiquadFilterNode) =>\n        {\n            band.disconnect();\n        });\n        (this as any).bands = null;\n        (this as any).bandsMap = null;\n    }\n}\n\nexport { EqualizerFilter };\n", "import { EventEmitter } from 'pixi.js';\nimport { Filter } from '../filters/Filter';\nimport { IMediaContext } from '../interfaces/IMediaContext';\n\n/**\n * The fallback version of WebAudioContext which uses `<audio>` instead of WebAudio API.\n * @memberof htmlaudio\n * @extends PIXI.EventEmitter\n */\nclass HTMLAudioContext extends EventEmitter implements IMediaContext\n{\n    /** Current global speed from 0 to 1 */\n    public speed = 1;\n\n    /** Current muted status of the context */\n    public muted = false;\n\n    /** Current volume from 0 to 1  */\n    public volume = 1;\n\n    /** Current paused status */\n    public paused = false;\n\n    /** Internal trigger when volume, mute or speed changes */\n    public refresh(): void\n    {\n        this.emit('refresh');\n    }\n\n    /** Internal trigger paused changes */\n    public refreshPaused(): void\n    {\n        this.emit('refreshPaused');\n    }\n\n    /**\n     * HTML Audio does not support filters, this is non-functional API.\n     */\n    public get filters(): Filter[]\n    {\n        console.warn('HTML Audio does not support filters');\n\n        return null;\n    }\n    public set filters(_filters: Filter[])\n    {\n        console.warn('HTML Audio does not support filters');\n    }\n\n    /**\n     * HTML Audio does not support `audioContext`\n     * @readonly\n     * @type {AudioContext}\n     */\n    public get audioContext(): AudioContext\n    {\n        console.warn('HTML Audio does not support audioContext');\n\n        return null;\n    }\n\n    /**\n     * Toggles the muted state.\n     * @return The current muted state.\n     */\n    public toggleMute(): boolean\n    {\n        this.muted = !this.muted;\n        this.refresh();\n\n        return this.muted;\n    }\n\n    /**\n     * Toggles the paused state.\n     * @return The current paused state.\n     */\n    public togglePause(): boolean\n    {\n        this.paused = !this.paused;\n        this.refreshPaused();\n\n        return this.paused;\n    }\n\n    /** Destroy and don't use after this */\n    public destroy(): void\n    {\n        this.removeAllListeners();\n    }\n}\n\nexport { HTMLAudioContext };\n", "import { EventEmitter, Ticker } from 'pixi.js';\nimport { Filter } from '../filters/Filter';\nimport { IMediaInstance } from '../interfaces/IMediaInstance';\nimport { PlayOptions } from '../Sound';\nimport { HTMLAudioMedia } from './HTMLAudioMedia';\n\nlet id = 0;\n\n/**\n * Instance which wraps the `<audio>` element playback.\n * @memberof htmlaudio\n * @extends PIXI.EventEmitter\n */\nclass HTMLAudioInstance extends EventEmitter implements IMediaInstance\n{\n    /** Extra padding, in seconds, to deal with low-latecy of HTMLAudio. */\n    public static readonly PADDING: number = 0.1;\n\n    /** The current unique ID for this instance. */\n    public readonly id: number;\n\n    /** The instance of the Audio element. */\n    private _source: HTMLAudioElement;\n\n    /** The instance of the Audio media element. */\n    private _media: HTMLAudioMedia;\n\n    /** Playback rate, where 1 is 100%. */\n    private _end: number;\n\n    /** Current instance paused state. */\n    private _paused: boolean;\n\n    /** Current instance muted state. */\n    private _muted: boolean;\n\n    /** Current actual paused state. */\n    private _pausedReal: boolean;\n\n    /** Total length of the audio. */\n    private _duration: number;\n\n    /** Playback rate, where 1 is 100%. */\n    private _start: number;\n\n    /** `true` if the audio is actually playing. */\n    private _playing: boolean;\n\n    /** Volume for the instance. */\n    private _volume: number;\n\n    /** Speed for the instance. */\n    private _speed: number;\n\n    /** `true` for looping the playback */\n    private _loop: boolean;\n\n    /** @param parent - Parent element */\n    constructor(parent: HTMLAudioMedia)\n    {\n        super();\n\n        this.id = id++;\n\n        this.init(parent);\n    }\n\n    /**\n     * Set a property by name, this makes it easy to chain values\n     * @param name - Name of the property to set\n     * @param value - Value to set property to\n     */\n    public set(name: 'speed' | 'volume' | 'muted' | 'loop' | 'paused', value: number | boolean): this\n    {\n        if (this[name] === undefined)\n        {\n            throw new Error(`Property with name ${name} does not exist.`);\n        }\n        else\n        {\n            switch (name)\n            {\n                case 'speed': this.speed = value as number; break;\n                case 'volume': this.volume = value as number; break;\n                case 'paused': this.paused = value as boolean; break;\n                case 'loop': this.loop = value as boolean; break;\n                case 'muted': this.muted = value as boolean; break;\n            }\n        }\n\n        return this;\n    }\n\n    /** The current playback progress from 0 to 1. */\n    public get progress(): number\n    {\n        const { currentTime } = this._source;\n\n        return currentTime / this._duration;\n    }\n\n    /** Pauses the sound. */\n    public get paused(): boolean\n    {\n        return this._paused;\n    }\n    public set paused(paused: boolean)\n    {\n        this._paused = paused;\n        this.refreshPaused();\n    }\n\n    /**\n     * Reference: http://stackoverflow.com/a/40370077\n     * @private\n     */\n    private _onPlay(): void\n    {\n        this._playing = true;\n    }\n\n    /**\n     * Reference: http://stackoverflow.com/a/40370077\n     * @private\n     */\n    private _onPause(): void\n    {\n        this._playing = false;\n    }\n\n    /**\n     * Initialize the instance.\n     * @param {htmlaudio.HTMLAudioMedia} media - Same as constructor\n     */\n    public init(media: HTMLAudioMedia): void\n    {\n        this._playing = false;\n        this._duration = media.source.duration;\n        const source = this._source = media.source.cloneNode(false) as HTMLAudioElement;\n\n        source.src = media.parent.url;\n        source.onplay = this._onPlay.bind(this);\n        source.onpause = this._onPause.bind(this);\n        media.context.on('refresh', this.refresh, this);\n        media.context.on('refreshPaused', this.refreshPaused, this);\n        this._media = media;\n    }\n\n    /**\n     * Stop the sound playing\n     * @private\n     */\n    private _internalStop(): void\n    {\n        if (this._source && this._playing)\n        {\n            this._source.onended = null;\n            this._source.pause();\n        }\n    }\n\n    /** Stop the sound playing */\n    public stop(): void\n    {\n        this._internalStop();\n\n        if (this._source)\n        {\n            this.emit('stop');\n        }\n    }\n\n    /** Set the instance speed from 0 to 1 */\n    public get speed(): number\n    {\n        return this._speed;\n    }\n    public set speed(speed: number)\n    {\n        this._speed = speed;\n        this.refresh();\n    }\n\n    /** Get the set the volume for this instance from 0 to 1 */\n    public get volume(): number\n    {\n        return this._volume;\n    }\n    public set volume(volume: number)\n    {\n        this._volume = volume;\n        this.refresh();\n    }\n\n    /** If the sound instance should loop playback */\n    public get loop(): boolean\n    {\n        return this._loop;\n    }\n    public set loop(loop: boolean)\n    {\n        this._loop = loop;\n        this.refresh();\n    }\n\n    /** `true` if the sound is muted */\n    public get muted(): boolean\n    {\n        return this._muted;\n    }\n    public set muted(muted: boolean)\n    {\n        this._muted = muted;\n        this.refresh();\n    }\n\n    /**\n     * HTML Audio does not support filters, this is non-functional API.\n     */\n    public get filters(): Filter[]\n    {\n        console.warn('HTML Audio does not support filters');\n\n        return null;\n    }\n    public set filters(_filters: Filter[])\n    {\n        console.warn('HTML Audio does not support filters');\n    }\n\n    /** Call whenever the loop, speed or volume changes */\n    public refresh(): void\n    {\n        const global = this._media.context;\n        const sound = this._media.parent;\n\n        // Update the looping\n        this._source.loop = this._loop || sound.loop;\n\n        // Update the volume\n        const globalVolume = global.volume * (global.muted ? 0 : 1);\n        const soundVolume = sound.volume * (sound.muted ? 0 : 1);\n        const instanceVolume = this._volume * (this._muted ? 0 : 1);\n\n        this._source.volume = instanceVolume * globalVolume * soundVolume;\n\n        // Update the speed\n        this._source.playbackRate = this._speed * global.speed * sound.speed;\n    }\n\n    /** Handle changes in paused state, either globally or sound or instance */\n    public refreshPaused(): void\n    {\n        const global = this._media.context;\n        const sound = this._media.parent;\n\n        // Handle the paused state\n        const pausedReal = this._paused || sound.paused || global.paused;\n\n        if (pausedReal !== this._pausedReal)\n        {\n            this._pausedReal = pausedReal;\n\n            if (pausedReal)\n            {\n                this._internalStop();\n\n                /**\n                 * The sound is paused.\n                 * @event paused\n                 */\n                this.emit('paused');\n            }\n            else\n            {\n                /**\n                 * The sound is unpaused.\n                 * @event resumed\n                 */\n                this.emit('resumed');\n\n                // resume the playing with offset\n                this.play({\n                    start: this._source.currentTime,\n                    end: this._end,\n                    volume: this._volume,\n                    speed: this._speed,\n                    loop: this._loop,\n                });\n            }\n\n            /**\n             * The sound is paused or unpaused.\n             * @event pause\n             * @property {boolean} paused - If the instance was paused or not.\n             */\n            this.emit('pause', pausedReal);\n        }\n    }\n\n    /** Start playing the sound/ */\n    public play(options: PlayOptions): void\n    {\n        const { start, end, speed, loop, volume, muted } = options;\n\n        if (end)\n        {\n            // eslint-disable-next-line no-console\n            console.assert(end > start, 'End time is before start time');\n        }\n\n        this._speed = speed;\n        this._volume = volume;\n        this._loop = !!loop;\n        this._muted = muted;\n        this.refresh();\n\n        // WebAudio doesn't support looping when a duration is set\n        // we'll set this just for the heck of it\n        if (this.loop && end !== null)\n        {\n            console.warn('Looping not support when specifying an \"end\" time');\n            this.loop = false;\n        }\n\n        this._start = start;\n        this._end = end || this._duration;\n\n        // Lets expand the start and end a little\n        // to deal with the low-latecy of playing audio this way\n        // this is a little fudge-factor\n        this._start = Math.max(0, this._start - HTMLAudioInstance.PADDING);\n        this._end = Math.min(this._end + HTMLAudioInstance.PADDING, this._duration);\n\n        this._source.onloadedmetadata = () =>\n        {\n            if (this._source)\n            {\n                this._source.currentTime = start;\n                this._source.onloadedmetadata = null;\n                this.emit('progress', start / this._duration, this._duration);\n                Ticker.shared.add(this._onUpdate, this);\n            }\n        };\n        this._source.onended = this._onComplete.bind(this);\n        this._source.play();\n\n        /**\n         * The sound is started.\n         * @event start\n         */\n        this.emit('start');\n    }\n\n    /**\n     * Handle time update on sound.\n     * @private\n     */\n    private _onUpdate(): void\n    {\n        this.emit('progress', this.progress, this._duration);\n        if (this._source.currentTime >= this._end && !this._source.loop)\n        {\n            this._onComplete();\n        }\n    }\n\n    /**\n     * Callback when completed.\n     * @private\n     */\n    private _onComplete(): void\n    {\n        Ticker.shared.remove(this._onUpdate, this);\n        this._internalStop();\n        this.emit('progress', 1, this._duration);\n        /**\n         * The sound ends, don't use after this\n         * @event end\n         */\n        this.emit('end', this);\n    }\n\n    /** Don't use after this. */\n    public destroy(): void\n    {\n        Ticker.shared.remove(this._onUpdate, this);\n        this.removeAllListeners();\n\n        const source = this._source;\n\n        if (source)\n        {\n            // Remove the listeners\n            source.onended = null;\n            source.onplay = null;\n            source.onpause = null;\n\n            this._internalStop();\n        }\n\n        this._source = null;\n        this._speed = 1;\n        this._volume = 1;\n        this._loop = false;\n        this._end = null;\n        this._start = 0;\n        this._duration = 0;\n        this._playing = false;\n        this._pausedReal = false;\n        this._paused = false;\n        this._muted = false;\n\n        if (this._media)\n        {\n            this._media.context.off('refresh', this.refresh, this);\n            this._media.context.off('refreshPaused', this.refreshPaused, this);\n            this._media = null;\n        }\n    }\n\n    /**\n     * To string method for instance.\n     * @return The string representation of instance.\n     */\n    public toString(): string\n    {\n        return `[HTMLAudioInstance id=${this.id}]`;\n    }\n}\n\nexport { HTMLAudioInstance };\n", "import { EventEmitter } from 'pixi.js';\nimport { Filter } from '../filters/Filter';\nimport { IMedia } from '../interfaces/IMedia';\nimport { LoadedCallback, Sound } from '../Sound';\nimport { HTMLAudioContext } from './HTMLAudioContext';\nimport { HTMLAudioInstance } from './HTMLAudioInstance';\n\n/**\n * The fallback version of Sound which uses `<audio>` instead of WebAudio API.\n * @memberof htmlaudio\n * @extends PIXI.EventEmitter\n */\nclass HTMLAudioMedia extends EventEmitter implements IMedia\n{\n    public parent: Sound;\n    private _source: HTMLAudioElement;\n\n    public init(parent: Sound): void\n    {\n        this.parent = parent;\n        this._source = parent.options.source as HTMLAudioElement || new Audio();\n        if (parent.url)\n        {\n            this._source.src = parent.url;\n        }\n    }\n\n    // Implement create\n    public create(): HTMLAudioInstance\n    {\n        return new HTMLAudioInstance(this);\n    }\n\n    /**\n     * If the audio media is playable (ready).\n     * @readonly\n     */\n    public get isPlayable(): boolean\n    {\n        return !!this._source && this._source.readyState === 4;\n    }\n\n    /**\n     * THe duration of the media in seconds.\n     * @readonly\n     */\n    public get duration(): number\n    {\n        return this._source.duration;\n    }\n\n    /**\n     * Reference to the context.\n     * @readonly\n     */\n    public get context(): HTMLAudioContext\n    {\n        return this.parent.context as HTMLAudioContext;\n    }\n\n    /** The collection of filters, does not apply to HTML Audio. */\n    public get filters(): Filter[]\n    {\n        return null;\n    }\n    public set filters(_filters: Filter[])\n    {\n        console.warn('HTML Audio does not support filters');\n    }\n\n    // Override the destroy\n    public destroy(): void\n    {\n        this.removeAllListeners();\n\n        this.parent = null;\n\n        if (this._source)\n        {\n            this._source.src = '';\n            this._source.load();\n            this._source = null;\n        }\n    }\n\n    /**\n     * Get the audio source element.\n     * @type {HTMLAudioElement}\n     * @readonly\n     */\n    public get source(): HTMLAudioElement\n    {\n        return this._source;\n    }\n\n    // Implement the method to being preloading\n    public load(callback?: LoadedCallback): void\n    {\n        const source = this._source;\n        const sound = this.parent;\n\n        // See if the source is already loaded\n        if (source.readyState === 4)\n        {\n            sound.isLoaded = true;\n            const instance = sound.autoPlayStart();\n\n            if (callback)\n            {\n                setTimeout(() =>\n                {\n                    callback(null, sound, instance);\n                }, 0);\n            }\n\n            return;\n        }\n\n        // If there's no source, we cannot load\n        if (!sound.url)\n        {\n            callback(new Error('sound.url or sound.source must be set'));\n\n            return;\n        }\n\n        // Set the source\n        source.src = sound.url;\n\n        const onLoad = () =>\n        {\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\n            removeListeners();\n            sound.isLoaded = true;\n            const instance = sound.autoPlayStart();\n\n            if (callback)\n            {\n                callback(null, sound, instance);\n            }\n        };\n\n        const onAbort = () =>\n        {\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\n            removeListeners();\n            if (callback)\n            {\n                callback(new Error('Sound loading has been aborted'));\n            }\n        };\n\n        const onError = () =>\n        {\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\n            removeListeners();\n            const message = `Failed to load audio element (code: ${source.error.code})`;\n\n            if (callback)\n            {\n                callback(new Error(message));\n            }\n            else\n            {\n                console.error(message);\n            }\n        };\n\n        // Remove all event listeners\n        const removeListeners = () =>\n        {\n            // Listen for callback\n            source.removeEventListener('canplaythrough', onLoad);\n            source.removeEventListener('load', onLoad);\n            source.removeEventListener('abort', onAbort);\n            source.removeEventListener('error', onError);\n        };\n\n        // Listen for callback\n        source.addEventListener('canplaythrough', onLoad, false);\n        source.addEventListener('load', onLoad, false);\n        source.addEventListener('abort', onAbort, false);\n        source.addEventListener('error', onError, false);\n\n        // Begin the loading\n        source.load();\n    }\n}\n\nexport { HTMLAudioMedia };\n", "import { IMediaInstance } from './interfaces';\nimport { CompleteCallback, Sound } from './Sound';\n\n/** Data for adding new sound sprites. */\ninterface SoundSpriteData\n{\n    /** The start time in seconds. */\n    start: number;\n    /** The end time in seconds. */\n    end: number;\n    /** The optional speed, if not speed, uses the default speed of the parent. */\n    speed?: number;\n}\n\n// Collection of sound sprites\ntype SoundSprites = Record<string, SoundSprite>;\n\n/**\n * Object that represents a single Sound's sprite. To add sound sprites\n * use the {@link Sound#addSprites} method.\n * @example\n * import { sound } from '@pixi/sound';\n * sound.add('alias', {\n *   url: 'path/to/file.ogg',\n *   sprites: {\n *     blast: { start: 0, end: 0.2 },\n *     boom: { start: 0.3, end: 0.5 },\n *   },\n *   loaded() {\n *     sound.play('alias', 'blast');\n *   }\n * );\n *\n */\nclass SoundSprite\n{\n    /**\n     * The reference sound\n     * @readonly\n     */\n    public parent: Sound;\n\n    /**\n     * The starting location in seconds.\n     * @readonly\n     */\n    public start: number;\n\n    /**\n     * The ending location in seconds\n     * @readonly\n     */\n    public end: number;\n\n    /**\n     * The speed override where 1 is 100% speed playback.\n     * @readonly\n     */\n    public speed: number;\n\n    /**\n     * The duration of the sound in seconds.\n     * @readonly\n     */\n    public duration: number;\n\n    /**\n     * Whether to loop the sound sprite.\n     * @readonly\n     */\n    public loop: boolean;\n\n    /**\n     * @param parent - The parent sound\n     * @param options - Data associated with object.\n     */\n    constructor(parent: Sound, options: SoundSpriteData)\n    {\n        this.parent = parent;\n        Object.assign(this, options);\n        this.duration = this.end - this.start;\n\n        // eslint-disable-next-line no-console\n        console.assert(this.duration > 0, 'End time must be after start time');\n    }\n\n    /**\n     * Play the sound sprite.\n     * @param {Function} [complete] - Function call when complete\n     * @return Sound instance being played.\n     */\n    public play(complete?: CompleteCallback): IMediaInstance | Promise<IMediaInstance>\n    {\n        return this.parent.play({\n            complete,\n            speed: this.speed || this.parent.speed,\n            end: this.end,\n            start: this.start,\n            loop: this.loop\n        });\n    }\n\n    /** Destroy and don't use after this */\n    public destroy(): void\n    {\n        this.parent = null;\n    }\n}\n\nexport type { SoundSpriteData, SoundSprites };\nexport { SoundSprite };\n", "type ExtensionMap = Record<string, boolean>;\n\n/**\n * The list of extensions that can be played. This is the preferred order of playback.\n * If you want to priority the order of playback, you can use this array to do so.\n * @readonly\n * @memberof utils\n */\nconst extensions: string[] = [\n    'ogg',\n    'oga',\n    'opus',\n    'm4a',\n    'mp3',\n    'mpeg',\n    'wav',\n    'aiff',\n    'wma',\n    'mid',\n    'caf',\n];\n\nconst mimes: string[] = [\n    'audio/mpeg',\n    'audio/ogg',\n];\n\n/**\n * The list of browser supported audio formats.\n * @readonly\n * @memberof utils\n * @property {boolean} mp3 - `true` if file-type is supported\n * @property {boolean} ogg - `true` if file-type is supported\n * @property {boolean} oga - `true` if file-type is supported\n * @property {boolean} opus - `true` if file-type is supported\n * @property {boolean} mpeg - `true` if file-type is supported\n * @property {boolean} wav - `true` if file-type is supported\n * @property {boolean} aiff - `true` if file-type is supported\n * @property {boolean} wma - `true` if file-type is supported\n * @property {boolean} mid - `true` if file-type is supported\n * @property {boolean} caf - `true` if file-type is supported. Note that for this we check if the\n *                             'opus' codec is supported inside the caf container.\n */\nconst supported: ExtensionMap = {};\n\n/**\n * Function to validate file type formats. This is called when the library initializes, but can\n * be called again if you need to recognize a format not listed in `utils.extensions` at\n * initialization.\n * @memberof utils\n * @param typeOverrides - - Dictionary of type overrides (inputs for\n *                                 AudioElement.canPlayType()), keyed by extension from the\n *                                 utils.extensions array.\n */\nfunction validateFormats(typeOverrides?: Record<string, string>): void\n{\n    const overrides: Record<string, string> = {\n        m4a: 'audio/mp4',\n        oga: 'audio/ogg',\n        opus: 'audio/ogg; codecs=\"opus\"',\n        caf: 'audio/x-caf; codecs=\"opus\"', ...(typeOverrides || {})\n    };\n    const audio = document.createElement('audio');\n    const formats: ExtensionMap = {};\n    const no = /^no$/;\n\n    extensions.forEach((ext) =>\n    {\n        const canByExt = audio.canPlayType(`audio/${ext}`).replace(no, '');\n        const canByType = overrides[ext] ? audio.canPlayType(overrides[ext]).replace(no, '') : '';\n\n        formats[ext] = !!canByExt || !!canByType;\n    });\n    Object.assign(supported, formats);\n}\n\n// initialize supported\nvalidateFormats();\n\nexport {\n    extensions,\n    mimes,\n    supported,\n    validateFormats,\n};\n", "import { EventEmitter, Ticker } from 'pixi.js';\nimport { Filter } from '../filters/Filter';\nimport { IMediaInstance } from '../interfaces';\nimport { PlayOptions } from '../Sound';\nimport { WebAudioMedia } from './WebAudioMedia';\nimport { WebAudioUtils } from './WebAudioUtils';\n\nlet id = 0;\n\n/**\n * A single play instance that handles the AudioBufferSourceNode.\n * @memberof webaudio\n * @extends PIXI.EventEmitter\n */\nclass WebAudioInstance extends EventEmitter implements IMediaInstance\n{\n    /**\n     * The current unique ID for this instance.\n     * @readonly\n     */\n    public readonly id: number;\n\n    /** The source Sound. */\n    private _media: WebAudioMedia;\n\n    /** true if paused. */\n    private _paused: boolean;\n\n    /** true if muted. */\n    private _muted: boolean;\n\n    /** true if paused. */\n    private _pausedReal: boolean;\n\n    /** The instance volume */\n    private _volume: number;\n\n    /** Last update frame number. */\n    private _lastUpdate: number;\n\n    /** The total number of seconds elapsed in playback. */\n    private _elapsed: number;\n\n    /** Playback rate, where 1 is 100%. */\n    private _speed: number;\n\n    /** Playback rate, where 1 is 100%. */\n    private _end: number;\n\n    /** `true` if should be looping. */\n    private _loop: boolean;\n\n    /** Gain node for controlling volume of instance */\n    private _gain: GainNode;\n\n    /** Length of the sound in seconds. */\n    private _duration: number;\n\n    /** The progress of the sound from 0 to 1. */\n    private _progress: number;\n\n    /** Audio buffer source clone from Sound object. */\n    private _source: AudioBufferSourceNode;\n\n    /** The filters */\n    private _filters: Filter[];\n\n    constructor(media: WebAudioMedia)\n    {\n        super();\n\n        this.id = id++;\n        this._media = null;\n        this._paused = false;\n        this._muted = false;\n        this._elapsed = 0;\n\n        // Initialize\n        this.init(media);\n    }\n\n    /**\n     * Set a property by name, this makes it easy to chain values\n     * @param name - Name of the property to set.\n     * @param value - Value to set property to.\n     */\n    public set(name: 'speed' | 'volume' | 'muted' | 'loop' | 'paused', value: number | boolean): this\n    {\n        if (this[name] === undefined)\n        {\n            throw new Error(`Property with name ${name} does not exist.`);\n        }\n        else\n        {\n            switch (name)\n            {\n                case 'speed': this.speed = value as number; break;\n                case 'volume': this.volume = value as number; break;\n                case 'muted': this.muted = value as boolean; break;\n                case 'loop': this.loop = value as boolean; break;\n                case 'paused': this.paused = value as boolean; break;\n            }\n        }\n\n        return this;\n    }\n\n    /** Stops the instance, don't use after this. */\n    public stop(): void\n    {\n        if (this._source)\n        {\n            this._internalStop();\n            this.emit('stop');\n        }\n    }\n\n    /** Set the instance speed from 0 to 1 */\n    public get speed(): number\n    {\n        return this._speed;\n    }\n    public set speed(speed: number)\n    {\n        this._speed = speed;\n        this.refresh();\n        this._update(true); // update progress\n    }\n\n    /** Get the set the volume for this instance from 0 to 1 */\n    public get volume(): number\n    {\n        return this._volume;\n    }\n    public set volume(volume: number)\n    {\n        this._volume = volume;\n        this.refresh();\n    }\n\n    /** `true` if the sound is muted */\n    public get muted(): boolean\n    {\n        return this._muted;\n    }\n    public set muted(muted: boolean)\n    {\n        this._muted = muted;\n        this.refresh();\n    }\n\n    /** If the sound instance should loop playback */\n    public get loop(): boolean\n    {\n        return this._loop;\n    }\n    public set loop(loop: boolean)\n    {\n        this._loop = loop;\n        this.refresh();\n    }\n\n    /** The collection of filters. */\n    public get filters(): Filter[]\n    {\n        return this._filters;\n    }\n    public set filters(filters: Filter[])\n    {\n        if (this._filters)\n        {\n            this._filters?.filter((filter) => filter).forEach((filter) => filter.disconnect());\n            this._filters = null;\n            // Reconnect direct path\n            this._source.connect(this._gain);\n        }\n        this._filters = filters?.length ? filters.slice(0) : null;\n        this.refresh();\n    }\n\n    /** Refresh loop, volume and speed based on changes to parent */\n    public refresh(): void\n    {\n        // Sound could be paused\n        if (!this._source)\n        {\n            return;\n        }\n        const global = this._media.context;\n        const sound = this._media.parent;\n\n        // Updating looping\n        this._source.loop = this._loop || sound.loop;\n\n        // Update the volume\n        const globalVolume = global.volume * (global.muted ? 0 : 1);\n        const soundVolume = sound.volume * (sound.muted ? 0 : 1);\n        const instanceVolume = this._volume * (this._muted ? 0 : 1);\n\n        WebAudioUtils.setParamValue(this._gain.gain, instanceVolume * soundVolume * globalVolume);\n\n        // Update the speed\n        WebAudioUtils.setParamValue(this._source.playbackRate, this._speed * sound.speed * global.speed);\n\n        this.applyFilters();\n    }\n\n    /** Connect filters nodes to audio context */\n    private applyFilters(): void\n    {\n        if (this._filters?.length)\n        {\n            // Disconnect direct path before inserting filters\n            this._source.disconnect();\n\n            // Connect each filter\n            let source: { connect: (node: AudioNode) => void } = this._source;\n\n            this._filters.forEach((filter: Filter) =>\n            {\n                source.connect(filter.destination);\n                source = filter;\n            });\n            source.connect(this._gain);\n        }\n    }\n\n    /** Handle changes in paused state, either globally or sound or instance */\n    public refreshPaused(): void\n    {\n        const global = this._media.context;\n        const sound = this._media.parent;\n\n        // Consider global and sound paused\n        const pausedReal = this._paused || sound.paused || global.paused;\n\n        if (pausedReal !== this._pausedReal)\n        {\n            this._pausedReal = pausedReal;\n\n            if (pausedReal)\n            {\n                // pause the sounds\n                this._internalStop();\n\n                /**\n                 * The sound is paused.\n                 * @event paused\n                 */\n                this.emit('paused');\n            }\n            else\n            {\n                /**\n                 * The sound is unpaused.\n                 * @event resumed\n                 */\n                this.emit('resumed');\n\n                // resume the playing with offset\n                this.play({\n                    start: this._elapsed % this._duration,\n                    end: this._end,\n                    speed: this._speed,\n                    loop: this._loop,\n                    volume: this._volume,\n                });\n            }\n\n            /**\n             * The sound is paused or unpaused.\n             * @event pause\n             * @property {boolean} paused - If the instance was paused or not.\n             */\n            this.emit('pause', pausedReal);\n        }\n    }\n\n    /**\n     * Plays the sound.\n     * @param options - Play options.\n     */\n    public play(options: PlayOptions): void\n    {\n        const { start, end, speed, loop, volume, muted, filters } = options;\n\n        if (end)\n        {\n            // eslint-disable-next-line no-console\n            console.assert(end > start, 'End time is before start time');\n        }\n        this._paused = false;\n        const { source, gain } = this._media.nodes.cloneBufferSource();\n\n        this._source = source;\n        this._gain = gain;\n        this._speed = speed;\n        this._volume = volume;\n        this._loop = !!loop;\n        this._muted = muted;\n        this._filters = filters;\n        this.refresh();\n\n        const duration: number = this._source.buffer.duration;\n\n        this._duration = duration;\n        this._end = end;\n        this._lastUpdate = this._now();\n        this._elapsed = start;\n        this._source.onended = this._onComplete.bind(this);\n\n        if (this._loop)\n        {\n            this._source.loopEnd = end;\n            this._source.loopStart = start;\n            this._source.start(0, start);\n        }\n        else if (end)\n        {\n            this._source.start(0, start, end - start);\n        }\n        else\n        {\n            this._source.start(0, start);\n        }\n\n        /**\n         * The sound is started.\n         * @event start\n         */\n        this.emit('start');\n\n        // Do an update for the initial progress\n        this._update(true);\n\n        // Start handling internal ticks\n        this.enableTicker(true);\n    }\n\n    /** Start the update progress. */\n    private enableTicker(enabled: boolean): void\n    {\n        Ticker.shared.remove(this._updateListener, this);\n        if (enabled)\n        {\n            Ticker.shared.add(this._updateListener, this);\n        }\n    }\n\n    /** The current playback progress from 0 to 1. */\n    public get progress(): number\n    {\n        return this._progress;\n    }\n\n    /** Pauses the sound. */\n    public get paused(): boolean\n    {\n        return this._paused;\n    }\n\n    public set paused(paused: boolean)\n    {\n        this._paused = paused;\n        this.refreshPaused();\n    }\n\n    /** Don't use after this. */\n    public destroy(): void\n    {\n        this.removeAllListeners();\n        this._internalStop();\n        if (this._gain)\n        {\n            this._gain.disconnect();\n            this._gain = null;\n        }\n        if (this._media)\n        {\n            this._media.context.events.off('refresh', this.refresh, this);\n            this._media.context.events.off('refreshPaused', this.refreshPaused, this);\n            this._media = null;\n        }\n        this._filters?.forEach((filter) => filter.disconnect());\n        this._filters = null;\n        this._end = null;\n        this._speed = 1;\n        this._volume = 1;\n        this._loop = false;\n        this._elapsed = 0;\n        this._duration = 0;\n        this._paused = false;\n        this._muted = false;\n        this._pausedReal = false;\n    }\n\n    /**\n     * To string method for instance.\n     * @return The string representation of instance.\n     */\n    public toString(): string\n    {\n        return `[WebAudioInstance id=${this.id}]`;\n    }\n\n    /**\n     * Get the current time in seconds.\n     * @return Seconds since start of context\n     */\n    private _now(): number\n    {\n        return this._media.context.audioContext.currentTime;\n    }\n\n    /** Callback for update listener */\n    private _updateListener()\n    {\n        this._update();\n    }\n\n    /** Internal update the progress. */\n    private _update(force = false): void\n    {\n        if (this._source)\n        {\n            const now: number = this._now();\n            const delta: number = now - this._lastUpdate;\n\n            if (delta > 0 || force)\n            {\n                const speed: number = this._source.playbackRate.value;\n\n                this._elapsed += delta * speed;\n                this._lastUpdate = now;\n                const duration: number = this._duration;\n                let progress: number;\n\n                if (this._source.loopStart)\n                {\n                    const soundLength = this._source.loopEnd - this._source.loopStart;\n\n                    progress = (this._source.loopStart + (this._elapsed % soundLength)) / duration;\n                }\n                else\n                {\n                    progress = (this._elapsed % duration) / duration;\n                }\n\n                // Update the progress\n                this._progress = progress;\n\n                /**\n                 * The sound progress is updated.\n                 * @event progress\n                 * @property {number} progress - Amount progressed from 0 to 1\n                 * @property {number} duration - The total playback in seconds\n                 */\n                this.emit('progress', this._progress, duration);\n            }\n        }\n    }\n\n    /** Initializes the instance. */\n    public init(media: WebAudioMedia): void\n    {\n        this._media = media;\n        media.context.events.on('refresh', this.refresh, this);\n        media.context.events.on('refreshPaused', this.refreshPaused, this);\n    }\n\n    /** Stops the instance. */\n    private _internalStop(): void\n    {\n        if (this._source)\n        {\n            this.enableTicker(false);\n            this._source.onended = null;\n            this._source.stop(0); // param needed for iOS 8 bug\n            this._source.disconnect();\n            try\n            {\n                this._source.buffer = null;\n            }\n            catch (err)\n            {\n                // try/catch workaround for bug in older Chrome versions\n                console.warn('Failed to set AudioBufferSourceNode.buffer to null:', err);\n            }\n            this._source = null;\n        }\n    }\n\n    /** Callback when completed. */\n    private _onComplete(): void\n    {\n        if (this._source)\n        {\n            this.enableTicker(false);\n            this._source.onended = null;\n            this._source.disconnect();\n            try\n            {\n                this._source.buffer = null;\n            }\n            catch (err)\n            {\n                // try/catch workaround for bug in older Chrome versions\n                console.warn('Failed to set AudioBufferSourceNode.buffer to null:', err);\n            }\n        }\n        this._source = null;\n        this._progress = 1;\n        this.emit('progress', 1, this._duration);\n        /**\n         * The sound ends, don't use after this\n         * @event end\n         */\n        this.emit('end', this);\n    }\n}\n\nexport { WebAudioInstance };\n", "import { Filter } from './filters/Filter';\n\n/**\n * Abstract class which SoundNodes and SoundContext\n * both extend. This provides the functionality for adding\n * dynamic filters.\n */\nclass Filterable\n{\n    /** Get the gain node */\n    private _input: AudioNode;\n\n    /** The destination output audio node */\n    private _output: AudioNode;\n\n    /** Collection of filters. */\n    private _filters: Filter[];\n\n    /**\n     * @param input - The source audio node\n     * @param output - The output audio node\n     */\n    constructor(input: AudioNode, output: AudioNode)\n    {\n        this._output = output;\n        this._input = input;\n    }\n\n    /** The destination output audio node */\n    get destination(): AudioNode\n    {\n        return this._input;\n    }\n\n    /** The collection of filters. */\n    get filters(): Filter[]\n    {\n        return this._filters;\n    }\n    set filters(filters: Filter[])\n    {\n        if (this._filters)\n        {\n            this._filters.forEach((filter: Filter) =>\n            {\n                if (filter)\n                {\n                    filter.disconnect();\n                }\n            });\n            this._filters = null;\n            // Reconnect direct path\n            this._input.connect(this._output);\n        }\n\n        if (filters && filters.length)\n        {\n            this._filters = filters.slice(0);\n\n            // Disconnect direct path before inserting filters\n            this._input.disconnect();\n\n            // Connect each filter\n            let prevFilter: Filter = null;\n\n            filters.forEach((filter: Filter) =>\n            {\n                if (prevFilter === null)\n                {\n                    // first filter is the destination\n                    // for the analyser\n                    this._input.connect(filter.destination);\n                }\n                else\n                {\n                    prevFilter.connect(filter.destination);\n                }\n                prevFilter = filter;\n            });\n            prevFilter.connect(this._output);\n        }\n    }\n\n    /** Cleans up. */\n    public destroy(): void\n    {\n        this.filters = null;\n        this._input = null;\n        this._output = null;\n    }\n}\n\nexport { Filterable };\n", "import { Filterable } from '../Filterable';\nimport { WebAudioContext } from './WebAudioContext';\nimport { WebAudioUtils } from './WebAudioUtils';\n\n/** Output for cloning source node. */\ninterface SourceClone\n{\n    /** Cloned audio buffer source */\n    source: AudioBufferSourceNode;\n    /** Independent volume control */\n    gain: GainNode;\n}\n\n/**\n * @memberof webaudio\n */\nclass WebAudioNodes extends Filterable\n{\n    /**\n     * The buffer size for script processor, default is `0` which auto-detects. If you plan to use\n     * script node on iOS, you'll need to provide a non-zero amount.\n     * @default 0\n     */\n    public static BUFFER_SIZE = 0;\n\n    /**\n     * Get the buffer source node\n     * @readonly\n     */\n    public bufferSource: AudioBufferSourceNode;\n\n    /**\n     * Get the gain node\n     * @readonly\n     */\n    public gain: GainNode;\n\n    /**\n     * Get the analyser node\n     * @readonly\n     */\n    public analyser: AnalyserNode;\n\n    /**\n     * Reference to the SoundContext\n     * @readonly\n     */\n    public context: WebAudioContext;\n\n    /** Private reference to the script processor node. */\n    private _script: ScriptProcessorNode;\n\n    /**\n     * @param context - The audio context.\n     */\n    constructor(context: WebAudioContext)\n    {\n        const audioContext: AudioContext = context.audioContext;\n\n        const bufferSource: AudioBufferSourceNode = audioContext.createBufferSource();\n        const gain: GainNode = audioContext.createGain();\n        const analyser: AnalyserNode = audioContext.createAnalyser();\n\n        bufferSource.connect(analyser);\n        analyser.connect(gain);\n        gain.connect(context.destination);\n\n        super(analyser, gain);\n\n        this.context = context;\n        this.bufferSource = bufferSource;\n        this.gain = gain;\n        this.analyser = analyser;\n    }\n\n    /**\n     * Get the script processor node.\n     * @readonly\n     */\n    public get script(): ScriptProcessorNode\n    {\n        if (!this._script)\n        {\n            this._script = this.context.audioContext.createScriptProcessor(WebAudioNodes.BUFFER_SIZE);\n            this._script.connect(this.context.destination);\n        }\n\n        return this._script;\n    }\n\n    /** Cleans up. */\n    public destroy(): void\n    {\n        super.destroy();\n\n        this.bufferSource.disconnect();\n        if (this._script)\n        {\n            this._script.disconnect();\n        }\n        this.gain.disconnect();\n        this.analyser.disconnect();\n\n        this.bufferSource = null;\n        this._script = null;\n        this.gain = null;\n        this.analyser = null;\n\n        this.context = null;\n    }\n\n    /**\n     * Clones the bufferSource. Used just before playing a sound.\n     * @returns {SourceClone} The clone AudioBufferSourceNode.\n     */\n    public cloneBufferSource(): SourceClone\n    {\n        const orig: AudioBufferSourceNode = this.bufferSource;\n        const source: AudioBufferSourceNode = this.context.audioContext.createBufferSource();\n\n        source.buffer = orig.buffer;\n        WebAudioUtils.setParamValue(source.playbackRate, orig.playbackRate.value);\n        source.loop = orig.loop;\n\n        const gain: GainNode = this.context.audioContext.createGain();\n\n        source.connect(gain);\n        gain.connect(this.destination);\n\n        return { source, gain };\n    }\n\n    /**\n     * Get buffer size of `ScriptProcessorNode`.\n     * @readonly\n     */\n    get bufferSize(): number\n    {\n        return this.script.bufferSize;\n    }\n}\n\nexport type { SourceClone };\nexport { WebAudioNodes };\n", "import { DOMAdapter } from 'pixi.js';\nimport { Filter } from '../filters/Filter';\nimport { IMedia } from '../interfaces/IMedia';\nimport { LoadedCallback, Sound } from '../Sound';\nimport { WebAudioContext } from './WebAudioContext';\nimport { WebAudioInstance } from './WebAudioInstance';\nimport { WebAudioNodes } from './WebAudioNodes';\n\n/**\n * Represents a single sound element. Can be used to play, pause, etc. sound instances.\n * @memberof webaudio\n */\nclass WebAudioMedia implements IMedia\n{\n    /**\n     * Reference to the parent Sound container.\n     * @readonly\n     */\n    public parent: Sound;\n\n    /**\n     * The file buffer to load.\n     * @readonly\n     */\n    public source: ArrayBuffer | AudioBuffer;\n\n    /** Instance of the chain builder. */\n    private _nodes: WebAudioNodes;\n\n    /** Instance of the source node. */\n    private _source: AudioBufferSourceNode;\n\n    /**\n     * Re-initialize without constructing.\n     * @param parent - - Instance of parent Sound container\n     */\n    public init(parent: Sound): void\n    {\n        this.parent = parent;\n        this._nodes = new WebAudioNodes(this.context);\n        this._source = this._nodes.bufferSource;\n        this.source = parent.options.source as ArrayBuffer | AudioBuffer;\n    }\n\n    /** Destructor, safer to use `SoundLibrary.remove(alias)` to remove this sound. */\n    public destroy(): void\n    {\n        this.parent = null;\n        this._nodes.destroy();\n        this._nodes = null;\n        try\n        {\n            this._source.buffer = null;\n        }\n        catch (err)\n        {\n            // try/catch workaround for bug in older Chrome versions\n            console.warn('Failed to set AudioBufferSourceNode.buffer to null:', err);\n        }\n        this._source = null;\n        this.source = null;\n    }\n\n    // Implement create\n    public create(): WebAudioInstance\n    {\n        return new WebAudioInstance(this);\n    }\n\n    // Implement context\n    public get context(): WebAudioContext\n    {\n        return this.parent.context as WebAudioContext;\n    }\n\n    // Implement isPlayable\n    public get isPlayable(): boolean\n    {\n        return !!this._source && !!this._source.buffer;\n    }\n\n    // Implement filters\n    public get filters(): Filter[]\n    {\n        return this._nodes.filters;\n    }\n    public set filters(filters: Filter[])\n    {\n        this._nodes.filters = filters;\n    }\n\n    // Implements duration\n    public get duration(): number\n    {\n        // eslint-disable-next-line no-console\n        console.assert(this.isPlayable, 'Sound not yet playable, no duration');\n\n        return this._source.buffer.duration;\n    }\n\n    /** Gets and sets the buffer. */\n    public get buffer(): AudioBuffer\n    {\n        return this._source.buffer;\n    }\n    public set buffer(buffer: AudioBuffer)\n    {\n        this._source.buffer = buffer;\n    }\n\n    /** Get the current chained nodes object */\n    public get nodes(): WebAudioNodes\n    {\n        return this._nodes;\n    }\n\n    // Implements load\n    public load(callback?: LoadedCallback): void\n    {\n        // Load from the arraybuffer, incase it was loaded outside\n        if (this.source)\n        {\n            this._decode(this.source, callback);\n        }\n        // Load from the file path\n        else if (this.parent.url)\n        {\n            this._loadUrl(callback);\n        }\n        else if (callback)\n        {\n            callback(new Error('sound.url or sound.source must be set'));\n        }\n        else\n        {\n            console.error('sound.url or sound.source must be set');\n        }\n    }\n\n    /** Loads a sound using XHMLHttpRequest object. */\n    private async _loadUrl(callback?: LoadedCallback): Promise<void>\n    {\n        const url: string = this.parent.url;\n        const response = await DOMAdapter.get().fetch(url);\n\n        this._decode(await response.arrayBuffer(), callback);\n    }\n\n    /**\n     * Decodes the array buffer.\n     * @param arrayBuffer - From load.\n     * @param {Function} callback - Callback optional\n     */\n    private _decode(arrayBuffer: ArrayBuffer | AudioBuffer, callback?: LoadedCallback): void\n    {\n        const audioBufferReadyFn = (err: Error, buffer: AudioBuffer) =>\n        {\n            if (err)\n            {\n                if (callback)\n                {\n                    callback(err);\n                }\n            }\n            else\n            {\n                this.parent.isLoaded = true;\n                this.buffer = buffer;\n                const instance = this.parent.autoPlayStart();\n\n                if (callback)\n                {\n                    callback(null, this.parent, instance);\n                }\n            }\n        };\n\n        if (arrayBuffer instanceof AudioBuffer)\n        {\n            audioBufferReadyFn(null, arrayBuffer);\n        }\n        else\n        {\n            const context = this.parent.context as WebAudioContext;\n\n            context.decode(arrayBuffer, audioBufferReadyFn);\n        }\n    }\n}\n\nexport { WebAudioMedia };\n", "import { path } from 'pixi.js';\nimport { Filter } from './filters/Filter';\nimport { HTMLAudioMedia } from './htmlaudio/HTMLAudioMedia';\nimport { getInstance } from './instance';\nimport { IMedia, IMediaContext, IMediaInstance } from './interfaces';\nimport { SoundSprite, SoundSpriteData, SoundSprites } from './SoundSprite';\nimport { extensions, supported } from './utils/supported';\nimport { WebAudioMedia } from './webaudio/WebAudioMedia';\n\n/**\n * Options to use for creating sounds.\n */\ninterface Options\n{\n    /**\n     * `true` to immediately start preloading.\n     * @default false\n     */\n    autoPlay?: boolean;\n    /**\n     * `true` to disallow playing multiple layered instances at once.\n     * @default false\n     */\n    singleInstance?: boolean;\n    /**\n     * The amount of volume 1 = 100%.\n     * @default 1\n     */\n    volume?: number;\n    /**\n     * The playback rate where 1 is 100% speed.\n     * @default 1\n     */\n    speed?: number;\n    /**\n     * Global complete callback when play is finished.\n     * @type {Function}\n     */\n    complete?: CompleteCallback;\n    /**\n     * Call when finished loading.\n     * @type {Function}\n     */\n    loaded?: LoadedCallback;\n    /**\n     * `true` to immediately start preloading if loading from `url`.\n     */\n    preload?: boolean;\n    /**\n     * Initial loop value, `true` is loop infinitely\n     * @default false\n     */\n    loop?: boolean;\n    /**\n     * The source of the file being loaded\n     */\n    url?: string | string[];\n    /**\n     * If sound is already preloaded, available.\n     */\n    source?: ArrayBuffer | AudioBuffer | HTMLAudioElement;\n    /**\n     * The map of sprite data. Where a sprite is an object\n     * with a `start` and `end`, which are the times in seconds. Optionally, can include\n     * a `speed` amount where 1 is 100% speed.\n     */\n    sprites?: Record<string, SoundSpriteData>;\n}\n\n/**\n * Options used for sound playback.\n */\ninterface PlayOptions\n{\n    /**\n     * Start time offset in seconds.\n     * @default 0\n     */\n    start?: number;\n    /**\n     * End time in seconds.\n     */\n    end?: number;\n    /**\n     * Override default speed, default to the Sound's speed setting.\n     */\n    speed?: number;\n    /**\n    * Override default loop, default to the Sound's loop setting.\n    */\n    loop?: boolean;\n    /**\n     * Override default volume, default to the Sound's volume setting.\n     */\n    volume?: number;\n    /**\n     * The sprite to play.\n     */\n    sprite?: string;\n    /**\n     * If sound instance is muted by default.\n     * @default false\n     */\n    muted?: boolean;\n    /**\n     * Filters that apply to play.\n     * Only supported with WebAudio.\n     */\n    filters?: Filter[];\n    /**\n     * When completed.\n     * @type {Function}\n     */\n    complete?: CompleteCallback;\n    /**\n     * If not already preloaded, callback when finishes load.\n     * @type {Function}\n     */\n    loaded?: LoadedCallback;\n    /**\n     * Setting `true` will stop any playing instances. This is the same as\n     * the singleInstance property on Sound, but is play-specific.\n     */\n    singleInstance?: boolean;\n}\n\n/**\n * Callback when sound is loaded.\n * @ignore\n * @param {Error} err - The callback error.\n * @param {Sound} sound - The instance of new sound.\n * @param {IMediaInstance} instance - The instance of auto-played sound.\n */\ntype LoadedCallback = (err: Error, sound?: Sound, instance?: IMediaInstance) => void;\n\n/**\n * Callback when sound is completed.\n * @ignore\n * @param {Sound} sound - The instance of sound.\n */\ntype CompleteCallback = (sound: Sound) => void;\n\ntype SoundSpriteDataMap = Record<string, SoundSpriteData>;\n\n/**\n * Sound represents a single piece of loaded media. When playing a sound {@link IMediaInstance} objects\n * are created. Properties such a `volume`, `pause`, `mute`, `speed`, etc will have an effect on all instances.\n */\nclass Sound\n{\n    /** Pool of instances */\n    private static _pool: IMediaInstance[] = [];\n\n    /**\n     * `true` if the buffer is loaded.\n     * @default false\n     */\n    public isLoaded: boolean;\n\n    /**\n     * `true` if the sound is currently being played.\n     * @default false\n     * @readonly\n     */\n    public isPlaying: boolean;\n\n    /**\n     * true to start playing immediate after load.\n     * @default false\n     * @readonly\n     */\n    public autoPlay: boolean;\n\n    /**\n     * `true` to disallow playing multiple layered instances at once.\n     * @default false\n     */\n    public singleInstance: boolean;\n\n    /**\n     * `true` to immediately start preloading.\n     * @default false\n     * @readonly\n     */\n    public preload: boolean;\n\n    /**\n     * The file source to load.\n     * @readonly\n     */\n    public url: string;\n\n    /**\n     * The constructor options.\n     * @readonly\n     */\n    public options: Options;\n\n    /** The audio source */\n    public media: IMedia;\n\n    /** The list of play calls while waiting to preload the sound. */\n    private _preloadQueue: (() => void)[] | null;\n\n    /** The collection of instances being played. */\n    private _instances: IMediaInstance[];\n\n    /** The user defined sound sprites. */\n    private _sprites: SoundSprites;\n\n    /** The options when auto-playing. */\n    private _autoPlayOptions: PlayOptions;\n\n    /** The internal volume. */\n    private _volume: number;\n\n    /** The internal paused state. */\n    private _paused: boolean;\n\n    /** The internal muted state. */\n    private _muted: boolean;\n\n    /** The internal volume. */\n    private _loop: boolean;\n\n    /** The internal playbackRate */\n    private _speed: number;\n\n    /**\n     * Create a new sound instance from source.\n     * @param source - Either the path or url to the source file.\n     *        or the object of options to use.\n     * @return Created sound instance.\n     */\n    public static from(source: string | string[] | Options | ArrayBuffer | HTMLAudioElement | AudioBuffer): Sound\n    {\n        let options: Options = {};\n\n        if (typeof source === 'string')\n        {\n            options.url = source as string;\n        }\n        else if (source instanceof ArrayBuffer || source instanceof AudioBuffer || source instanceof HTMLAudioElement)\n        {\n            options.source = source;\n        }\n        else if (Array.isArray(source))\n        {\n            options.url = source;\n        }\n        else\n        {\n            options = source;\n        }\n\n        // Default settings\n        options = {\n            autoPlay: false,\n            singleInstance: false,\n            url: null,\n            source: null,\n            preload: false,\n            volume: 1,\n            speed: 1,\n            complete: null,\n            loaded: null,\n            loop: false, ...options\n        };\n\n        Object.freeze(options);\n\n        const media: IMedia = getInstance().useLegacy\n            ? new HTMLAudioMedia()\n            : new WebAudioMedia();\n\n        return new Sound(media, options);\n    }\n\n    /**\n     * Use `Sound.from`\n     * @ignore\n     */\n    constructor(media: IMedia, options: Options)\n    {\n        this.media = media;\n        this.options = options;\n        this._instances = [];\n        this._sprites = {};\n\n        this.media.init(this);\n\n        const complete = options.complete;\n\n        this._autoPlayOptions = complete ? { complete } : null;\n        this.isLoaded = false;\n        this._preloadQueue = null;\n        this.isPlaying = false;\n        this.autoPlay = options.autoPlay;\n        this.singleInstance = options.singleInstance;\n        this.preload = options.preload || this.autoPlay;\n\n        this.url = Array.isArray(options.url)\n            ? this.preferUrl(options.url)\n            : options.url;\n        this.speed = options.speed;\n        this.volume = options.volume;\n        this.loop = options.loop;\n\n        if (options.sprites)\n        {\n            this.addSprites(options.sprites);\n        }\n\n        if (this.preload)\n        {\n            this._preload(options.loaded);\n        }\n    }\n\n    /**\n     * Internal help for resolving which file to use if there are multiple provide\n     * this is especially helpful for working with bundlers (non Assets loading).\n     */\n    private preferUrl(urls: string[]): string\n    {\n        const [file] = urls\n            .map((url) => ({ url, ext: path.extname(url).slice(1) }))\n            .filter(({ ext }) => supported[ext])\n            .sort((a, b) => extensions.indexOf(a.ext) - extensions.indexOf(b.ext));\n\n        if (!file)\n        {\n            throw new Error('No supported file type found');\n        }\n\n        return file.url;\n    }\n\n    /** Instance of the media context. */\n    public get context(): IMediaContext\n    {\n        return getInstance().context;\n    }\n\n    /** Stops all the instances of this sound from playing. */\n    public pause(): this\n    {\n        this.isPlaying = false;\n        this.paused = true;\n\n        return this;\n    }\n\n    /** Resuming all the instances of this sound from playing */\n    public resume(): this\n    {\n        this.isPlaying = this._instances.length > 0;\n        this.paused = false;\n\n        return this;\n    }\n\n    /** Stops all the instances of this sound from playing. */\n    public get paused(): boolean\n    {\n        return this._paused;\n    }\n    public set paused(paused: boolean)\n    {\n        this._paused = paused;\n        this.refreshPaused();\n    }\n\n    /** The playback rate. */\n    public get speed(): number\n    {\n        return this._speed;\n    }\n    public set speed(speed: number)\n    {\n        this._speed = speed;\n        this.refresh();\n    }\n\n    /** Set the filters. Only supported with WebAudio. */\n    public get filters(): Filter[]\n    {\n        return this.media.filters;\n    }\n    public set filters(filters: Filter[])\n    {\n        this.media.filters = filters;\n    }\n\n    /**\n     * Add a sound sprite, which is a saved instance of a longer sound.\n     * Similar to an image spritesheet.\n     * @param alias - The unique name of the sound sprite.\n     * @param data - Either completed function or play options.\n     */\n    public addSprites(alias: string, data: SoundSpriteData): SoundSprite;\n\n    /**\n     * Convenience method to add more than one sprite add a time.\n     * @param data - Map of sounds to add where the key is the alias,\n     *        and the data are configuration options.\n     * @return The map of sound sprites added.\n     */\n    public addSprites(data: SoundSpriteDataMap): SoundSprites;\n\n    /**\n     * @ignore\n     */\n    public addSprites(source: string | SoundSpriteDataMap, data?: SoundSpriteData): any\n    {\n        if (typeof source === 'object')\n        {\n            const results: SoundSprites = {};\n\n            for (const alias in source)\n            {\n                results[alias] = this.addSprites(alias, source[alias]);\n            }\n\n            return results;\n        }\n\n        // eslint-disable-next-line no-console\n        console.assert(!this._sprites[source], `Alias ${source} is already taken`);\n        const sprite = new SoundSprite(this, data);\n\n        this._sprites[source] = sprite;\n\n        return sprite;\n    }\n\n    /** Destructor, safer to use `SoundLibrary.remove(alias)` to remove this sound. */\n    public destroy(): void\n    {\n        this._removeInstances();\n        this.removeSprites();\n        this.media.destroy();\n        this.media = null;\n        this._sprites = null;\n        this._instances = null;\n    }\n\n    /**\n     * Remove a sound sprite.\n     * @param alias - The unique name of the sound sprite, if alias is omitted, removes all sprites.\n     */\n    public removeSprites(alias?: string): Sound\n    {\n        if (!alias)\n        {\n            for (const name in this._sprites)\n            {\n                this.removeSprites(name);\n            }\n        }\n        else\n        {\n            const sprite: SoundSprite = this._sprites[alias];\n\n            if (sprite !== undefined)\n            {\n                sprite.destroy();\n                delete this._sprites[alias];\n            }\n        }\n\n        return this;\n    }\n\n    /** If the current sound is playable (loaded). */\n    public get isPlayable(): boolean\n    {\n        return this.isLoaded && this.media && this.media.isPlayable;\n    }\n\n    /** Stops all the instances of this sound from playing. */\n    public stop(): this\n    {\n        if (!this.isPlayable)\n        {\n            this.autoPlay = false;\n            this._autoPlayOptions = null;\n\n            return this;\n        }\n        this.isPlaying = false;\n\n        // Go in reverse order so we don't skip items\n        for (let i = this._instances.length - 1; i >= 0; i--)\n        {\n            this._instances[i].stop();\n        }\n\n        return this;\n    }\n\n    /**\n     * Play a sound sprite, which is a saved instance of a longer sound.\n     * Similar to an image spritesheet.\n     * @method play\n     * @instance\n     * @param alias - The unique name of the sound sprite.\n     * @param {Function} callback - Callback when completed.\n     * @return The sound instance,\n     *        this cannot be reused after it is done playing. Returns a Promise if the sound\n     *        has not yet loaded.\n     */\n    public play(alias: string, callback?: CompleteCallback): IMediaInstance | Promise<IMediaInstance>;\n\n    /**\n     * Plays the sound.\n     * @method play\n     * @instance\n     * @param {Function|PlayOptions} source - Either completed function or play options.\n     * @param {Function} callback - Callback when completed.\n     * @return The sound instance,\n     *        this cannot be reused after it is done playing. Returns a Promise if the sound\n     *        has not yet loaded.\n     */\n    public play(source?: string | PlayOptions | CompleteCallback,\n        callback?: CompleteCallback): IMediaInstance | Promise<IMediaInstance>;\n\n    // Overloaded function\n    public play(source?: string | PlayOptions | CompleteCallback,\n        complete?: CompleteCallback): IMediaInstance | Promise<IMediaInstance>\n    {\n        let options: PlayOptions;\n\n        if (typeof source === 'string')\n        {\n            const sprite: string = source as string;\n\n            options = { sprite, loop: this.loop, complete };\n        }\n        else if (typeof source === 'function')\n        {\n            options = {};\n            options.complete = source as CompleteCallback;\n        }\n        else\n        {\n            options = source as PlayOptions;\n        }\n\n        options = {\n            complete: null,\n            loaded: null,\n            sprite: null,\n            end: null,\n            start: 0,\n            volume: 1,\n            speed: 1,\n            muted: false,\n            loop: false, ...(options || {})\n        };\n\n        // A sprite is specified, add the options\n        if (options.sprite)\n        {\n            const alias: string = options.sprite;\n\n            // eslint-disable-next-line no-console\n            console.assert(!!this._sprites[alias], `Alias ${alias} is not available`);\n            const sprite: SoundSprite = this._sprites[alias];\n\n            options.start = sprite.start + (options.start || 0);\n            options.end = sprite.end;\n            options.speed = sprite.speed || 1;\n            options.loop = sprite.loop || options.loop;\n            delete options.sprite;\n        }\n\n        // @deprecated offset option\n        if ((options as any).offset)\n        {\n            options.start = (options as any).offset as number;\n        }\n\n        // if not yet playable, ignore\n        // - usefull when the sound download isnt yet completed\n        if (!this.isLoaded)\n        {\n            // Handle the case when trying to play a sound that is not yet loaded\n            // We'll add it to a queue to play after initial load finishes\n            if (this._preloadQueue)\n            {\n                return new Promise<IMediaInstance>((resolve) =>\n                {\n                    this._preloadQueue.push(() =>\n                    {\n                        resolve(this.play(options));\n                    });\n                });\n            }\n\n            this._preloadQueue = [];\n            this.autoPlay = true;\n            this._autoPlayOptions = options;\n\n            return new Promise<IMediaInstance>((resolve, reject) =>\n            {\n                this._preload((err: Error, sound: Sound, media: IMediaInstance) =>\n                {\n                    this._preloadQueue.forEach((resolve) => resolve());\n                    this._preloadQueue = null;\n\n                    if (err)\n                    {\n                        reject(err);\n                    }\n                    else\n                    {\n                        if (options.loaded)\n                        {\n                            options.loaded(err, sound, media);\n                        }\n                        resolve(media);\n                    }\n                });\n            });\n        }\n\n        // Stop all sounds\n        if (this.singleInstance || options.singleInstance)\n        {\n            this._removeInstances();\n        }\n\n        // clone the bufferSource\n        const instance = this._createInstance();\n\n        this._instances.push(instance);\n        this.isPlaying = true;\n        instance.once('end', () =>\n        {\n            if (options.complete)\n            {\n                options.complete(this);\n            }\n            this._onComplete(instance);\n        });\n        instance.once('stop', () =>\n        {\n            this._onComplete(instance);\n        });\n\n        instance.play(options);\n\n        return instance;\n    }\n\n    /** Internal only, speed, loop, volume change occured. */\n    public refresh(): void\n    {\n        const len = this._instances.length;\n\n        for (let i = 0; i < len; i++)\n        {\n            this._instances[i].refresh();\n        }\n    }\n\n    /** Handle changes in paused state. Internal only. */\n    public refreshPaused(): void\n    {\n        const len = this._instances.length;\n\n        for (let i = 0; i < len; i++)\n        {\n            this._instances[i].refreshPaused();\n        }\n    }\n\n    /** Gets and sets the volume. */\n    public get volume(): number\n    {\n        return this._volume;\n    }\n    public set volume(volume: number)\n    {\n        this._volume = volume;\n        this.refresh();\n    }\n\n    /** Gets and sets the muted flag. */\n    public get muted(): boolean\n    {\n        return this._muted;\n    }\n    public set muted(muted: boolean)\n    {\n        this._muted = muted;\n        this.refresh();\n    }\n\n    /** Gets and sets the looping. */\n    public get loop(): boolean\n    {\n        return this._loop;\n    }\n    public set loop(loop: boolean)\n    {\n        this._loop = loop;\n        this.refresh();\n    }\n\n    /** Starts the preloading of sound. */\n    private _preload(callback?: LoadedCallback): void\n    {\n        this.media.load(callback);\n    }\n\n    /** Gets the list of instances that are currently being played of this sound. */\n    public get instances(): IMediaInstance[]\n    {\n        return this._instances;\n    }\n\n    /** Get the map of sprites. */\n    public get sprites(): SoundSprites\n    {\n        return this._sprites;\n    }\n\n    /** Get the duration of the audio in seconds. */\n    public get duration(): number\n    {\n        return this.media.duration;\n    }\n\n    /** Auto play the first instance. */\n    public autoPlayStart(): IMediaInstance\n    {\n        let instance: IMediaInstance;\n\n        if (this.autoPlay)\n        {\n            instance = this.play(this._autoPlayOptions) as IMediaInstance;\n        }\n\n        return instance;\n    }\n\n    /** Removes all instances. */\n    private _removeInstances(): void\n    {\n        // destroying also stops\n        for (let i = this._instances.length - 1; i >= 0; i--)\n        {\n            this._poolInstance(this._instances[i]);\n        }\n        this._instances.length = 0;\n    }\n\n    /**\n     * Sound instance completed.\n     * @param instance\n     */\n    private _onComplete(instance: IMediaInstance): void\n    {\n        if (this._instances)\n        {\n            const index = this._instances.indexOf(instance);\n\n            if (index > -1)\n            {\n                this._instances.splice(index, 1);\n            }\n            this.isPlaying = this._instances.length > 0;\n        }\n        this._poolInstance(instance);\n    }\n\n    /** Create a new instance. */\n    private _createInstance(): IMediaInstance\n    {\n        if (Sound._pool.length > 0)\n        {\n            const instance: IMediaInstance = Sound._pool.pop();\n\n            instance.init(this.media);\n\n            return instance;\n        }\n\n        return this.media.create();\n    }\n\n    /**\n     * Destroy/recycling the instance object.\n     * @param instance - Instance to recycle\n     */\n    private _poolInstance(instance: IMediaInstance): void\n    {\n        instance.destroy();\n        // Add it if it isn't already added\n        if (Sound._pool.indexOf(instance) < 0)\n        {\n            Sound._pool.push(instance);\n        }\n    }\n}\n\nexport { Sound };\nexport type {\n    CompleteCallback,\n    LoadedCallback,\n    Options,\n    PlayOptions,\n    SoundSpriteDataMap\n};\n", "import { EventEmitter } from 'pixi.js';\nimport { Filterable } from '../Filterable';\nimport { IMediaContext } from '../interfaces';\n\n/**\n * Main class to handle WebAudio API. There's a simple chain\n * of AudioNode elements: analyser > compressor > context.destination.\n * any filters that are added are inserted between the analyser and compressor nodes\n * @memberof webaudio\n */\nclass WebAudioContext extends Filterable implements IMediaContext\n{\n    /**\n     * Context Compressor node\n     * @readonly\n     */\n    public compressor: DynamicsCompressorNode;\n\n    /**\n     * Context Analyser node\n     * @readonly\n     */\n    public analyser: AnalyserNode;\n\n    /**\n     * Global speed of all sounds\n     * @readonly\n     */\n    public speed: number;\n\n    /**\n     * Sets the muted state.\n     * @default false\n     */\n    public muted: boolean;\n\n    /**\n     * Sets the volume from 0 to 1.\n     * @default 1\n     */\n    public volume: number;\n\n    /**\n     * Handle global events\n     * @type {PIXI.EventEmitter}\n     */\n    public events: EventEmitter;\n\n    /** The instance of the AudioContext for WebAudio API. */\n    private _ctx: AudioContext;\n\n    /** The instance of the OfflineAudioContext for fast decoding audio. */\n    private _offlineCtx: OfflineAudioContext;\n\n    /** Current paused status */\n    private _paused: boolean;\n\n    /**\n     * Indicated whether audio on iOS has been unlocked, which requires a touchend/mousedown event that plays an\n     * empty sound.\n     */\n    private _locked: boolean;\n\n    /** The paused state when blurring the current window */\n    private _pausedOnBlur: boolean;\n\n    /** Set to false ignore suspending when window is blurred */\n    public autoPause = true;\n\n    constructor()\n    {\n        const win: any = window as any;\n        const ctx = new WebAudioContext.AudioContext();\n        const compressor: DynamicsCompressorNode = ctx.createDynamicsCompressor();\n        const analyser: AnalyserNode = ctx.createAnalyser();\n\n        // setup the end of the node chain\n        analyser.connect(compressor);\n        compressor.connect(ctx.destination);\n\n        super(analyser, compressor);\n\n        this._ctx = ctx;\n        // ios11 safari's webkitOfflineAudioContext allows only 44100 Hz sample rate\n        //\n        // For the sample rate value passed to OfflineAudioContext constructor,\n        // all browsers are required to support a range of 8000 to 96000.\n        // Reference:\n        // https://www.w3.org/TR/webaudio/#dom-offlineaudiocontext-offlineaudiocontext-numberofchannels-length-samplerate\n        this._offlineCtx = new WebAudioContext.OfflineAudioContext(1, 2,\n            (win.OfflineAudioContext) ? Math.max(8000, Math.min(96000, ctx.sampleRate)) : 44100);\n\n        this.compressor = compressor;\n        this.analyser = analyser;\n        this.events = new EventEmitter();\n\n        // Set the defaults\n        this.volume = 1;\n        this.speed = 1;\n        this.muted = false;\n        this.paused = false;\n\n        this._locked = ctx.state === 'suspended' && ('ontouchstart' in globalThis || 'onclick' in globalThis);\n\n        // Listen for document level clicks to unlock WebAudio. See the _unlock method.\n        if (this._locked)\n        {\n            this._unlock(); // When played inside of a touch event, this will enable audio on iOS immediately.\n            this._unlock = this._unlock.bind(this);\n            document.addEventListener('mousedown', this._unlock, true);\n            document.addEventListener('touchstart', this._unlock, true);\n            document.addEventListener('touchend', this._unlock, true);\n        }\n\n        this.onFocus = this.onFocus.bind(this);\n        this.onBlur = this.onBlur.bind(this);\n        globalThis.addEventListener('focus', this.onFocus);\n        globalThis.addEventListener('blur', this.onBlur);\n    }\n\n    /** Handle mobile WebAudio context resume */\n    private onFocus(): void\n    {\n        if (!this.autoPause)\n        {\n            return;\n        }\n        // Safari uses the non-standard \"interrupted\" state in some cases\n        // such as when the app loses focus because the screen is locked\n        // or when the user switches to another app.\n        const state = this._ctx.state as 'suspended' | 'interrupted';\n\n        if (state === 'suspended' || state === 'interrupted' || !this._locked)\n        {\n            this.paused = this._pausedOnBlur;\n            this.refreshPaused();\n        }\n    }\n\n    /** Handle mobile WebAudio context suspend */\n    private onBlur(): void\n    {\n        if (!this.autoPause)\n        {\n            return;\n        }\n        if (!this._locked)\n        {\n            this._pausedOnBlur = this._paused;\n            this.paused = true;\n            this.refreshPaused();\n        }\n    }\n\n    /**\n     * Try to unlock audio on iOS. This is triggered from either WebAudio plugin setup (which will work if inside of\n     * a `mousedown` or `touchend` event stack), or the first document touchend/mousedown event. If it fails (touchend\n     * will fail if the user presses for too long, indicating a scroll event instead of a click event.\n     *\n     * Note that earlier versions of iOS supported `touchstart` for this, but iOS9 removed this functionality. Adding\n     * a `touchstart` event to support older platforms may preclude a `mousedown` even from getting fired on iOS9, so we\n     * stick with `mousedown` and `touchend`.\n     */\n    private _unlock(): void\n    {\n        if (!this._locked)\n        {\n            return;\n        }\n        this.playEmptySound();\n        if (this._ctx.state === 'running')\n        {\n            document.removeEventListener('mousedown', this._unlock, true);\n            document.removeEventListener('touchend', this._unlock, true);\n            document.removeEventListener('touchstart', this._unlock, true);\n            this._locked = false;\n        }\n    }\n\n    /**\n     * Plays an empty sound in the web audio context.  This is used to enable web audio on iOS devices, as they\n     * require the first sound to be played inside of a user initiated event (touch/click).\n     */\n    public playEmptySound(): void\n    {\n        const source = this._ctx.createBufferSource();\n\n        source.buffer = this._ctx.createBuffer(1, 1, 22050);\n        source.connect(this._ctx.destination);\n        source.start(0, 0, 0);\n        if (source.context.state === 'suspended')\n        {\n            (source.context as AudioContext).resume();\n        }\n    }\n\n    /**\n     * Get AudioContext class, if not supported returns `null`\n     * @type {AudioContext}\n     * @readonly\n     */\n    public static get AudioContext(): typeof AudioContext\n    {\n        const win: any = window as any;\n\n        return (\n            win.AudioContext\n            || win.webkitAudioContext\n            || null\n        );\n    }\n\n    /**\n     * Get OfflineAudioContext class, if not supported returns `null`\n     * @type {OfflineAudioContext}\n     * @readonly\n     */\n    public static get OfflineAudioContext(): typeof OfflineAudioContext\n    {\n        const win: any = window as any;\n\n        return (\n            win.OfflineAudioContext\n            || win.webkitOfflineAudioContext\n            || null\n        );\n    }\n\n    /** Destroy this context. */\n    public destroy(): void\n    {\n        super.destroy();\n\n        const ctx: any = this._ctx as any;\n        // check if browser supports AudioContext.close()\n\n        if (typeof ctx.close !== 'undefined')\n        {\n            ctx.close();\n        }\n        globalThis.removeEventListener('focus', this.onFocus);\n        globalThis.removeEventListener('blur', this.onBlur);\n        this.events.removeAllListeners();\n        this.analyser.disconnect();\n        this.compressor.disconnect();\n        this.analyser = null;\n        this.compressor = null;\n        this.events = null;\n        this._offlineCtx = null;\n        this._ctx = null;\n    }\n\n    /**\n     * The WebAudio API AudioContext object.\n     * @readonly\n     * @type {AudioContext}\n     */\n    public get audioContext(): AudioContext\n    {\n        return this._ctx;\n    }\n\n    /**\n     * The WebAudio API OfflineAudioContext object.\n     * @readonly\n     * @type {OfflineAudioContext}\n     */\n    public get offlineContext(): OfflineAudioContext\n    {\n        return this._offlineCtx;\n    }\n\n    /**\n     * Pauses all sounds, even though we handle this at the instance\n     * level, we'll also pause the audioContext so that the\n     * time used to compute progress isn't messed up.\n     * @default false\n     */\n    public set paused(paused: boolean)\n    {\n        if (paused && this._ctx.state === 'running')\n        {\n            this._ctx.suspend();\n        }\n        else if (!paused && this._ctx.state === 'suspended')\n        {\n            this._ctx.resume();\n        }\n        this._paused = paused;\n    }\n    public get paused(): boolean\n    {\n        return this._paused;\n    }\n\n    /** Emit event when muted, volume or speed changes */\n    public refresh(): void\n    {\n        this.events.emit('refresh');\n    }\n\n    /** Emit event when muted, volume or speed changes */\n    public refreshPaused(): void\n    {\n        this.events.emit('refreshPaused');\n    }\n\n    /**\n     * Toggles the muted state.\n     * @return The current muted state.\n     */\n    public toggleMute(): boolean\n    {\n        this.muted = !this.muted;\n        this.refresh();\n\n        return this.muted;\n    }\n\n    /**\n     * Toggles the paused state.\n     * @return The current muted state.\n     */\n    public togglePause(): boolean\n    {\n        this.paused = !this.paused;\n        this.refreshPaused();\n\n        return this._paused;\n    }\n\n    /**\n     * Decode the audio data\n     * @param arrayBuffer - Buffer from loader\n     * @param callback - When completed, error and audioBuffer are parameters.\n     */\n    public decode(arrayBuffer: ArrayBuffer, callback: (err?: Error, buffer?: AudioBuffer) => void): void\n    {\n        const handleError = (err: Error) =>\n        {\n            callback(new Error(err?.message || 'Unable to decode file'));\n        };\n        const result = this._offlineCtx.decodeAudioData(\n            arrayBuffer, (buffer: AudioBuffer) =>\n            {\n                callback(null, buffer);\n            },\n            handleError,\n        );\n        // Reference: https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/decodeAudioData\n        // decodeAudioData return value: Void, or a Promise object that fulfills with the decodedData.\n\n        if (result)\n        {\n            result.catch(handleError);\n        }\n    }\n}\n\nexport { WebAudioContext };\n", "import { Filter } from './filters/Filter';\nimport { HTMLAudioContext } from './htmlaudio/HTMLAudioContext';\nimport { IMediaContext } from './interfaces/IMediaContext';\nimport { IMediaInstance } from './interfaces/IMediaInstance';\nimport { CompleteCallback, Options, PlayOptions, Sound } from './Sound';\nimport { WebAudioContext } from './webaudio/WebAudioContext';\n\ntype SoundSourceMap = Record<string, Options | string | ArrayBuffer | AudioBuffer | HTMLAudioElement>;\ntype SoundMap = Record<string, Sound>;\n\n/**\n * Manages the playback of sounds. This is the main class for PixiJS Sound. If you're\n * using the browser-based bundled this is `PIXI.sound`. Otherwise, you can do this:\n * @example\n * import { sound } from '@pixi/sound';\n *\n * // sound is an instance of SoundLibrary\n * sound.add('my-sound', 'path/to/file.mp3');\n * sound.play('my-sound');\n */\nclass SoundLibrary\n{\n    /**\n     * For legacy approach for Audio. Instead of using WebAudio API\n     * for playback of sounds, it will use HTML5 `<audio>` element.\n     */\n    private _useLegacy: boolean;\n\n    /** The global context to use. */\n    private _context: IMediaContext;\n\n    /** The WebAudio specific context */\n    private _webAudioContext: WebAudioContext;\n\n    /** The HTML Audio (legacy) context. */\n    private _htmlAudioContext: HTMLAudioContext;\n\n    /** The map of all sounds by alias. */\n    private _sounds: SoundMap;\n\n    constructor()\n    {\n        this.init();\n    }\n\n    /**\n     * Re-initialize the sound library, this will\n     * recreate the AudioContext. If there's a hardware-failure\n     * call `close` and then `init`.\n     * @return Sound instance\n     */\n    public init(): this\n    {\n        if (this.supported)\n        {\n            this._webAudioContext = new WebAudioContext();\n        }\n        this._htmlAudioContext = new HTMLAudioContext();\n        this._sounds = {};\n        this.useLegacy = !this.supported;\n\n        return this;\n    }\n\n    /**\n     * The global context to use.\n     * @readonly\n     */\n    public get context(): IMediaContext\n    {\n        return this._context;\n    }\n\n    /**\n     * Apply filters to all sounds. Can be useful\n     * for setting global planning or global effects.\n     * **Only supported with WebAudio.**\n     * @example\n     * import { sound, filters } from '@pixi/sound';\n     * // Adds a filter to pan all output left\n     * sound.filtersAll = [\n     *     new filters.StereoFilter(-1)\n     * ];\n     */\n    public get filtersAll(): Filter[]\n    {\n        if (!this.useLegacy)\n        {\n            return this._context.filters;\n        }\n\n        return [];\n    }\n    public set filtersAll(filtersAll: Filter[])\n    {\n        if (!this.useLegacy)\n        {\n            this._context.filters = filtersAll;\n        }\n    }\n\n    /**\n     * `true` if WebAudio is supported on the current browser.\n     */\n    public get supported(): boolean\n    {\n        return WebAudioContext.AudioContext !== null;\n    }\n\n    /**\n     * Register an existing sound with the library cache.\n     * @method add\n     * @instance\n     * @param {string} alias - The sound alias reference.\n     * @param {Sound} sound - Sound reference to use.\n     * @return {Sound} Instance of the Sound object.\n     */\n\n    /**\n     * Adds a new sound by alias.\n     * @param alias - The sound alias reference.\n     * @param {ArrayBuffer|AudioBuffer|String|Options|HTMLAudioElement} options - Either the path or url to the source file.\n     *        or the object of options to use.\n     * @return Instance of the Sound object.\n     */\n    public add(alias: string, options: Options | string | ArrayBuffer | AudioBuffer | HTMLAudioElement | Sound): Sound;\n\n    /**\n     * Adds multiple sounds at once.\n     * @param map - Map of sounds to add, the key is the alias, the value is the\n     *        `string`, `ArrayBuffer`, `AudioBuffer`, `HTMLAudioElement` or the list of options\n     *        (see {@link Options} for full options).\n     * @param globalOptions - The default options for all sounds.\n     *        if a property is defined, it will use the local property instead.\n     * @return Instance to the Sound object.\n     */\n    public add(map: SoundSourceMap, globalOptions?: Options): SoundMap;\n\n    /**\n     * @ignore\n     */\n    public add(source: string | SoundSourceMap,\n        sourceOptions?: Options | string | ArrayBuffer | AudioBuffer | HTMLAudioElement | Sound): any\n    {\n        if (typeof source === 'object')\n        {\n            const results: SoundMap = {};\n\n            for (const alias in source)\n            {\n                const options: Options = this._getOptions(\n                    source[alias],\n                    sourceOptions as Options,\n                );\n\n                results[alias] = this.add(alias, options);\n            }\n\n            return results;\n        }\n\n        // eslint-disable-next-line no-console\n        console.assert(!this._sounds[source], `Sound with alias ${source} already exists.`);\n\n        if (sourceOptions instanceof Sound)\n        {\n            this._sounds[source] = sourceOptions;\n\n            return sourceOptions;\n        }\n\n        const options: Options = this._getOptions(sourceOptions);\n        const sound: Sound = Sound.from(options);\n\n        this._sounds[source] = sound;\n\n        return sound;\n    }\n\n    /**\n     * Internal methods for getting the options object\n     * @private\n     * @param source - The source options\n     * @param overrides - Override default options\n     * @return The construction options\n     */\n    private _getOptions(source: string | ArrayBuffer | AudioBuffer | HTMLAudioElement | Options,\n        overrides?: Options): Options\n    {\n        let options: Options;\n\n        if (typeof source === 'string')\n        {\n            options = { url: source };\n        }\n        else if (Array.isArray(source))\n        {\n            options = { url: source };\n        }\n        else if (source instanceof ArrayBuffer || source instanceof AudioBuffer || source instanceof HTMLAudioElement)\n        {\n            options = { source };\n        }\n        else\n        {\n            options = source as Options;\n        }\n        options = { ...options, ...(overrides || {}) };\n\n        return options;\n    }\n\n    /**\n     * Do not use WebAudio, force the use of legacy. This **must** be called before loading any files.\n     */\n    public get useLegacy(): boolean\n    {\n        return this._useLegacy;\n    }\n    public set useLegacy(legacy: boolean)\n    {\n        this._useLegacy = legacy;\n\n        // Set the context to use\n        this._context = (!legacy && this.supported)\n            ? this._webAudioContext\n            : this._htmlAudioContext;\n    }\n\n    /**\n     * This disables auto-pause all playback when the window blurs (WebAudio only).\n     * This is helpful to keep from playing sounds when the user switches tabs.\n     * However, if you're running content within an iframe, this may be undesirable\n     * and you should disable (set to `true`) this behavior.\n     * @default false\n     */\n    public get disableAutoPause(): boolean\n    {\n        return !this._webAudioContext.autoPause;\n    }\n    public set disableAutoPause(autoPause: boolean)\n    {\n        this._webAudioContext.autoPause = !autoPause;\n    }\n\n    /**\n     * Removes a sound by alias.\n     * @param alias - The sound alias reference.\n     * @return Instance for chaining.\n     */\n    public remove(alias: string): this\n    {\n        this.exists(alias, true);\n        this._sounds[alias].destroy();\n        delete this._sounds[alias];\n\n        return this;\n    }\n\n    /**\n     * Set the global volume for all sounds. To set per-sound volume see {@link SoundLibrary#volume}.\n     */\n    public get volumeAll(): number\n    {\n        return this._context.volume;\n    }\n    public set volumeAll(volume: number)\n    {\n        this._context.volume = volume;\n        this._context.refresh();\n    }\n\n    /**\n     * Set the global speed for all sounds. To set per-sound speed see {@link SoundLibrary#speed}.\n     */\n    public get speedAll(): number\n    {\n        return this._context.speed;\n    }\n    public set speedAll(speed: number)\n    {\n        this._context.speed = speed;\n        this._context.refresh();\n    }\n\n    /**\n     * Toggle paused property for all sounds.\n     * @return `true` if all sounds are paused.\n     */\n    public togglePauseAll(): boolean\n    {\n        return this._context.togglePause();\n    }\n\n    /**\n     * Pauses any playing sounds.\n     * @return Instance for chaining.\n     */\n    public pauseAll(): this\n    {\n        this._context.paused = true;\n        this._context.refreshPaused();\n\n        return this;\n    }\n\n    /**\n     * Resumes any sounds.\n     * @return Instance for chaining.\n     */\n    public resumeAll(): this\n    {\n        this._context.paused = false;\n        this._context.refreshPaused();\n\n        return this;\n    }\n\n    /**\n     * Toggle muted property for all sounds.\n     * @return `true` if all sounds are muted.\n     */\n    public toggleMuteAll(): boolean\n    {\n        return this._context.toggleMute();\n    }\n\n    /**\n     * Mutes all playing sounds.\n     * @return Instance for chaining.\n     */\n    public muteAll(): this\n    {\n        this._context.muted = true;\n        this._context.refresh();\n\n        return this;\n    }\n\n    /**\n     * Unmutes all playing sounds.\n     * @return Instance for chaining.\n     */\n    public unmuteAll(): this\n    {\n        this._context.muted = false;\n        this._context.refresh();\n\n        return this;\n    }\n\n    /**\n     * Stops and removes all sounds. They cannot be used after this.\n     * @return Instance for chaining.\n     */\n    public removeAll(): this\n    {\n        for (const alias in this._sounds)\n        {\n            this._sounds[alias].destroy();\n            delete this._sounds[alias];\n        }\n\n        return this;\n    }\n\n    /**\n     * Stops all sounds.\n     * @return Instance for chaining.\n     */\n    public stopAll(): this\n    {\n        for (const alias in this._sounds)\n        {\n            this._sounds[alias].stop();\n        }\n\n        return this;\n    }\n\n    /**\n     * Checks if a sound by alias exists.\n     * @param alias - Check for alias.\n     * @param assert - Whether enable console.assert.\n     * @return true if the sound exists.\n     */\n    public exists(alias: string, assert = false): boolean\n    {\n        const exists = !!this._sounds[alias];\n\n        if (assert)\n        {\n            // eslint-disable-next-line no-console\n            console.assert(exists, `No sound matching alias '${alias}'.`);\n        }\n\n        return exists;\n    }\n\n    /**\n     * Convenience function to check to see if any sound is playing.\n     * @returns `true` if any sound is currently playing.\n     */\n    public isPlaying(): boolean\n    {\n        for (const alias in this._sounds)\n        {\n            if (this._sounds[alias].isPlaying)\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Find a sound by alias.\n     * @param alias - The sound alias reference.\n     * @return Sound object.\n     */\n    public find(alias: string): Sound\n    {\n        this.exists(alias, true);\n\n        return this._sounds[alias];\n    }\n\n    /**\n     * Plays a sound.\n     * @method play\n     * @instance\n     * @param {string} alias - The sound alias reference.\n     * @param {string} sprite - The alias of the sprite to play.\n     * @return {IMediaInstance|null} The sound instance, this cannot be reused\n     *         after it is done playing. Returns `null` if the sound has not yet loaded.\n     */\n\n    /**\n     * Plays a sound.\n     * @param alias - The sound alias reference.\n     * @param {PlayOptions|Function} options - The options or callback when done.\n     * @return The sound instance,\n     *        this cannot be reused after it is done playing. Returns a Promise if the sound\n     *        has not yet loaded.\n     */\n    public play(\n        alias: string,\n        options?: PlayOptions | CompleteCallback | string): IMediaInstance | Promise<IMediaInstance>\n    {\n        return this.find(alias).play(options);\n    }\n\n    /**\n     * Stops a sound.\n     * @param alias - The sound alias reference.\n     * @return Sound object.\n     */\n    public stop(alias: string): Sound\n    {\n        return this.find(alias).stop();\n    }\n\n    /**\n     * Pauses a sound.\n     * @param alias - The sound alias reference.\n     * @return Sound object.\n     */\n    public pause(alias: string): Sound\n    {\n        return this.find(alias).pause();\n    }\n\n    /**\n     * Resumes a sound.\n     * @param alias - The sound alias reference.\n     * @return Instance for chaining.\n     */\n    public resume(alias: string): Sound\n    {\n        return this.find(alias).resume();\n    }\n\n    /**\n     * Get or set the volume for a sound.\n     * @param alias - The sound alias reference.\n     * @param volume - Optional current volume to set.\n     * @return The current volume.\n     */\n    public volume(alias: string, volume?: number): number\n    {\n        const sound = this.find(alias);\n\n        if (volume !== undefined)\n        {\n            sound.volume = volume;\n        }\n\n        return sound.volume;\n    }\n\n    /**\n     * Get or set the speed for a sound.\n     * @param alias - The sound alias reference.\n     * @param speed - Optional current speed to set.\n     * @return The current speed.\n     */\n    public speed(alias: string, speed?: number): number\n    {\n        const sound = this.find(alias);\n\n        if (speed !== undefined)\n        {\n            sound.speed = speed;\n        }\n\n        return sound.speed;\n    }\n\n    /**\n     * Get the length of a sound in seconds.\n     * @param alias - The sound alias reference.\n     * @return The current duration in seconds.\n     */\n    public duration(alias: string): number\n    {\n        return this.find(alias).duration;\n    }\n\n    /**\n     * Closes the sound library. This will release/destroy\n     * the AudioContext(s). Can be used safely if you want to\n     * initialize the sound library later. Use `init` method.\n     */\n    public close(): this\n    {\n        this.removeAll();\n        this._sounds = null;\n        if (this._webAudioContext)\n        {\n            this._webAudioContext.destroy();\n            this._webAudioContext = null;\n        }\n        if (this._htmlAudioContext)\n        {\n            this._htmlAudioContext.destroy();\n            this._htmlAudioContext = null;\n        }\n        this._context = null;\n\n        return this;\n    }\n}\n\nexport { SoundLibrary };\nexport type { SoundMap, SoundSourceMap };\n", "import { AssetExtension, extensions, ExtensionType, LoaderParser, LoaderParserPriority, path, ResolvedAsset } from 'pixi.js';\nimport { getInstance } from './instance';\nimport { Options, Sound } from './Sound';\nimport { extensions as exts, mimes, supported } from './utils/supported';\n\n/** Get the alias for the sound */\nconst getAlias = (asset: ResolvedAsset) =>\n{\n    const src = asset.src;\n    let alias = asset?.alias?.[0];\n\n    if (!alias || asset.src === alias)\n    {\n        alias = path.basename(src, path.extname(src));\n    }\n\n    return alias;\n};\n\n/**\n * Simple loader plugin for loading text data.\n */\nconst soundAsset = {\n    extension: ExtensionType.Asset,\n    detection: {\n        test: async () => true,\n        add: async (formats) => [...formats, ...exts.filter((ext) => supported[ext])],\n        remove: async (formats) => formats.filter((ext) => formats.includes(ext)),\n    },\n    loader: {\n        name: 'sound',\n        extension: {\n            type: [ExtensionType.LoadParser],\n            priority: LoaderParserPriority.High,\n        },\n\n        /** Should we attempt to load this file? */\n        test(url: string): boolean\n        {\n            const ext = path.extname(url).slice(1);\n\n            return !!supported[ext] || mimes.some((mime) => url.startsWith(`data:${mime}`));\n        },\n\n        /** Load the sound file, this is mostly handled by Sound.from() */\n        async load(url: string, asset: ResolvedAsset<Omit<Options, 'url' | 'preload'>>): Promise<Sound>\n        {\n            // We'll use the internal Sound.from to load the asset\n            const sound = await new Promise<Sound>((resolve, reject) => Sound.from({\n                ...asset.data,\n                url,\n                preload: true,\n                loaded(err, sound)\n                {\n                    if (err)\n                    {\n                        reject(err);\n                    }\n                    else\n                    {\n                        resolve(sound);\n                    }\n                    asset.data?.loaded?.(err, sound);\n                },\n            }));\n\n            getInstance().add(getAlias(asset), sound);\n\n            return sound;\n        },\n\n        /** Remove the sound from the library */\n        async unload(_sound: Sound, asset: ResolvedAsset): Promise<void>\n        {\n            getInstance().remove(getAlias(asset));\n        },\n    } as LoaderParser<Sound>,\n} as AssetExtension;\n\nextensions.add(soundAsset);\n\nexport { soundAsset };\n", "import * as filters from './filters';\nimport * as htmlaudio from './htmlaudio';\nimport { setInstance } from './instance';\nimport { SoundLibrary } from './SoundLibrary';\nimport * as utils from './utils';\nimport * as webaudio from './webaudio';\n\nconst sound = setInstance(new SoundLibrary());\n\nexport * from './Filterable';\nexport * from './filters/Filter';\nexport * from './interfaces';\nexport * from './Sound';\nexport * from './soundAsset';\nexport * from './SoundLibrary';\nexport * from './SoundSprite';\nexport {\n    filters,\n    htmlaudio,\n    sound,\n    utils,\n    webaudio,\n};\n", "/**\n * Base event.\n * @author\n */\nexport class BaseEvent {\n    /**\n     * Base event.\n     * @param eventType Event type (event name).\n     * @param payload Can contain any value or values that you want (optional).\n     */\n    constructor(eventType, payload) {\n        this._eventType = eventType;\n        this._payload = payload;\n    }\n    /**\n     * Returns current event type.\n     * @returns string\n     */\n    getEventType() {\n        return this._eventType;\n    }\n    /**\n     * Returns current event's payload value.\n     * @returns any\n     */\n    getPayload() {\n        return this._payload;\n    }\n}\n", "import { BaseEvent } from \"./BaseEvent\";\n/**\n * Preloader events.\n * @author\n */\nexport class PreloaderEvents extends BaseEvent {\n}\nPreloaderEvents.LOADING_BEGIN = \"LOADING_BEGIN\";\nPreloaderEvents.LOADING_PROGRESS = \"LOADING_PROGRESS\";\nPreloaderEvents.LOADING_COMPLETE = \"LOADING_COMPLETE\";\n", "export class Globals {\n}\n", "import { Signal } from \"signals\";\n/**\n * Singleton class.\n *\n * All events will be stored here, and you can add, remove and dispatch\n * events in the whole project.\n * This is the singleton class.\n * @author\n */\nexport class EventsManager {\n    constructor() {\n        this.signals = [];\n        this.eventTypes = [];\n    }\n    /**\n     * Returns instance of this class.\n     * @returns EventManager\n     */\n    static getInstance() {\n        if (this.instance === undefined) {\n            this.instance = new EventsManager();\n        }\n        return this.instance;\n    }\n    /**\n     * Adds new event.\n     * @param eventType Event type (event name).\n     * @param callback Callback function.\n     * @param listenerContext This is actually caller class in most cases (optional parameter).\n     */\n    addEvent(eventType, callback, listenerContext) {\n        const signal = new Signal();\n        signal.add(callback, listenerContext);\n        this.signals.push(signal);\n        this.eventTypes.push(eventType);\n    }\n    /**\n     * Removes the event.\n     * The event will be removed only if it already exists.\n     * @param eventType Event type (event name).\n     * @param callback Callback function.\n     * @param listenerContext This is actually caller class in most cases (optional parameter).\n     */\n    removeEvent(eventType, callback, listenerContext) {\n        if (this.hasEvent(eventType)) {\n            let index = -1;\n            for (let i = 0; i < this.eventTypes.length; i++) {\n                const eventItem = this.eventTypes[i];\n                if (eventItem === eventType) {\n                    const signal = this.signals[i];\n                    if (signal.has(callback, listenerContext)) {\n                        signal.remove(callback, listenerContext);\n                        index = i;\n                    }\n                }\n            }\n            if (index > -1) {\n                this.signals.splice(index, 1);\n                this.eventTypes.splice(index, 1);\n            }\n        }\n    }\n    /**\n     * Checks does event exists.\n     * @param eventType Event type (event name).\n     * @returns boolean\n     */\n    hasEvent(eventType) {\n        return this.eventTypes.indexOf(eventType) > -1;\n    }\n    /**\n     * Dispatches the event.\n     * The event will be dispatched only if it exists.\n     * @param event BaseEvent object.\n     */\n    dispatchEvent(event) {\n        const eventType = event.getEventType();\n        if (this.hasEvent(eventType)) {\n            for (let i = 0; i < this.eventTypes.length; i++) {\n                const eventItem = this.eventTypes[i];\n                if (eventItem === eventType) {\n                    const signal = this.signals[i];\n                    signal.dispatch(event);\n                }\n            }\n        }\n    }\n}\n", "/**\n * Device's possible orientation types enum.\n * @author\n */\nexport var OrientationTypes;\n(function (OrientationTypes) {\n    OrientationTypes[OrientationTypes[\"PORTRAIT\"] = 1] = \"PORTRAIT\";\n    OrientationTypes[OrientationTypes[\"LANDSCAPE\"] = 2] = \"LANDSCAPE\";\n    OrientationTypes[OrientationTypes[\"NONE\"] = 3] = \"NONE\";\n})(OrientationTypes || (OrientationTypes = {}));\n", "import { OrientationTypes } from \"./orientationTypes\";\n/**\n * Singleton class.\n *\n * Detects the current user's device, aspect ratio and orientation.\n * This is the singleton class.\n * @author\n */\nexport class DeviceManager {\n    constructor() {\n        this._isInFullscreen = false;\n    }\n    /**\n     * Updates the network status.\n     * Listens for online/offline status.\n     */\n    updateNetworkStatus() {\n    }\n    /**\n     * Adds all necessary events.\n     * Dispatches the events like visibility change or offline/online status.\n     */\n    addNecessaryEvents() {\n        window.addEventListener(\"online\", this.updateNetworkStatus);\n        window.addEventListener(\"offline\", this.updateNetworkStatus);\n        document.addEventListener(\"fullscreenchange\", this.onFullScreenChange, false);\n        document.addEventListener(\"webkitfullscreenchange\", this.onFullScreenChange, false);\n        document.addEventListener(\"mozfullscreenchange\", this.onFullScreenChange, false);\n    }\n    onFullScreenChange() {\n        this._isInFullscreen = document.fullscreenElement !== undefined;\n    }\n    /**\n     * Requests the fullscreen for specific DOM element.\n     * @param element HTML DOM element that will be presented in fullscreen.\n     */\n    requestFullScreen(element) {\n        if (!this._isInFullscreen && document.fullscreenEnabled) {\n            element.requestFullscreen();\n            /* let fsPromise: Promise<void> = element.requestFullscreen();\n                  fsPromise.then((): void =>\n                  {\n                      console.log(1);\n                      this.isInFullscreen = true;\n                  }); */\n        }\n    }\n    /**\n     * Returns to regular screen (exit from fullscreen mode).\n     */\n    exitFullScreen() {\n        if (this._isInFullscreen && document.fullscreenEnabled) {\n            document.exitFullscreen();\n            /* let fsPromise: Promise<void> = document.exitFullscreen();\n                  fsPromise.then((): void =>\n                  {\n                      this.isInFullscreen = false;\n                  }); */\n        }\n    }\n    /**\n     * Toggles the fullscreen state.\n     * @param element HTML DOM element that will be presented in fullscreen.\n     */\n    toggleFullScreen(element) {\n        // let fsPromise: Promise<void>;\n        if (document.fullscreenEnabled) {\n            if (!this._isInFullscreen) {\n                element.requestFullscreen();\n                /* fsPromise = element.requestFullscreen();\n                        fsPromise.then((): void =>\n                        {\n                            this.isInFullscreen = true;\n                        }); */\n            }\n            else {\n                document.exitFullscreen();\n                /* fsPromise = document.exitFullscreen();\n                        fsPromise.then((): void =>\n                        {\n                            this.isInFullscreen = false;\n                        }); */\n            }\n        }\n    }\n    /**\n     * Returns the instance of this class.\n     * @returns DeviceManager\n     */\n    static getInstance() {\n        if (this._instance === undefined) {\n            this._instance = new DeviceManager();\n        }\n        return this._instance;\n    }\n    /**\n     * Determines is it android device.\n     * @returns boolean\n     */\n    isAndroid() {\n        return !!navigator.userAgent.match(/Android/i);\n    }\n    /**\n     * Determines is it WebOS device.\n     * @returns boolean\n     */\n    isWebOS() {\n        return !!navigator.userAgent.match(/webOS/i);\n    }\n    /**\n     * Determines is it BlackBerry device.\n     * @returns boolean\n     */\n    isBlackBerry() {\n        return !!navigator.userAgent.match(/BlackBerry/i);\n    }\n    /**\n     * Determines is it iOS device.\n     * @returns boolean\n     */\n    isIOS() {\n        return !!navigator.userAgent.match(/iPhone|iPad|iPod/i);\n    }\n    /**\n     * Determines is it Opera device.\n     * @returns boolean\n     */\n    isOpera() {\n        return !!navigator.userAgent.match(/Opera Mini/i);\n    }\n    /**\n     * Determines is it Windows phone device.\n     * @returns boolean\n     */\n    isWindowsPhone() {\n        return !!navigator.userAgent.match(/IEMobile|Windows Phone/i);\n    }\n    /**\n     * Determines is it mobile device (phone, tablet).\n     * @returns boolean\n     */\n    isMobile() {\n        return (this.isAndroid() ||\n            this.isWebOS() ||\n            this.isBlackBerry() ||\n            this.isIOS() ||\n            this.isOpera() ||\n            this.isWindowsPhone());\n    }\n    /**\n     * Calculates and returns device's aspect ratio.\n     * @returns Device's aspect ratio value.\n     */\n    getAspectRatio() {\n        return (window.innerWidth / window.innerHeight).toFixed(2);\n    }\n    /**\n     * Returns device's current orientation type.\n     * @returns OrientationTypes enum value.\n     */\n    getOrientation() {\n        if (window.orientation !== undefined) {\n            return window.orientation === 0\n                ? OrientationTypes.PORTRAIT\n                : OrientationTypes.LANDSCAPE;\n        }\n        return OrientationTypes.NONE;\n    }\n    /**\n     * Returns browser's name (Opera, IE, Chrome, Safari, Firefox).\n     * @returns string\n     */\n    getBrowserName() {\n        const nAgt = navigator.userAgent;\n        let browserName = navigator.appName;\n        if (nAgt.indexOf(\"Opera\") !== -1) {\n            browserName = \"Opera\";\n        }\n        else if (nAgt.indexOf(\"MSIE\") !== -1) {\n            browserName = \"IE\";\n        }\n        else if (nAgt.indexOf(\"Chrome\") !== -1) {\n            browserName = \"Chrome\";\n        }\n        else if (nAgt.indexOf(\"Safari\") !== -1) {\n            browserName = \"Safari\";\n        }\n        else if (nAgt.indexOf(\"Firefox\") !== -1) {\n            browserName = \"Firefox\";\n        }\n        else if (nAgt.lastIndexOf(\" \") + 1 < nAgt.lastIndexOf(\"/\")) {\n            const nameOffset = nAgt.lastIndexOf(\" \") + 1;\n            const verOffset = nAgt.lastIndexOf(\"/\");\n            browserName = nAgt.substring(nameOffset, verOffset);\n        }\n        return browserName;\n    }\n}\n", "import { Sound } from \"@pixi/sound\";\nimport { Assets } from \"pixi.js\";\nimport { PreloaderEvents } from \"../eventsManager/PreloaderEvents\";\nimport { Globals } from \"../Globals\";\nimport { EventsManager } from \"../eventsManager/EventsManager\";\nimport { DeviceManager } from \"../managers/events/deviceManager\";\nimport eventBus from \"../events/EventBus\";\nimport { GameStatus } from \"./GameStatus\";\nexport class Preloader {\n    constructor() {\n        this.assetsName = \"game-assets\";\n        this.manifestName = \"./assets-manifest.json\";\n        this.gameFolder = \"\";\n        this.device = DeviceManager.getInstance().isMobile() ? \"mobile\" : \"desktop\";\n        this.loadManifest(this.updateProgress);\n    }\n    async loadManifest(onProgress) {\n        /*const response = await fetch(`./assets/settings.json`);\n        if (!response.ok) {\n          throw new Error(`Failed to fetch settings.json: ${response.statusText}`);\n        }*/\n        //const settings = await response.json();\n        console.log(\"LOAD MANIFEST....\");\n        const basePath = window.location.pathname.replace(/\\/[^\\/]*$/, \"/\") + \"assets/\";\n        try {\n            const manifestResponse = await fetch(this.manifestName);\n            if (!manifestResponse.ok)\n                throw new Error(`Failed to load manifest: ${manifestResponse.status}`);\n            const manifest = await manifestResponse.json();\n            console.log(\"MANIFEST: \", manifest);\n            const loadDataHolder = [];\n            const soundAssets = [];\n            let totalSoundAssets = 0;\n            // Prepare assets and count sound assets\n            manifest.bundles.forEach((bundle) => {\n                bundle.assets.forEach((asset) => {\n                    asset.src = basePath + asset.src;\n                    Assets.add(asset);\n                    loadDataHolder.push(asset.id);\n                    if (asset.src.endsWith(\".mp3\") ||\n                        asset.src.endsWith(\".ogg\") ||\n                        asset.src.endsWith(\".wav\")) {\n                        asset.type = \"audio\";\n                        totalSoundAssets++;\n                    }\n                });\n            });\n            console.log(\"Loading.................................\");\n            // Load textures (80% progress)\n            let texturesData;\n            try {\n                texturesData = await Assets.load(loadDataHolder, (val) => {\n                    this.updateProgress(val * 0.8);\n                });\n                // success: texturesData is ready\n            }\n            catch (error) {\n                console.error(\"Error while loading assets:\", error);\n                // You can also display an error message or trigger a fallback here\n            }\n            Globals.assetsLibrary = texturesData;\n            console.log(\"Textures Loaded:\", texturesData);\n            console.log(\"✅ Game Assets Loaded:\");\n            // Load sounds (remaining 20%)\n            let loadedSoundAssets = 0;\n            const soundPromises = [];\n            manifest.bundles.forEach((bundle) => {\n                bundle.assets.forEach((asset) => {\n                    if (asset.src.endsWith(\".mp3\") ||\n                        asset.src.endsWith(\".ogg\") ||\n                        asset.src.endsWith(\".wav\")) {\n                        const soundPromise = new Promise((resolve) => {\n                            const sound = Sound.from(asset.src);\n                            soundAssets.push({ name: asset.id, sound });\n                            setTimeout(() => {\n                                loadedSoundAssets++;\n                                const progress = Math.min(1, 0.8 + (loadedSoundAssets / totalSoundAssets) * 0.2);\n                                onProgress(progress);\n                                //console.log(`🎧 Sound Loaded: ${asset.name}`);\n                                resolve();\n                            }, 20);\n                        });\n                        soundPromises.push(soundPromise);\n                    }\n                });\n            });\n            await Promise.all(soundPromises);\n            Globals.SoundAssets = soundAssets;\n            console.log(\"🎶 All Sounds Loaded:\", soundAssets);\n            EventsManager.getInstance().dispatchEvent(new PreloaderEvents(PreloaderEvents.LOADING_COMPLETE));\n            return { soundAssets };\n        }\n        catch (e) {\n            //console.error(\"❌ Error loading manifest or assets\", e);\n        }\n    }\n    updateProgress(progress) {\n        //console.log(progress);\n        eventBus.emit(GameStatus.LOADING, { value: progress });\n    }\n}\n", "export var EventsEnum;\n(function (EventsEnum) {\n    EventsEnum[\"INITIAL_DATA\"] = \"INITIAL_DATA\";\n    EventsEnum[\"SPIN\"] = \"SPIN\";\n    EventsEnum[\"STOP_SPIN\"] = \"STOP_SPIN\";\n    EventsEnum[\"START_SPIN\"] = \"START_SPIN\";\n    EventsEnum[\"STOP\"] = \"STOP\";\n    EventsEnum[\"REEL_STOPPED\"] = \"REEL_STOPPED\";\n    EventsEnum[\"AUTOSPIN\"] = \"AUTOSPIN\";\n    EventsEnum[\"IDLE\"] = \"IDLE\";\n    EventsEnum[\"UI_STATE\"] = \"UI_STATE\";\n    EventsEnum[\"STATE_CHANGED\"] = \"STATE_CHANGED\";\n    EventsEnum[\"CHEAT_SERVER_COMMAND\"] = \"CHEAT_SERVER_COMMAND\";\n    EventsEnum[\"SYMBOL_TRANSFORM\"] = \"SYMBOL_TRANSFORM\";\n    EventsEnum[\"SYMBOL_TRANSFORM_BACK\"] = \"SYMBOL_TRANSFORM_BACK\";\n    EventsEnum[\"MOCK_DATA\"] = \"MOCK_DATA\";\n    EventsEnum[\"UPDATE_GAME_STATE\"] = \"UPDATE_GAME_STATE\";\n    EventsEnum[\"SHOW_IN_COINS\"] = \"SHOW_IN_COINS\";\n    EventsEnum[\"COUNTER_DONE\"] = \"COUNTER_DONE\";\n    EventsEnum[\"QUICK_SPIN\"] = \"QUICK_SPIN\";\n    EventsEnum[\"ANTICIPATION\"] = \"ANTICIPATION\";\n})(EventsEnum || (EventsEnum = {}));\n", "import { Globals } from \"../Globals\";\nimport { Howl } from 'howler';\nimport eventBus from \"../events/EventBus\";\nimport { EventsEnum } from \"../events/EventsEnum\";\nimport { SoundId } from \"../sound/SoundId\";\nexport class SoundManager {\n    constructor(soundData) {\n        this.bcgMusicState = 1;\n        this.soundData = soundData;\n        document.addEventListener(\"visibilitychange\", () => {\n            if (this.gameMusic && this.bcgMusicState === 1) {\n                if (document.visibilityState === \"hidden\" && Globals.gameStates.getIsGameEntered()) {\n                    this.gameMusic.pause();\n                }\n                else {\n                    if (!Globals.gameStates.getIsSoundOn())\n                        return;\n                    this.gameMusic.play();\n                }\n            }\n            if (this.ambientMusic && this.bcgMusicState === 2) {\n                if (document.visibilityState === \"hidden\" && Globals.gameStates.getIsGameEntered()) {\n                    this.ambientMusic.pause();\n                }\n                else {\n                    if (!Globals.gameStates.getIsSoundOn())\n                        return;\n                    this.ambientMusic.play();\n                }\n            }\n        });\n        window.addEventListener(\"focus\", () => {\n            //console.log(\"focus\");\n            if (!Globals.gameStates.getIsSoundOn())\n                return;\n            //this.gameMusic.play();\n        });\n        window.addEventListener(\"blur\", () => {\n            //console.log(\"blur\");\n            //this.gameMusic.pause();\n        });\n        eventBus.on(EventsEnum.COUNTER_DONE, () => {\n            if (this.gameMusic) {\n                this.gameMusic.fade(0.1, 0.5, 1000);\n            }\n        });\n    }\n    handleUiAction(isSoundOn) {\n        if (!Globals.gameStates.getIsGameEntered())\n            return;\n        if (isSoundOn) {\n            if (this.gameMusic) {\n                if (!this.gameMusic.playing()) {\n                    this.gameMusic.play();\n                }\n                else {\n                    this.playMusic(SoundId.MAIN_THEME);\n                }\n            }\n            else {\n                this.playMusic(SoundId.MAIN_THEME);\n            }\n        }\n        else {\n            this.stopMusic();\n            this.stopAmbientMusic();\n        }\n    }\n    playMusic(musicId) {\n        if (!Globals.gameStates.getIsSoundOn() || !Globals.gameStates.getIsGameSoundsOn() || !Globals.gameStates.getIsGameEntered())\n            return;\n        this.bcgMusicState = 1;\n        // @ts-ignore\n        const snd = this.soundData.find((s) => s.name === musicId).sound.url;\n        if (this.gameMusic) {\n            this.gameMusic.stop();\n        }\n        this.gameMusic = new Howl({\n            src: [snd],\n            autoplay: true,\n            loop: true,\n            volume: 0.5\n        });\n    }\n    stopMusic() {\n        if (this.gameMusic) {\n            this.gameMusic.stop();\n        }\n    }\n    playSound(soundId) {\n        var _a;\n        if (this.gameMusic) {\n            this.gameMusic.fade(0.5, 0.1, 500);\n        }\n        if (!Globals.gameStates.getIsSoundOn() || !Globals.gameStates.getIsGameSoundsOn())\n            return;\n        const clickSound = (_a = this.soundData.find((s) => s.name === soundId)) === null || _a === void 0 ? void 0 : _a.sound;\n        clickSound === null || clickSound === void 0 ? void 0 : clickSound.play();\n    }\n    stopSound(soundId) {\n        var _a;\n        const clickSound = (_a = this.soundData.find((s) => s.name === soundId)) === null || _a === void 0 ? void 0 : _a.sound;\n        clickSound === null || clickSound === void 0 ? void 0 : clickSound.stop();\n    }\n    playAmbientMusic(val) {\n        if (!Globals.gameStates.getIsSoundOn() || !Globals.gameStates.getIsAmbientSound() || !Globals.gameStates.getIsGameEntered())\n            return;\n        if (val) {\n            this.bcgMusicState = 2;\n            this.stopMusic();\n            // @ts-ignore\n            const snd = this.soundData.find((s) => s.name === SoundId.AMBIENT_MUSIC).sound.url;\n            if (this.ambientMusic) {\n                this.ambientMusic.stop();\n            }\n            this.ambientMusic = new Howl({\n                src: [snd],\n                autoplay: true,\n                loop: true,\n                volume: 0.5\n            });\n            this.ambientMusic.play();\n        }\n        else {\n            this.stopAmbientMusic();\n        }\n    }\n    stopAmbientMusic() {\n        if (this.ambientMusic) {\n            this.ambientMusic.stop();\n        }\n    }\n    gameSoundsAction(value) {\n        if (!value) {\n            this.stopMusic();\n        }\n        else {\n            this.playMusic(SoundId.MAIN_THEME);\n        }\n    }\n    playCollectWinSound(soundId) {\n        if (!Globals.gameStates.getIsSoundOn() || Globals.gameStates.getIsAmbientSound())\n            return;\n        if (!this.collectSound) {\n            // @ts-ignore\n            const snd = this.soundData.find((s) => s.name === soundId).sound.url;\n            this.collectSound = new Howl({\n                src: [snd]\n            });\n        }\n        if (!this.collectSound.playing()) {\n            this.collectSound.play();\n        }\n    }\n    playIndependentSound(soundId) {\n        if (!Globals.gameStates.getIsSoundOn() || Globals.gameStates.getIsAmbientSound())\n            return;\n        // @ts-ignore\n        const snd = this.soundData.find((s) => s.name === soundId).sound.url;\n        const newSound = new Howl({\n            src: [snd]\n        });\n        newSound.play();\n        newSound.once('end', () => {\n            //console.log('Sound finished, unloading...');\n            newSound.unload(); // Frees memory and removes audio nodes\n        });\n    }\n}\n", "export class SoundId {\n    constructor() {\n    }\n    getBigWinSound(winType) {\n        let bigWinSoundId = \"\";\n        switch (winType) {\n            case \"big\":\n                bigWinSoundId = \"bigWin\";\n                break;\n            case \"mega\":\n                bigWinSoundId = \"megaWin\";\n                break;\n            case \"super\":\n                bigWinSoundId = \"sensationalWin\";\n                break;\n            case \"epic\":\n                bigWinSoundId = \"epicWin\";\n                break;\n        }\n        return bigWinSoundId;\n    }\n    getRegularWinId() {\n        return \"regularWin\";\n    }\n    getCollectWinId() {\n        return \"collectWin\";\n    }\n}\nSoundId.MAIN_THEME = \"mainTheme\";\nSoundId.AMBIENT_MUSIC = \"mainMusic\";\n", "import { AnimatedSprite, Assets } from \"pixi.js\";\nexport class SpriteSheetFactory {\n    constructor() {\n    }\n    getSpriteSheetAnimation(spriteSheetId, animationName) {\n        const animations = Assets.cache.get(spriteSheetId).data.animations;\n        const card = AnimatedSprite.fromFrames(animations[animationName]);\n        return card;\n    }\n    // @ts-ignore\n    getSpriteSheetImage(spriteSheetId, imageName) {\n        //const images = Assets.cache.get(spriteSheetId).data.;\n    }\n}\n", "import { Globals } from \"../Globals\";\nimport { GameComponentsHolder } from \"../data/GameComponentsHolder\";\nimport { GameStates } from \"../data/GameStates\";\nimport { GameConfig } from \"../data/GameConfig\";\nimport { BaseGameController } from \"../BaseGameController\";\nimport { SoundManager } from \"../managers/SoundManager\";\nimport { SpriteSheetFactory } from \"./SpriteSheetFactory\";\nimport { SoundId } from \"../sound/SoundId\";\nexport class GameFactory {\n    constructor(container, soundData) {\n        this.mainContainer = container;\n        Globals.gameComponentsHolder = new GameComponentsHolder();\n        Globals.gameStates = new GameStates();\n        Globals.soundIdManager = new SoundId();\n        Globals.soundManager = new SoundManager(soundData);\n        this.gameConfiguration = new GameConfig();\n        Globals.gameConfig = this.gameConfiguration;\n        Globals.spritesheetFactory = new SpriteSheetFactory();\n        this.setupGameConfiguration();\n    }\n    setupGameConfiguration() {\n    }\n    setup() {\n        this.gameController = new BaseGameController(this.gameConfiguration);\n    }\n    // @ts-ignore\n    createGameBackground() {\n    }\n}\n", "export class GameProperties {\n}\nGameProperties.STAGE_WIDTH = 1920;\nGameProperties.STAGE_HEIGHT = 1080;\n//public static DEV_COMMUNICATION_URL = \"http://192.168.1.6:3006\";\nGameProperties.DEV_COMMUNICATION_URL = \"http://localhost:3006\";\nGameProperties.GUIDES_ON = false;\n", "export class ScreenManager {\n    constructor(app, gameContainer) {\n        this.currentScene = null;\n        this.scenes = new Map();\n        this.app = app;\n        this.gameContainer = gameContainer;\n        // Auto-update current scene each tick\n        this.app.ticker.add((delta) => {\n            var _a;\n            if ((_a = this.currentScene) === null || _a === void 0 ? void 0 : _a.update) {\n                this.currentScene.update(delta.deltaTime);\n            }\n        });\n        // Handle window resize\n        window.addEventListener(\"resize\", () => {\n            if (!this.currentScene)\n                return;\n            const isLandscape = window.innerWidth > window.innerHeight;\n            const width = window.innerWidth;\n            const height = window.innerHeight;\n            const isMobile = /Mobi|Android/i.test(navigator.userAgent);\n            this.currentScene.orientationChange(isLandscape, isMobile, width, height);\n        });\n    }\n    /** Register a scene with a unique name */\n    registerScene(scene) {\n        this.scenes.set(scene.sceneName, scene);\n    }\n    /** Switch to a scene by name */\n    changeScene(sceneName) {\n        const scene = this.scenes.get(sceneName);\n        if (!scene) {\n            console.warn(`Scene ${sceneName} not found!`);\n            return;\n        }\n        // Remove current scene\n        if (this.currentScene) {\n            this.currentScene.onHide();\n            this.gameContainer.removeChild(this.currentScene);\n        }\n        // Add new scene\n        this.currentScene = scene;\n        this.gameContainer.addChild(scene);\n        scene.onShow();\n        // Trigger initial orientation update\n        const isLandscape = window.innerWidth > window.innerHeight;\n        const width = window.innerWidth;\n        const height = window.innerHeight;\n        const isMobile = /Mobi|Android/i.test(navigator.userAgent);\n        scene.orientationChange(isLandscape, isMobile, width, height);\n    }\n    /** Get current scene instance */\n    getCurrentScene() {\n        return this.currentScene;\n    }\n    getSceneById(id) {\n        return this.scenes.get(id);\n    }\n}\n", "export class PositionManager {\n    constructor(baseUrl = \"/\") {\n        this.dataMap = new Map();\n        // Use absolute path to ensure fetch works in dev & build\n        this.assetsBaseUrl = \"/\";\n        this.assetsBaseUrl = baseUrl;\n    }\n    /** Load JSON data from /public/GameLayout.json */\n    async loadPositionData() {\n        try {\n            console.log(\"Fetching JSON from:\", `${this.assetsBaseUrl}GameLayout.json`);\n            const response = await fetch(`${this.assetsBaseUrl}GameLayout.json`);\n            if (!response.ok) {\n                throw new Error(`Failed to fetch GameLayout.json: ${response.statusText}`);\n            }\n            const data = await response.json();\n            this.parseData(data);\n            return data;\n        }\n        catch (error) {\n            console.error(\"Error loading position data:\", error);\n            throw error;\n        }\n    }\n    test() {\n        console.log(\"TEST\", this.dataMap);\n    }\n    getItemPosition(key) {\n        return this.dataMap.get(key);\n    }\n    setItemPositionAndScale(item, positionKey) {\n        const pData = this.dataMap.get(positionKey);\n        if (!pData)\n            throw new Error(`No data with id ${positionKey}`);\n        item.x = pData.x;\n        item.y = pData.y;\n        item.width = pData.width;\n        item.height = pData.height;\n    }\n    parseData(data) {\n        for (const element of data.elements) {\n            this.dataMap.set(element.name, element);\n        }\n    }\n}\n", "export const SceneNames = {\n    LoadingScene: \"LoadingScene\",\n    GameScene: \"GameScene\",\n    EndGameScene: \"EndGameScene\",\n    StartScreen: \"StartScreen\",\n};\n", "import { Application, Container, Graphics } from \"pixi.js\";\nimport { GameProperties } from \"./GameProperties\";\nimport { GameFactory } from \"./factory/GameFactory\";\nimport { Globals } from \"./Globals\";\nimport { Orientation } from \"./data/Orientation\";\nimport { EventsManager } from \"./eventsManager/EventsManager\";\nimport { PreloaderEvents } from \"./eventsManager/PreloaderEvents\";\nimport { Preloader } from \"./data/Preloader\";\nimport eventBus from \"./events/EventBus\";\nimport { GameStatus } from \"./data/GameStatus\";\nimport { ScreenManager } from \"./managers/ScreenManager\";\nimport { GameScene } from \"./components/GameScene\";\nimport { LoadingScene } from \"./components/LoadingScene\";\nimport { StartScreen } from \"./components/StartScreen\";\nimport { PositionManager } from \"./managers/PositionManager\";\nimport { SceneNames } from \"./data/SceneNames\";\nexport class GameApplication {\n    constructor(w, h, color, fromGame = false) {\n        var _a, _b;\n        this.isHelpLayer = true;\n        this.helperAlpha = 0.5;\n        this.isHelperVisible = true;\n        this.soundAssets = [];\n        this.gameInstanceName = \"CoffeeBreakGameInstance\";\n        this.isFromGame = false;\n        this.isFromGame = fromGame;\n        // @ts-ignore\n        const globalWindow = window;\n        if (globalWindow[this.gameInstanceName]) {\n            (_b = (_a = globalWindow[this.gameInstanceName]).destroy) === null || _b === void 0 ? void 0 : _b.call(_a);\n        }\n        globalWindow[this.gameInstanceName] = this;\n        this.app = new Application();\n        const init = async () => {\n            await this.app.init({\n                width: w,\n                height: h,\n                background: color,\n                resizeTo: window,\n                resolution: window.devicePixelRatio || 1,\n                autoDensity: true\n            });\n            const gameContainer = document.getElementById(\"pixi-game-container\");\n            gameContainer.appendChild(this.app.canvas);\n            GameProperties.STAGE_WIDTH = w;\n            GameProperties.STAGE_HEIGHT = h;\n            this.gameContainer = new Container();\n            this.app.stage.addChild(this.gameContainer);\n            this.screenManager = new ScreenManager(this.app, this.gameContainer);\n        };\n        init();\n    }\n    async start() {\n        Globals.positionManager = new PositionManager();\n        await Globals.positionManager.loadPositionData();\n        EventsManager.getInstance().addEvent(PreloaderEvents.LOADING_COMPLETE, this.setupGame, this);\n        this.createMainScreens();\n        eventBus.on(\"START_GAME\", () => {\n            this.screenManager.changeScene(SceneNames.GameScene);\n        });\n        // Show Loading first\n        this.screenManager.changeScene(SceneNames.LoadingScene);\n        eventBus.on(GameStatus.LOADING, (progress) => {\n            const loadScene = this.screenManager.getSceneById(SceneNames.LoadingScene);\n            loadScene.updateProgress(progress.value);\n        });\n        // @ts-ignore\n        const preload = new Preloader();\n    }\n    createMainScreens() {\n        const loadingScene = new LoadingScene(SceneNames.LoadingScene, this.gameContainer);\n        const startScreen = new StartScreen(SceneNames.StartScreen, this.gameContainer);\n        const gameScene = new GameScene(SceneNames.GameScene, this.gameContainer);\n        this.screenManager.registerScene(loadingScene);\n        this.screenManager.registerScene(startScreen);\n        this.screenManager.registerScene(gameScene);\n    }\n    setupGame() {\n        console.log(\"---------------------- SETUP GAME --------------------\");\n        if (this.preloader) {\n            this.app.stage.removeChild(this.preloader);\n            this.preloader.destroy({ children: true });\n        }\n        EventsManager.getInstance().removeEvent(PreloaderEvents.LOADING_COMPLETE, this.setupGame, this);\n        const gameFactory = new GameFactory(this.gameContainer, this.soundAssets);\n        gameFactory.setup();\n        if (this.isHelpLayer) {\n            this.createHelpLayer(Globals.gameStates.getIsLandscapeState());\n        }\n        this.gameReady();\n    }\n    async gameReady() {\n        console.log(\"---- GAME READY ------\");\n        this.screenManager.changeScene(SceneNames.StartScreen);\n        window.addEventListener(\"resize\", () => {\n            this.onResize();\n        });\n        this.onResize();\n    }\n    createHelpLayer(isLandscape) {\n        this.helpLayer = new Graphics();\n        this.helpLayer.rect(0, 0, isLandscape ? 1920 : 1080, isLandscape ? 1080 : 1920)\n            .fill({ alpha: this.helperAlpha, color: 0xFF0000 });\n        this.helpLayer.visible = this.isHelperVisible;\n        this.gameContainer.addChild(this.helpLayer);\n    }\n    revriteHelper(isLandscape) {\n        if (this.isHelpLayer) {\n            this.helpLayer.x = 0;\n            this.helpLayer.y = 0;\n            this.helpLayer.clear();\n            this.helpLayer.rect(0, 0, isLandscape ? 1920 : 1080, isLandscape ? 1080 : 1920)\n                .fill({ alpha: this.helperAlpha, color: 0xFF0000 });\n        }\n    }\n    onResize() {\n        // Define the target aspect ratio (16:9)\n        const targetAspectRatio = 16 / 9;\n        // Get the current window dimensions\n        const windowWidth = window.innerWidth;\n        const windowHeight = window.innerHeight;\n        // Determine current orientation\n        const isLandscape = windowWidth > windowHeight;\n        Globals.gameStates.setIsLandscapeState(isLandscape);\n        Globals.gameStates.setOrientationState(isLandscape ? Orientation.LANDSCAPE : Orientation.PORTRAIT);\n        // Calculate the window's current aspect ratio\n        const windowAspectRatio = windowWidth / windowHeight;\n        let defaultWidth = GameProperties.STAGE_WIDTH;\n        let defaultHeight = GameProperties.STAGE_HEIGHT;\n        if (!isLandscape) {\n            [defaultWidth, defaultHeight] = [defaultHeight, defaultWidth];\n        }\n        // Determine the scaling dimensions based on whether the current aspect ratio\n        // is wider or narrower than our target 16:9 ratio.\n        let newWidth, newHeight;\n        if (windowAspectRatio > targetAspectRatio) {\n            // Screen is relatively wider than 16:9, so fit based on height:\n            // Height is the limiting dimension, and width adjusts accordingly.\n            newHeight = windowHeight;\n            newWidth = newHeight * targetAspectRatio;\n        }\n        else {\n            // Screen is relatively taller than 16:9, so fit based on width:\n            // Width is the limiting dimension, and height adjusts accordingly.\n            newWidth = windowWidth;\n            newHeight = newWidth / targetAspectRatio;\n        }\n        // Resize the Pixi renderer to the full window dimensions\n        this.app.renderer.resize(windowWidth, windowHeight);\n        const scale = windowWidth / windowHeight > defaultWidth / defaultHeight ? windowHeight / defaultHeight : windowWidth / defaultWidth;\n        // Apply the scale to the main game container\n        this.gameContainer.scale.set(scale, scale);\n        Globals.gameScale = scale;\n        if (isLandscape) {\n            this.gameContainer.x = (windowWidth - (1920 * scale)) / 2;\n            this.gameContainer.y = (windowHeight - (1080 * scale)) / 2;\n        }\n        else {\n            this.gameContainer.x = (windowWidth - (1080 * scale)) / 2;\n            this.gameContainer.y = (windowHeight - (1920 * scale)) / 2;\n        }\n        this.revriteHelper(Globals.gameStates.getIsLandscapeState());\n        Globals.gameComponentsHolder.onResize(Globals.gameStates.getIsLandscapeState(), Globals.gameStates.getIsMobile(), newWidth, newHeight);\n    }\n}\n;\n// @ts-ignore\n//window[\"CoffeeBreakGameInstance\"] = gameInstance;\n//const game = new GameApplication(1920,1080,0xff0000);\n", "import { BaseEvent } from \"../../eventsManager/BaseEvent\";\n/**\n *\n * @author\n */\nexport class DeviceManagerEvents extends BaseEvent {\n}\nDeviceManagerEvents.ON_VISIBILITY_CHANGE = \"DM:ON_VISIBILITY_CHANGE\";\nDeviceManagerEvents.ON_NETWORK_STATUS_CHANGE = \"DM:ON_NETWORK_STATUS_CHANGE\";\n", "import { EventsEnum } from \"../events/EventsEnum\";\nimport EventBus from \"../events/EventBus\";\nexport class BaseState {\n    constructor(stateName) {\n        this.state = stateName;\n        this.isExit = false;\n    }\n    enter() {\n        this.isExit = false;\n        console.log(\"ENTER BASE STATE\");\n        EventBus.emit(EventsEnum.IDLE, {});\n    }\n    exit() {\n        if (this.isExit)\n            return;\n        this.isExit = true;\n        console.log(\"EXIT BASE STATE\");\n    }\n}\n", "export var SlotMachineStates;\n(function (SlotMachineStates) {\n    SlotMachineStates[SlotMachineStates[\"INTRO\"] = 0] = \"INTRO\";\n    SlotMachineStates[SlotMachineStates[\"MAIN_MENU\"] = 1] = \"MAIN_MENU\";\n    SlotMachineStates[SlotMachineStates[\"GAME\"] = 2] = \"GAME\";\n    SlotMachineStates[SlotMachineStates[\"END_GAME\"] = 3] = \"END_GAME\";\n})(SlotMachineStates || (SlotMachineStates = {}));\n", "export class StateHolder {\n    constructor() {\n        this.statesData = new Map();\n        this.presentationStates = [];\n    }\n    static getInstance() {\n        if (!StateHolder.instance) {\n            StateHolder.instance = new StateHolder();\n        }\n        return StateHolder.instance;\n    }\n    setState(id, state) {\n        this.statesData.set(id, state);\n    }\n    getState(id) {\n        return this.statesData.get(id);\n    }\n    setPresentationStates(state) {\n        this.presentationStates.push(state);\n    }\n    getPresentationStates() {\n        return this.presentationStates;\n    }\n}\n", "import { StateHolder } from \"./data/StateHolder\";\nimport eventBus from \"../events/EventBus\";\nimport { EventsEnum } from \"../events/EventsEnum\";\nimport { BaseState } from \"./BaseState\";\nimport { SlotMachineStates } from \"./data/SlotMachineStates\";\nexport class StateMachine {\n    constructor() {\n        this.currentState = null;\n        this.checkingStates = [];\n        this.checkingCounter = 0;\n        //register base states\n        StateHolder.getInstance().setState(SlotMachineStates.INTRO, new BaseState(SlotMachineStates.INTRO));\n        eventBus.on(EventsEnum.UI_STATE, (data) => {\n            console.log(data);\n            //this.handleUIState(data.value.key, data.value.value)\n        });\n        // @ts-ignore\n        eventBus.on(EventsEnum.UPDATE_GAME_STATE, (data) => {\n        });\n    }\n    async changeState(newState, data) {\n        var _a;\n        //this.currentState?.exit();\n        this.currentState = newState;\n        //this.currentState.enter(data);\n        if (((_a = this.currentState) === null || _a === void 0 ? void 0 : _a.state) !== SlotMachineStates.INTRO) {\n            this.handleStates(data);\n        }\n        else {\n            this.currentState.enter(data);\n        }\n        eventBus.emit(EventsEnum.STATE_CHANGED, { state: this.currentState.state });\n    }\n    startCheckingStates(checking, data) {\n        this.checkingStates = checking;\n        this.checkingCounter = 0;\n        const state = this.checkingStates[this.checkingCounter];\n        this.checkingCounter++;\n        this.changeState(state, data);\n    }\n    getSate() {\n        return this.currentState;\n    }\n    async handleStates(data) {\n        var _a;\n        //await currents state to end\n        await ((_a = this.currentState) === null || _a === void 0 ? void 0 : _a.enter(data));\n        if (this.checkingCounter < this.checkingStates.length) {\n            const state = this.checkingStates[this.checkingCounter];\n            this.checkingCounter++;\n            this.changeState(state);\n        }\n        else {\n            //loop through win\n        }\n    }\n}\n", "export async function loadJSON(filename) {\n    const response = await fetch(filename);\n    const data = await response.json();\n    return data;\n}\nexport function getRandomColor() {\n    const letters = \"0123456789ABCDEF\";\n    let color = \"#\";\n    for (let i = 0; i < 6; i++) {\n        color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n}\nexport function pause(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\nexport function cancelablePause(ms) {\n    let timeoutId;\n    let rejectFn;\n    const promise = new Promise((resolve, reject) => {\n        rejectFn = reject;\n        timeoutId = setTimeout(resolve, ms);\n    });\n    return {\n        promise,\n        cancel: () => {\n            clearTimeout(timeoutId);\n            rejectFn === null || rejectFn === void 0 ? void 0 : rejectFn(\"cancelled\");\n        }\n    };\n}\nexport function shuffleArray(array) {\n    // Make a copy so we don't mutate the original array\n    const result = array.slice();\n    for (let i = result.length - 1; i > 0; i--) {\n        // Pick a random index from 0 to i\n        const j = Math.floor(Math.random() * (i + 1));\n        // Swap elements at i and j\n        [result[i], result[j]] = [result[j], result[i]];\n    }\n    return result;\n}\nexport function attachDebugFnToWindow(key, fn) {\n    console.warn(\"WARNING. DEBUG FUNCTION ATTACHED WITH NAME:\", key);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    window[key] = fn;\n}\nexport function getDistance(_pt1, _pt2) {\n    return Math.sqrt((_pt1.x - _pt2.x) * (_pt1.x - _pt2.x) + (_pt1.y - _pt2.y) * (_pt1.y - _pt2.y));\n}\n// Function to merge all payloads into one object\nexport const mergedObject = (data1, data2) => {\n    // Initialize result objects\n    let mergedData1 = {};\n    let mergedData2 = {};\n    // Merge payloads based on their types\n    if (data1.type === 1) {\n        mergedData1 = { ...mergedData1, ...data1.payload };\n    }\n    if (data2.type === 2) {\n        mergedData2 = { ...mergedData2, ...data2.payload };\n    }\n    return { data1: mergedData1, data2: mergedData2 };\n};\nexport function formatNumber(num) {\n    return num.toLocaleString(\"en-US\", { minimumFractionDigits: 2, maximumFractionDigits: 2 });\n}\nexport function formatStringNumber(str) {\n    const num = parseFloat(str.replace(/,/g, \"\")); // First, remove commas and convert string to number\n    return num.toLocaleString(\"en-US\", { minimumFractionDigits: 2, maximumFractionDigits: 2 });\n}\nexport function detectDeviceAndAddClass() {\n    const ua = navigator.userAgent.toLowerCase();\n    if (ua.includes(\"android\")) {\n        document.body.classList.add(\"android\");\n    }\n    else if (/iphone|ipod/.test(ua)) {\n        document.body.classList.add(\"iphone\");\n    }\n    else if (/ipad/.test(ua) || (navigator.platform === \"MacIntel\" && navigator.maxTouchPoints > 1)) {\n        document.body.classList.add(\"ipad\");\n    }\n}\n"],
  "mappings": "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",
  "names": ["EventEmitter", "global", "Signal", "HowlerGlobal", "Howler", "sound", "e", "i", "Howl", "Sound", "id", "EventEmitter", "GameplayStates", "GameStatus", "sound", "global", "sound", "sound", "instance", "extensions", "id", "global", "sound", "instance", "extensions", "sound", "resolve", "instance", "Sound", "options", "Sound", "sound", "exts", "sound", "Sound", "extensions", "OrientationTypes", "sound", "Sound", "EventsEnum", "id", "SlotMachineStates", "id"]
}
